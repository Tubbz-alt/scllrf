/* Poll 9 voltage monitors on the amc78xx ADC board. */

program amc78xxmon

option +r;    /* re-entrant */
option +W; // Initially, extra warnings


%{
	#include <math.h>
	#include <stdio.h>
	#include <errlog.h> /* errlogPrintf */
	#include <unistd.h> /* sleep */
enum { spareAddr, v2p2Addr, v3p7Addr, v12p0Addr,
microphoneAddr, loAddr, iMonAddr, vMonAddr, adcTempAddr };
}%

int chan;
int const firstchan = 0;
int const lastchan = 8;
int const maxRetries = 5;
int retryCounter;


int spiAddr;
assign spiAddr to "{PREFIX}U15_SPI_ADDR_W";
int spiData;
assign spiData to "{PREFIX}U15_SPI_DATA_W";
int spiStart;
assign spiStart to "{PREFIX}U15_SPI_START_W";

unsigned int spiReady;
assign spiReady to "{PREFIX}U15_SPI_READY_R";
monitor spiReady;
unsigned int getSpiReady;
assign getSpiReady to "{PREFIX}GET_U15_SPI_READY_R.PROC";

int spiRdbk;
assign spiRdbk to "{PREFIX}U15_SPI_RDBK_R";
int getSpiRdbk;
assign getSpiRdbk to "{PREFIX}GET_U15_SPI_RDBK_R.PROC";


/* voltage monitor signals for board health. */
/* for raw voltage, scale by 2.5/2^12 */
double amc_monitor_channels[9];
assign amc_monitor_channels[0] to "{PREFIX}ADC_SPARE_V";

/* 2.2V supply. Scale by additional x2 */
assign amc_monitor_channels[1] to "{PREFIX}V2P2V";

/* 3.7V supply. Scale by additional x2 */
assign amc_monitor_channels[2] to "{PREFIX}V3P7V";

/* 12V supply. Scale by additional /0.1776 */
assign amc_monitor_channels[3] to "{PREFIX}V12P0V";

/* not using the microphone */
assign amc_monitor_channels[4] to "{PREFIX}MICROPHONEV";

/* LO voltage monitor */
assign amc_monitor_channels[5] to "{PREFIX}LO_V";

/* board current monitor, in A (1ohm) */
assign amc_monitor_channels[6] to "{PREFIX}I_MON";

/* board voltge monitor. scale by additional x2 */
assign amc_monitor_channels[7] to "{PREFIX}V_MON";

/* board temperature monitor, not used */
assign amc_monitor_channels[8] to "{PREFIX}ADC_TEMP";

ss amc78xxmon
{
	state init
	{
		when()
		{
			printf("AMC7823 voltage monitor for {PREFIX} starting.\n");
		} state idle
	}

	state idle
	{
		/* Update ADC board voltages every 10 seconds */
		when(delay( 10 ))
		{
		} state poll
	}

	state poll
	{
		/* Read U15 SPI register address 0 through 8 */
		when(chan <= lastchan)
		{
			int rw=1;
			int pg=0;
			int eaddr=0;
			int addr=(rw<<15)+(pg<<12)+(chan<<6)+eaddr;

			spiAddr = addr;
			pvPut(spiAddr, SYNC);

			spiData = 1;
			pvPut(spiData, SYNC);

			spiStart = 0;
			pvPut(spiStart, SYNC);

			spiStart = 1;
			pvPut(spiStart, SYNC);

			spiStart = 0;
			pvPut(spiStart, SYNC);
		} state readOneV

		when(chan > lastchan)
		{
			chan = firstchan;
		} state idle
	}

	state readOneV
	{
		when(delay(1.61))
		{
			getSpiRdbk = 1;
			pvPut(getSpiRdbk, SYNC);
			retryCounter = 0;
		} state addrDecode
	}

	state addrDecode
	{
		option -e;    /* execute entry execution for self-state-transition */
		int chanRdbk;
		float val;

		/* Double check data is for the right address, then write to corresponding PV */
		entry
		{
			pvGet(spiRdbk);
			chanRdbk = spiRdbk >> 12;
		}

		when(chanRdbk == chan)
		{
			val=(spiRdbk&0xfff)*2.5/pow(2,12);
			/* map address to PV */
%{
			switch(seqg_var->seqg_vars_amc78xxmon.seqg_vars_addrDecode.chanRdbk)
			{
			case spareAddr:
}%				amc_monitor_channels[chan] =  val;%{
				break;
			case v2p2Addr:
}%				amc_monitor_channels[chan] =  2*val; %{
				break;
			case v3p7Addr:
}%				amc_monitor_channels[chan] =  2*val; %{
				break;
			case v12p0Addr:
}%				amc_monitor_channels[chan] =  val/0.1776; %{
				break;
			case microphoneAddr:
}%				amc_monitor_channels[chan] =  val; %{
				break;
			case loAddr:
}%				amc_monitor_channels[chan] =  val; %{
				break;
			case iMonAddr:
}%				amc_monitor_channels[chan] =  val; %{
				break;
			case vMonAddr:
}%				amc_monitor_channels[chan] =  2*val; %{
				break;
			case adcTempAddr:
}%				amc_monitor_channels[chan] =  val; %{
				break;
			default:
				/* insert error message here */
				break;
			};
}%
			pvPut(amc_monitor_channels[chan]);
			chan++;
		} state poll

		when(delay(0.1))
		{
			getSpiRdbk = 1;
			pvPut(getSpiRdbk, SYNC);
			retryCounter++;
		} state addrDecode

		when(retryCounter>maxRetries)
		{

		} state poll
	}
}
