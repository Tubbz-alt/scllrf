#ifndef SCLLRFINT_DRIVER_H
#define SCLLRFINT_DRIVER_H

/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : scllrfINTDriver.h
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Header defining register interface to scllrfINT, autogenerated from a python
 * dictionary.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/
#include "scllrfAsynPortDriver.h"

/* Registers */
// coupler 1 electron probe 1 current readback uA
static const char *R1Cplfep1IRString = "R1CPLFEP1I_R";
// coupler 1 electron probe 1 current limit high
static const char *R1Cplfep1IlhRString = "R1CPLFEP1ILH_R";
static const char *R1Cplfep1IlhWString = "R1CPLFEP1ILH_W";
// coupler 1 electron probe 1 current limit low
static const char *R1Cplfep1IllRString = "R1CPLFEP1ILL_R";
static const char *R1Cplfep1IllWString = "R1CPLFEP1ILL_W";
// Coupler 1 field emission detection window period in us
static const char *R1Cplfep1PerdRString = "R1CPLFEP1PERD_R";
static const char *R1Cplfep1PerdWString = "R1CPLFEP1PERD_W";
// coupler 1 electron probe 2 current readback uA
static const char *R1Cplfep2IRString = "R1CPLFEP2I_R";
// coupler 1 electron probe 2 current limit high
static const char *R1Cplfep2IlhRString = "R1CPLFEP2ILH_R";
static const char *R1Cplfep2IlhWString = "R1CPLFEP2ILH_W";
// coupler 1 electron probe 2 current limit low
static const char *R1Cplfep2IllRString = "R1CPLFEP2ILL_R";
static const char *R1Cplfep2IllWString = "R1CPLFEP2ILL_W";
// Coupler 2 field emission detection window period in us
static const char *R1Cplfep2PerdRString = "R1CPLFEP2PERD_R";
static const char *R1Cplfep2PerdWString = "R1CPLFEP2PERD_W";
// coupler 1 electron probe 3 current readback uA
static const char *R1Cplfep3IRString = "R1CPLFEP3I_R";
// coupler 1 electron probe 3 current limit high
static const char *R1Cplfep3IlhRString = "R1CPLFEP3ILH_R";
static const char *R1Cplfep3IlhWString = "R1CPLFEP3ILH_W";
// coupler 1 electron probe 3 current limit low
static const char *R1Cplfep3IllRString = "R1CPLFEP3ILL_R";
static const char *R1Cplfep3IllWString = "R1CPLFEP3ILL_W";
// Coupler 3 field emission detection window period in us
static const char *R1Cplfep3PerdRString = "R1CPLFEP3PERD_R";
static const char *R1Cplfep3PerdWString = "R1CPLFEP3PERD_W";
// cavity 1 coupler PT100 1 excitation current mA
static const char *R1Cpltmp1IRString = "R1CPLTMP1I_R";
static const char *R1Cpltmp1IWString = "R1CPLTMP1I_W";
// cavity 1 coupler PT100 1 voltage readback
static const char *R1Cpltmp1VRString = "R1CPLTMP1V_R";
// cavity 1 coupler PT100 1 voltage limit
static const char *R1Cpltmp1VlRString = "R1CPLTMP1VL_R";
static const char *R1Cpltmp1VlWString = "R1CPLTMP1VL_W";
// cavity 1 coupler PT100 2 excitation current mA
static const char *R1Cpltmp2IRString = "R1CPLTMP2I_R";
static const char *R1Cpltmp2IWString = "R1CPLTMP2I_W";
// cavity 1 coupler PT100 2 voltage readback
static const char *R1Cpltmp2VRString = "R1CPLTMP2V_R";
// cavity 1 coupler PT100 2 voltage limit
static const char *R1Cpltmp2VlRString = "R1CPLTMP2VL_R";
static const char *R1Cpltmp2VlWString = "R1CPLTMP2VL_W";
// cavity 1 arc detector limit volts
static const char *R1CwalRString = "R1CWAL_R";
static const char *R1CwalWString = "R1CWAL_W";
// cavity 1 arc detector period usec
static const char *R1CwapRString = "R1CWAP_R";
static const char *R1CwapWString = "R1CWAP_W";
// cavity 1 arc detector power supply set voltage
static const char *R1CwapsRString = "R1CWAPS_R";
static const char *R1CwapsWString = "R1CWAPS_W";
// cavity1 arc detector voltage readback
static const char *R1CwavRString = "R1CWAV_R";
// cavity 1 window limit volts
static const char *R1CwwlRString = "R1CWWL_R";
static const char *R1CwwlWString = "R1CWWL_W";
// cavity 1 window voltage readback
static const char *R1CwwtRString = "R1CWWT_R";
// cavity 1 stepper motor PT100 excitaion current mA
static const char *R1StmpiRString = "R1STMPI_R";
static const char *R1StmpiWString = "R1STMPI_W";
// cavity 1 stepper motor PT100 voltage readback
static const char *R1StmpvRString = "R1STMPV_R";
// cavity 1 stepper motor PT100 voltage limit
static const char *R1StmpvlRString = "R1STMPVL_R";
static const char *R1StmpvlWString = "R1STMPVL_W";
// coupler 2 electron probe 1 current readback uA
static const char *R2Cplfep1IRString = "R2CPLFEP1I_R";
// coupler 2 electron probe 1 current limit high
static const char *R2Cplfep1IlhRString = "R2CPLFEP1ILH_R";
static const char *R2Cplfep1IlhWString = "R2CPLFEP1ILH_W";
// coupler 2 electron probe 1 current limit low
static const char *R2Cplfep1IllRString = "R2CPLFEP1ILL_R";
static const char *R2Cplfep1IllWString = "R2CPLFEP1ILL_W";
// Coupler 4 field emission detection window period in us
static const char *R2Cplfep1PerdRString = "R2CPLFEP1PERD_R";
static const char *R2Cplfep1PerdWString = "R2CPLFEP1PERD_W";
// coupler 2 electron probe 2 current readback uA
static const char *R2Cplfep2IRString = "R2CPLFEP2I_R";
// coupler 2 electron probe 2 current limit high
static const char *R2Cplfep2IlhRString = "R2CPLFEP2ILH_R";
static const char *R2Cplfep2IlhWString = "R2CPLFEP2ILH_W";
// coupler 2 electron probe 2 current limit low
static const char *R2Cplfep2IllRString = "R2CPLFEP2ILL_R";
static const char *R2Cplfep2IllWString = "R2CPLFEP2ILL_W";
// Coupler 5 field emission detection window period in us
static const char *R2Cplfep2PerdRString = "R2CPLFEP2PERD_R";
static const char *R2Cplfep2PerdWString = "R2CPLFEP2PERD_W";
// coupler 2 electron probe 3 current readback uA
static const char *R2Cplfep3IRString = "R2CPLFEP3I_R";
// coupler 2 electron probe 3 current limit high
static const char *R2Cplfep3IlhRString = "R2CPLFEP3ILH_R";
static const char *R2Cplfep3IlhWString = "R2CPLFEP3ILH_W";
// coupler 2 electron probe 3 current limit low
static const char *R2Cplfep3IllRString = "R2CPLFEP3ILL_R";
static const char *R2Cplfep3IllWString = "R2CPLFEP3ILL_W";
// Coupler 6 field emission detection window period in us
static const char *R2Cplfep3PerdRString = "R2CPLFEP3PERD_R";
static const char *R2Cplfep3PerdWString = "R2CPLFEP3PERD_W";
// cavity 2 coupler PT100 1 excitation current mA
static const char *R2Cpltmp1IRString = "R2CPLTMP1I_R";
static const char *R2Cpltmp1IWString = "R2CPLTMP1I_W";
// cavity 2 coupler PT100 1 voltage readback
static const char *R2Cpltmp1VRString = "R2CPLTMP1V_R";
// cavity 2 coupler PT100 1 voltage limit
static const char *R2Cpltmp1VlRString = "R2CPLTMP1VL_R";
static const char *R2Cpltmp1VlWString = "R2CPLTMP1VL_W";
// cavity 2 coupler PT100 2 excitation current mA
static const char *R2Cpltmp2IRString = "R2CPLTMP2I_R";
static const char *R2Cpltmp2IWString = "R2CPLTMP2I_W";
// cavity 2 coupler PT100 2 voltage readback
static const char *R2Cpltmp2VRString = "R2CPLTMP2V_R";
// cavity 2 coupler PT100 2 voltage limit
static const char *R2Cpltmp2VlRString = "R2CPLTMP2VL_R";
static const char *R2Cpltmp2VlWString = "R2CPLTMP2VL_W";
// cavity 2 arc detector limit volts
static const char *R2CwalRString = "R2CWAL_R";
static const char *R2CwalWString = "R2CWAL_W";
// cavity 2 arc detector period usec
static const char *R2CwapRString = "R2CWAP_R";
static const char *R2CwapWString = "R2CWAP_W";
// cavity 2 arc detector power supply set voltage
static const char *R2CwapsRString = "R2CWAPS_R";
static const char *R2CwapsWString = "R2CWAPS_W";
// cavity2 arc detector voltage readback
static const char *R2CwavRString = "R2CWAV_R";
// cavity 2 window limit volts
static const char *R2CwwlRString = "R2CWWL_R";
static const char *R2CwwlWString = "R2CWWL_W";
// cavity 2 window voltage readback
static const char *R2CwwtRString = "R2CWWT_R";
// cavity 2 stepper motor PT100 excitaion current mA
static const char *R2StmpiRString = "R2STMPI_R";
static const char *R2StmpiWString = "R2STMPI_W";
// cavity 2 stepper motor PT100 voltage readback
static const char *R2StmpvRString = "R2STMPV_R";
// cavity 2 stepper motor PT100 voltage limit
static const char *R2StmpvlRString = "R2STMPVL_R";
static const char *R2StmpvlWString = "R2STMPVL_W";
// coupler 3 electron probe 1 current readback uA
static const char *R3Cplfep1IRString = "R3CPLFEP1I_R";
// coupler 3 electron probe 1 current limit high
static const char *R3Cplfep1IlhRString = "R3CPLFEP1ILH_R";
static const char *R3Cplfep1IlhWString = "R3CPLFEP1ILH_W";
// coupler 3 electron probe 1 current limit low
static const char *R3Cplfep1IllRString = "R3CPLFEP1ILL_R";
static const char *R3Cplfep1IllWString = "R3CPLFEP1ILL_W";
// Coupler 7 field emission detection window period in us
static const char *R3Cplfep1PerdRString = "R3CPLFEP1PERD_R";
static const char *R3Cplfep1PerdWString = "R3CPLFEP1PERD_W";
// coupler 3 electron probe 2 current readback uA
static const char *R3Cplfep2IRString = "R3CPLFEP2I_R";
// coupler 3 electron probe 2 current limit high
static const char *R3Cplfep2IlhRString = "R3CPLFEP2ILH_R";
static const char *R3Cplfep2IlhWString = "R3CPLFEP2ILH_W";
// coupler 3 electron probe 2 current limit low
static const char *R3Cplfep2IllRString = "R3CPLFEP2ILL_R";
static const char *R3Cplfep2IllWString = "R3CPLFEP2ILL_W";
// Coupler 8 field emission detection window period in us
static const char *R3Cplfep2PerdRString = "R3CPLFEP2PERD_R";
static const char *R3Cplfep2PerdWString = "R3CPLFEP2PERD_W";
// coupler 3 electron probe 3 current readback uA
static const char *R3Cplfep3IRString = "R3CPLFEP3I_R";
// coupler 3 electron probe 3 current limit high
static const char *R3Cplfep3IlhRString = "R3CPLFEP3ILH_R";
static const char *R3Cplfep3IlhWString = "R3CPLFEP3ILH_W";
// coupler 3 electron probe 3 current limit low
static const char *R3Cplfep3IllRString = "R3CPLFEP3ILL_R";
static const char *R3Cplfep3IllWString = "R3CPLFEP3ILL_W";
// Coupler 9 field emission detection window period in us
static const char *R3Cplfep3PerdRString = "R3CPLFEP3PERD_R";
static const char *R3Cplfep3PerdWString = "R3CPLFEP3PERD_W";
// cavity 3 coupler PT100 1 excitation current mA
static const char *R3Cpltmp1IRString = "R3CPLTMP1I_R";
static const char *R3Cpltmp1IWString = "R3CPLTMP1I_W";
// cavity 3 coupler PT100 1 voltage readback
static const char *R3Cpltmp1VRString = "R3CPLTMP1V_R";
// cavity 3 coupler PT100 1 voltage limit
static const char *R3Cpltmp1VlRString = "R3CPLTMP1VL_R";
static const char *R3Cpltmp1VlWString = "R3CPLTMP1VL_W";
// cavity 3 coupler PT100 2 excitation current mA
static const char *R3Cpltmp2IRString = "R3CPLTMP2I_R";
static const char *R3Cpltmp2IWString = "R3CPLTMP2I_W";
// cavity 3 coupler PT100 2 voltage readback
static const char *R3Cpltmp2VRString = "R3CPLTMP2V_R";
// cavity 3 coupler PT100 2 voltage limit
static const char *R3Cpltmp2VlRString = "R3CPLTMP2VL_R";
static const char *R3Cpltmp2VlWString = "R3CPLTMP2VL_W";
// cavity 3 arc detector limit volts
static const char *R3CwalRString = "R3CWAL_R";
static const char *R3CwalWString = "R3CWAL_W";
// cavity 3 arc detector period usec
static const char *R3CwapRString = "R3CWAP_R";
static const char *R3CwapWString = "R3CWAP_W";
// cavity 3 arc detector power supply set voltage
static const char *R3CwapsRString = "R3CWAPS_R";
static const char *R3CwapsWString = "R3CWAPS_W";
// cavity3 arc detector voltage readback
static const char *R3CwavRString = "R3CWAV_R";
// cavity 3 window limit volts
static const char *R3CwwlRString = "R3CWWL_R";
static const char *R3CwwlWString = "R3CWWL_W";
// cavity 3 window voltage readback
static const char *R3CwwtRString = "R3CWWT_R";
// cavity 3 stepper motor PT100 excitaion current mA
static const char *R3StmpiRString = "R3STMPI_R";
static const char *R3StmpiWString = "R3STMPI_W";
// cavity 3 stepper motor PT100 voltage readback
static const char *R3StmpvRString = "R3STMPV_R";
// cavity 3 stepper motor PT100 voltage limit
static const char *R3StmpvlRString = "R3STMPVL_R";
static const char *R3StmpvlWString = "R3STMPVL_W";
// coupler 4 electron probe 1 current readback uA
static const char *R4Cplfep1IRString = "R4CPLFEP1I_R";
// coupler 4 electron probe 1 current limit high
static const char *R4Cplfep1IlhRString = "R4CPLFEP1ILH_R";
static const char *R4Cplfep1IlhWString = "R4CPLFEP1ILH_W";
// coupler 4 electron probe 1 current limit low
static const char *R4Cplfep1IllRString = "R4CPLFEP1ILL_R";
static const char *R4Cplfep1IllWString = "R4CPLFEP1ILL_W";
// Coupler 10 field emission detection window period in us
static const char *R4Cplfep1PerdRString = "R4CPLFEP1PERD_R";
static const char *R4Cplfep1PerdWString = "R4CPLFEP1PERD_W";
// coupler 4 electron probe 2 current readback uA
static const char *R4Cplfep2IRString = "R4CPLFEP2I_R";
// coupler 4 electron probe 2 current limit high
static const char *R4Cplfep2IlhRString = "R4CPLFEP2ILH_R";
static const char *R4Cplfep2IlhWString = "R4CPLFEP2ILH_W";
// coupler 4 electron probe 2 current limit low
static const char *R4Cplfep2IllRString = "R4CPLFEP2ILL_R";
static const char *R4Cplfep2IllWString = "R4CPLFEP2ILL_W";
// Coupler 11 field emission detection window period in us
static const char *R4Cplfep2PerdRString = "R4CPLFEP2PERD_R";
static const char *R4Cplfep2PerdWString = "R4CPLFEP2PERD_W";
// coupler 4 electron probe 3 current readback uA
static const char *R4Cplfep3IRString = "R4CPLFEP3I_R";
// coupler 4 electron probe 3 current limit high
static const char *R4Cplfep3IlhRString = "R4CPLFEP3ILH_R";
static const char *R4Cplfep3IlhWString = "R4CPLFEP3ILH_W";
// coupler 4 electron probe 3 current limit low
static const char *R4Cplfep3IllRString = "R4CPLFEP3ILL_R";
static const char *R4Cplfep3IllWString = "R4CPLFEP3ILL_W";
// Coupler 12 field emission detection window period in us
static const char *R4Cplfep3PerdRString = "R4CPLFEP3PERD_R";
static const char *R4Cplfep3PerdWString = "R4CPLFEP3PERD_W";
// cavity 4 coupler PT100 1 excitation current mA
static const char *R4Cpltmp1IRString = "R4CPLTMP1I_R";
static const char *R4Cpltmp1IWString = "R4CPLTMP1I_W";
// cavity 4 coupler PT100 1 voltage readback
static const char *R4Cpltmp1VRString = "R4CPLTMP1V_R";
// cavity 4 coupler PT100 1 voltage limit
static const char *R4Cpltmp1VlRString = "R4CPLTMP1VL_R";
static const char *R4Cpltmp1VlWString = "R4CPLTMP1VL_W";
// cavity 4 coupler PT100 2 excitation current mA
static const char *R4Cpltmp2IRString = "R4CPLTMP2I_R";
static const char *R4Cpltmp2IWString = "R4CPLTMP2I_W";
// cavity 4 coupler PT100 2 voltage readback
static const char *R4Cpltmp2VRString = "R4CPLTMP2V_R";
// cavity 4 coupler PT100 2 voltage limit
static const char *R4Cpltmp2VlRString = "R4CPLTMP2VL_R";
static const char *R4Cpltmp2VlWString = "R4CPLTMP2VL_W";
// cavity 4 arc detector limit volts
static const char *R4CwalRString = "R4CWAL_R";
static const char *R4CwalWString = "R4CWAL_W";
// cavity 4 arc detector period usec
static const char *R4CwapRString = "R4CWAP_R";
static const char *R4CwapWString = "R4CWAP_W";
// cavity 4 arc detector power supply set voltage
static const char *R4CwapsRString = "R4CWAPS_R";
static const char *R4CwapsWString = "R4CWAPS_W";
// cavity4 arc detector voltage readback
static const char *R4CwavRString = "R4CWAV_R";
// cavity 4 window limit volts
static const char *R4CwwlRString = "R4CWWL_R";
static const char *R4CwwlWString = "R4CWWL_W";
// cavity 4 window voltage readback
static const char *R4CwwtRString = "R4CWWT_R";
// cavity 4 stepper motor PT100 excitaion current mA
static const char *R4StmpiRString = "R4STMPI_R";
static const char *R4StmpiWString = "R4STMPI_W";
// cavity 4 stepper motor PT100 voltage readback
static const char *R4StmpvRString = "R4STMPV_R";
// cavity 4 stepper motor PT100 voltage limit
static const char *R4StmpvlRString = "R4STMPVL_R";
static const char *R4StmpvlWString = "R4STMPVL_W";
// Spare 1 PT100 excitaion current mA
static const char *R5StmpiRString = "R5STMPI_R";
static const char *R5StmpiWString = "R5STMPI_W";
// spare 1 PT100 voltage readback
static const char *R5StmpvRString = "R5STMPV_R";
// Spare 2 PT100 excitaion current mA
static const char *R6StmpiRString = "R6STMPI_R";
static const char *R6StmpiWString = "R6STMPI_W";
// Spare 2 PT100 voltage readback
static const char *R6StmpvRString = "R6STMPV_R";
// Spare 3 PT100 excitaion current mA
static const char *R7StmpiRString = "R7STMPI_R";
static const char *R7StmpiWString = "R7STMPI_W";
// Spare 3 PT100 voltage readback
static const char *R7StmpvRString = "R7STMPV_R";
// Spare 4 PT100 excitaion current mA
static const char *R8StmpiRString = "R8STMPI_R";
static const char *R8StmpiWString = "R8STMPI_W";
// Spare 4 PT100 voltage readback
static const char *R8StmpvRString = "R8STMPV_R";
// arc detector led test fault status
static const char *RxatfltRString = "RXATFLT_R";
static const char *RxatfltWString = "RXATFLT_W";
// interlock enable latch and present from FCC
static const char *RxcienRString = "RXCIEN_R";
// interlock enable clear
static const char *RxciencRString = "RXCIENC_R";
static const char *RxciencWString = "RXCIENC_W";
// interlock enable latch and present from FCC mask
static const char *RxcienmRString = "RXCIENM_R";
static const char *RxcienmWString = "RXCIENM_W";
// coupler electro probe fault clear
static const char *RxcplfepfcRString = "RXCPLFEPFC_R";
static const char *RxcplfepfcWString = "RXCPLFEPFC_W";
// coupler electron probe limit latched status
static const char *RxcplfepfsRString = "RXCPLFEPFS_R";
// coupler electron probe limit status
static const char *RxcplfeplsRString = "RXCPLFEPLS_R";
// coupler electron probe limit mask
static const char *RxcplfepmRString = "RXCPLFEPM_R";
static const char *RxcplfepmWString = "RXCPLFEPM_W";
// coupler temperature limit fault clear
static const char *RxcpltmpfcRString = "RXCPLTMPFC_R";
static const char *RxcpltmpfcWString = "RXCPLTMPFC_W";
// coupler temperature limit status
static const char *RxcpltmplsRString = "RXCPLTMPLS_R";
// coupler temperature limit mask status
static const char *RxcpltmpmRString = "RXCPLTMPM_R";
static const char *RxcpltmpmWString = "RXCPLTMPM_W";
// vacuum fault status
static const char *RxcvfRString = "RXCVF_R";
// vacuum fault clear
static const char *RxcvfcRString = "RXCVFC_R";
static const char *RxcvfcWString = "RXCVFC_W";
// vacuum fault mask
static const char *RxcvfmRString = "RXCVFM_R";
static const char *RxcvfmWString = "RXCVFM_W";
// arc faults latched and instantaneous
static const char *RxcwadRString = "RXCWAD_R";
// arc fault clear
static const char *RxcwafcRString = "RXCWAFC_R";
static const char *RxcwafcWString = "RXCWAFC_W";
// arc fault mask
static const char *RxcwamRString = "RXCWAM_R";
static const char *RxcwamWString = "RXCWAM_W";
// arc detector led test
static const char *RxcwatRString = "RXCWAT_R";
static const char *RxcwatWString = "RXCWAT_W";
// window faults latched and instantaneous
static const char *RxcwwdRString = "RXCWWD_R";
// window fault clear
static const char *RxcwwfcRString = "RXCWWFC_R";
static const char *RxcwwfcWString = "RXCWWFC_W";
// window fault mask
static const char *RxcwwmRString = "RXCWWM_R";
static const char *RxcwwmWString = "RXCWWM_W";
// window ir sensor test
static const char *RxcwwtsRString = "RXCWWTS_R";
static const char *RxcwwtsWString = "RXCWWTS_W";
// FSD to field control latch and present
static const char *RxffsdRString = "RXFFSD_R";
// FSD to field control clear
static const char *RxffsdcRString = "RXFFSDC_R";
static const char *RxffsdcWString = "RXFFSDC_W";
// FSD to field control latch and present mask
static const char *RxffsdmRString = "RXFFSDM_R";
static const char *RxffsdmWString = "RXFFSDM_W";
// miscellaneous control bits
static const char *RxictlRString = "RXICTL_R";
static const char *RxictlWString = "RXICTL_W";
// miscellaneous status bits
static const char *RxistatRString = "RXISTAT_R";
// firmware version
static const char *RxiverRString = "RXIVER_R";
// stepper motor temperature limit fault clear
static const char *RxstmpfcRString = "RXSTMPFC_R";
static const char *RxstmpfcWString = "RXSTMPFC_W";
// stepper motor temperature limit status
static const char *RxstmplsRString = "RXSTMPLS_R";
// stepper motor temperature limit mask
static const char *RxstmpmRString = "RXSTMPM_R";
static const char *RxstmpmWString = "RXSTMPM_W";

const unsigned int scllrfINTPolledRegCount = 147;



 /* This class implements the AxiVersion driver. */
class scllrfINTDriver : public scllrfAsynPortDriver {
public:
//    scllrfINTDriver(const char *drvPortName, const char *netPortName);
    scllrfINTDriver(const char *drvPortName, const char *netPortName, int maxAddr, int paramTableAdds);
    virtual ~scllrfINTDriver();



protected:
    virtual asynStatus functionToRegister(const int function, FpgaReg *pToFpga); /**< Translate asyn function number/reason to a register address */
	virtual asynStatus processRegReadback(const FpgaReg *pFromFpga,
			bool &waveIsReady); // parse register data, write to PVs
	virtual asynStatus processRegWriteResponse(const FpgaReg *pFromFpga);



/* Registers */
    int p_R1Cplfep1IR;
    #define FIRST_SCLLRFINT_PARAM p_R1Cplfep1IR
    int p_R1Cplfep1IlhR;
    int p_R1Cplfep1IlhW;
    int p_R1Cplfep1IllR;
    int p_R1Cplfep1IllW;
    int p_R1Cplfep1PerdR;
    int p_R1Cplfep1PerdW;
    int p_R1Cplfep2IR;
    int p_R1Cplfep2IlhR;
    int p_R1Cplfep2IlhW;
    int p_R1Cplfep2IllR;
    int p_R1Cplfep2IllW;
    int p_R1Cplfep2PerdR;
    int p_R1Cplfep2PerdW;
    int p_R1Cplfep3IR;
    int p_R1Cplfep3IlhR;
    int p_R1Cplfep3IlhW;
    int p_R1Cplfep3IllR;
    int p_R1Cplfep3IllW;
    int p_R1Cplfep3PerdR;
    int p_R1Cplfep3PerdW;
    int p_R1Cpltmp1IR;
    int p_R1Cpltmp1IW;
    int p_R1Cpltmp1VR;
    int p_R1Cpltmp1VlR;
    int p_R1Cpltmp1VlW;
    int p_R1Cpltmp2IR;
    int p_R1Cpltmp2IW;
    int p_R1Cpltmp2VR;
    int p_R1Cpltmp2VlR;
    int p_R1Cpltmp2VlW;
    int p_R1CwalR;
    int p_R1CwalW;
    int p_R1CwapR;
    int p_R1CwapW;
    int p_R1CwapsR;
    int p_R1CwapsW;
    int p_R1CwavR;
    int p_R1CwwlR;
    int p_R1CwwlW;
    int p_R1CwwtR;
    int p_R1StmpiR;
    int p_R1StmpiW;
    int p_R1StmpvR;
    int p_R1StmpvlR;
    int p_R1StmpvlW;
    int p_R2Cplfep1IR;
    int p_R2Cplfep1IlhR;
    int p_R2Cplfep1IlhW;
    int p_R2Cplfep1IllR;
    int p_R2Cplfep1IllW;
    int p_R2Cplfep1PerdR;
    int p_R2Cplfep1PerdW;
    int p_R2Cplfep2IR;
    int p_R2Cplfep2IlhR;
    int p_R2Cplfep2IlhW;
    int p_R2Cplfep2IllR;
    int p_R2Cplfep2IllW;
    int p_R2Cplfep2PerdR;
    int p_R2Cplfep2PerdW;
    int p_R2Cplfep3IR;
    int p_R2Cplfep3IlhR;
    int p_R2Cplfep3IlhW;
    int p_R2Cplfep3IllR;
    int p_R2Cplfep3IllW;
    int p_R2Cplfep3PerdR;
    int p_R2Cplfep3PerdW;
    int p_R2Cpltmp1IR;
    int p_R2Cpltmp1IW;
    int p_R2Cpltmp1VR;
    int p_R2Cpltmp1VlR;
    int p_R2Cpltmp1VlW;
    int p_R2Cpltmp2IR;
    int p_R2Cpltmp2IW;
    int p_R2Cpltmp2VR;
    int p_R2Cpltmp2VlR;
    int p_R2Cpltmp2VlW;
    int p_R2CwalR;
    int p_R2CwalW;
    int p_R2CwapR;
    int p_R2CwapW;
    int p_R2CwapsR;
    int p_R2CwapsW;
    int p_R2CwavR;
    int p_R2CwwlR;
    int p_R2CwwlW;
    int p_R2CwwtR;
    int p_R2StmpiR;
    int p_R2StmpiW;
    int p_R2StmpvR;
    int p_R2StmpvlR;
    int p_R2StmpvlW;
    int p_R3Cplfep1IR;
    int p_R3Cplfep1IlhR;
    int p_R3Cplfep1IlhW;
    int p_R3Cplfep1IllR;
    int p_R3Cplfep1IllW;
    int p_R3Cplfep1PerdR;
    int p_R3Cplfep1PerdW;
    int p_R3Cplfep2IR;
    int p_R3Cplfep2IlhR;
    int p_R3Cplfep2IlhW;
    int p_R3Cplfep2IllR;
    int p_R3Cplfep2IllW;
    int p_R3Cplfep2PerdR;
    int p_R3Cplfep2PerdW;
    int p_R3Cplfep3IR;
    int p_R3Cplfep3IlhR;
    int p_R3Cplfep3IlhW;
    int p_R3Cplfep3IllR;
    int p_R3Cplfep3IllW;
    int p_R3Cplfep3PerdR;
    int p_R3Cplfep3PerdW;
    int p_R3Cpltmp1IR;
    int p_R3Cpltmp1IW;
    int p_R3Cpltmp1VR;
    int p_R3Cpltmp1VlR;
    int p_R3Cpltmp1VlW;
    int p_R3Cpltmp2IR;
    int p_R3Cpltmp2IW;
    int p_R3Cpltmp2VR;
    int p_R3Cpltmp2VlR;
    int p_R3Cpltmp2VlW;
    int p_R3CwalR;
    int p_R3CwalW;
    int p_R3CwapR;
    int p_R3CwapW;
    int p_R3CwapsR;
    int p_R3CwapsW;
    int p_R3CwavR;
    int p_R3CwwlR;
    int p_R3CwwlW;
    int p_R3CwwtR;
    int p_R3StmpiR;
    int p_R3StmpiW;
    int p_R3StmpvR;
    int p_R3StmpvlR;
    int p_R3StmpvlW;
    int p_R4Cplfep1IR;
    int p_R4Cplfep1IlhR;
    int p_R4Cplfep1IlhW;
    int p_R4Cplfep1IllR;
    int p_R4Cplfep1IllW;
    int p_R4Cplfep1PerdR;
    int p_R4Cplfep1PerdW;
    int p_R4Cplfep2IR;
    int p_R4Cplfep2IlhR;
    int p_R4Cplfep2IlhW;
    int p_R4Cplfep2IllR;
    int p_R4Cplfep2IllW;
    int p_R4Cplfep2PerdR;
    int p_R4Cplfep2PerdW;
    int p_R4Cplfep3IR;
    int p_R4Cplfep3IlhR;
    int p_R4Cplfep3IlhW;
    int p_R4Cplfep3IllR;
    int p_R4Cplfep3IllW;
    int p_R4Cplfep3PerdR;
    int p_R4Cplfep3PerdW;
    int p_R4Cpltmp1IR;
    int p_R4Cpltmp1IW;
    int p_R4Cpltmp1VR;
    int p_R4Cpltmp1VlR;
    int p_R4Cpltmp1VlW;
    int p_R4Cpltmp2IR;
    int p_R4Cpltmp2IW;
    int p_R4Cpltmp2VR;
    int p_R4Cpltmp2VlR;
    int p_R4Cpltmp2VlW;
    int p_R4CwalR;
    int p_R4CwalW;
    int p_R4CwapR;
    int p_R4CwapW;
    int p_R4CwapsR;
    int p_R4CwapsW;
    int p_R4CwavR;
    int p_R4CwwlR;
    int p_R4CwwlW;
    int p_R4CwwtR;
    int p_R4StmpiR;
    int p_R4StmpiW;
    int p_R4StmpvR;
    int p_R4StmpvlR;
    int p_R4StmpvlW;
    int p_R5StmpiR;
    int p_R5StmpiW;
    int p_R5StmpvR;
    int p_R6StmpiR;
    int p_R6StmpiW;
    int p_R6StmpvR;
    int p_R7StmpiR;
    int p_R7StmpiW;
    int p_R7StmpvR;
    int p_R8StmpiR;
    int p_R8StmpiW;
    int p_R8StmpvR;
    int p_RxatfltR;
    int p_RxatfltW;
    int p_RxcienR;
    int p_RxciencR;
    int p_RxciencW;
    int p_RxcienmR;
    int p_RxcienmW;
    int p_RxcplfepfcR;
    int p_RxcplfepfcW;
    int p_RxcplfepfsR;
    int p_RxcplfeplsR;
    int p_RxcplfepmR;
    int p_RxcplfepmW;
    int p_RxcpltmpfcR;
    int p_RxcpltmpfcW;
    int p_RxcpltmplsR;
    int p_RxcpltmpmR;
    int p_RxcpltmpmW;
    int p_RxcvfR;
    int p_RxcvfcR;
    int p_RxcvfcW;
    int p_RxcvfmR;
    int p_RxcvfmW;
    int p_RxcwadR;
    int p_RxcwafcR;
    int p_RxcwafcW;
    int p_RxcwamR;
    int p_RxcwamW;
    int p_RxcwatR;
    int p_RxcwatW;
    int p_RxcwwdR;
    int p_RxcwwfcR;
    int p_RxcwwfcW;
    int p_RxcwwmR;
    int p_RxcwwmW;
    int p_RxcwwtsR;
    int p_RxcwwtsW;
    int p_RxffsdR;
    int p_RxffsdcR;
    int p_RxffsdcW;
    int p_RxffsdmR;
    int p_RxffsdmW;
    int p_RxictlR;
    int p_RxictlW;
    int p_RxistatR;
    int p_RxiverR;
    int p_RxstmpfcR;
    int p_RxstmpfcW;
    int p_RxstmplsR;
    int p_RxstmpmR;
    int p_RxstmpmW;
    #define LAST_SCLLRFINT_PARAM p_RxstmpmW

#define NUM_SCLLRFINT_PARAMS (&LAST_SCLLRFINT_PARAM - &FIRST_SCLLRFINT_PARAM + NUM_SCLLRF_PARAMS + 1)


    // mapping of register names to addresses
    enum ReadRegAddrs
    {
    	R1CwavRAdr = 0x00000000,
    	R2CwavRAdr = 0x00000001,
    	R3CwavRAdr = 0x00000002,
    	R4CwavRAdr = 0x00000003,
    	R1CwapsRAdr = 0x00000004,
    	R2CwapsRAdr = 0x00000005,
    	R3CwapsRAdr = 0x00000006,
    	R4CwapsRAdr = 0x00000007,
    	R1CwalRAdr = 0x00000008,
    	R2CwalRAdr = 0x00000009,
    	R3CwalRAdr = 0x0000000A,
    	R4CwalRAdr = 0x0000000B,
    	R1CwapRAdr = 0x0000000C,
    	R2CwapRAdr = 0x0000000D,
    	R3CwapRAdr = 0x0000000E,
    	R4CwapRAdr = 0x0000000F,
    	RxcwadRAdr = 0x00000010,
    	RxcwamRAdr = 0x00000011,
    	RxcwatRAdr = 0x00000012,
    	RxatfltRAdr = 0x00000013,
    	RxcwafcRAdr = 0x00000014,
    	R1CwwtRAdr = 0x00000015,
    	R2CwwtRAdr = 0x00000016,
    	R3CwwtRAdr = 0x00000017,
    	R4CwwtRAdr = 0x00000018,
    	R1CwwlRAdr = 0x00000019,
    	R2CwwlRAdr = 0x0000001A,
    	R3CwwlRAdr = 0x0000001B,
    	R4CwwlRAdr = 0x0000001C,
    	RxcwwdRAdr = 0x0000001D,
    	RxcwwtsRAdr = 0x0000001E,
    	RxcwwmRAdr = 0x0000001F,
    	RxcwwfcRAdr = 0x00000020,
    	R1StmpiRAdr = 0x00000021,
    	R2StmpiRAdr = 0x00000022,
    	R3StmpiRAdr = 0x00000023,
    	R4StmpiRAdr = 0x00000024,
    	R1StmpvRAdr = 0x00000025,
    	R2StmpvRAdr = 0x00000026,
    	R3StmpvRAdr = 0x00000027,
    	R4StmpvRAdr = 0x00000028,
    	R1StmpvlRAdr = 0x00000029,
    	R2StmpvlRAdr = 0x0000002A,
    	R3StmpvlRAdr = 0x0000002B,
    	R4StmpvlRAdr = 0x0000002C,
    	RxstmplsRAdr = 0x0000002D,
    	RxstmpmRAdr = 0x0000002E,
    	RxstmpfcRAdr = 0x0000002F,
    	R1Cpltmp1IRAdr = 0x00000030,
    	R1Cpltmp2IRAdr = 0x00000031,
    	R2Cpltmp1IRAdr = 0x00000032,
    	R2Cpltmp2IRAdr = 0x00000033,
    	R3Cpltmp1IRAdr = 0x00000034,
    	R3Cpltmp2IRAdr = 0x00000035,
    	R4Cpltmp1IRAdr = 0x00000036,
    	R4Cpltmp2IRAdr = 0x00000037,
    	R1Cpltmp1VRAdr = 0x00000038,
    	R1Cpltmp2VRAdr = 0x00000039,
    	R2Cpltmp1VRAdr = 0x0000003A,
    	R2Cpltmp2VRAdr = 0x0000003B,
    	R3Cpltmp1VRAdr = 0x0000003C,
    	R3Cpltmp2VRAdr = 0x0000003D,
    	R4Cpltmp1VRAdr = 0x0000003E,
    	R4Cpltmp2VRAdr = 0x0000003F,
    	R1Cpltmp1VlRAdr = 0x00000040,
    	R1Cpltmp2VlRAdr = 0x00000041,
    	R2Cpltmp1VlRAdr = 0x00000042,
    	R2Cpltmp2VlRAdr = 0x00000043,
    	R3Cpltmp1VlRAdr = 0x00000044,
    	R3Cpltmp2VlRAdr = 0x00000045,
    	R4Cpltmp1VlRAdr = 0x00000046,
    	R4Cpltmp2VlRAdr = 0x00000047,
    	RxcpltmplsRAdr = 0x00000048,
    	RxcpltmpmRAdr = 0x00000049,
    	RxcpltmpfcRAdr = 0x0000004A,
    	R1Cplfep1IRAdr = 0x0000004B,
    	R1Cplfep2IRAdr = 0x0000004C,
    	R1Cplfep3IRAdr = 0x0000004D,
    	R2Cplfep1IRAdr = 0x0000004E,
    	R2Cplfep2IRAdr = 0x0000004F,
    	R2Cplfep3IRAdr = 0x00000050,
    	R3Cplfep1IRAdr = 0x00000051,
    	R3Cplfep2IRAdr = 0x00000052,
    	R3Cplfep3IRAdr = 0x00000053,
    	R4Cplfep1IRAdr = 0x00000054,
    	R4Cplfep2IRAdr = 0x00000055,
    	R4Cplfep3IRAdr = 0x00000056,
    	R1Cplfep1IlhRAdr = 0x00000057,
    	R1Cplfep2IlhRAdr = 0x00000058,
    	R1Cplfep3IlhRAdr = 0x00000059,
    	R2Cplfep1IlhRAdr = 0x0000005A,
    	R2Cplfep2IlhRAdr = 0x0000005B,
    	R2Cplfep3IlhRAdr = 0x0000005C,
    	R3Cplfep1IlhRAdr = 0x0000005D,
    	R3Cplfep2IlhRAdr = 0x0000005E,
    	R3Cplfep3IlhRAdr = 0x0000005F,
    	R4Cplfep1IlhRAdr = 0x00000060,
    	R4Cplfep2IlhRAdr = 0x00000061,
    	R4Cplfep3IlhRAdr = 0x00000062,
    	R1Cplfep1IllRAdr = 0x00000063,
    	R1Cplfep2IllRAdr = 0x00000064,
    	R1Cplfep3IllRAdr = 0x00000065,
    	R2Cplfep1IllRAdr = 0x00000066,
    	R2Cplfep2IllRAdr = 0x00000067,
    	R2Cplfep3IllRAdr = 0x00000068,
    	R3Cplfep1IllRAdr = 0x00000069,
    	R3Cplfep2IllRAdr = 0x0000006A,
    	R3Cplfep3IllRAdr = 0x0000006B,
    	R4Cplfep1IllRAdr = 0x0000006C,
    	R4Cplfep2IllRAdr = 0x0000006D,
    	R4Cplfep3IllRAdr = 0x0000006E,
    	RxcplfepmRAdr = 0x0000006F,
    	RxcplfeplsRAdr = 0x00000070,
    	RxcplfepfsRAdr = 0x00000071,
    	RxcplfepfcRAdr = 0x00000072,
    	RxcvfRAdr = 0x00000073,
    	RxcvfmRAdr = 0x00000074,
    	RxcvfcRAdr = 0x00000075,
    	RxcienRAdr = 0x00000076,
    	RxcienmRAdr = 0x00000077,
    	RxciencRAdr = 0x00000078,
    	RxffsdRAdr = 0x00000079,
    	RxffsdmRAdr = 0x0000007A,
    	RxffsdcRAdr = 0x0000007B,
    	RxistatRAdr = 0x0000007C,
    	RxictlRAdr = 0x0000007D,
    	RxiverRAdr = 0x0000007E,
    	R1Cplfep1PerdRAdr = 0x0000007F,
    	R1Cplfep2PerdRAdr = 0x00000080,
    	R1Cplfep3PerdRAdr = 0x00000081,
    	R2Cplfep1PerdRAdr = 0x00000082,
    	R2Cplfep2PerdRAdr = 0x00000083,
    	R2Cplfep3PerdRAdr = 0x00000084,
    	R3Cplfep1PerdRAdr = 0x00000085,
    	R3Cplfep2PerdRAdr = 0x00000086,
    	R3Cplfep3PerdRAdr = 0x00000087,
    	R4Cplfep1PerdRAdr = 0x00000088,
    	R4Cplfep2PerdRAdr = 0x00000089,
    	R4Cplfep3PerdRAdr = 0x0000008A,
    	R5StmpiRAdr = 0x0000008B,
    	R6StmpiRAdr = 0x0000008C,
    	R7StmpiRAdr = 0x0000008D,
    	R8StmpiRAdr = 0x0000008E,
    	R5StmpvRAdr = 0x0000008F,
    	R6StmpvRAdr = 0x00000090,
    	R7StmpvRAdr = 0x00000091,
    	R8StmpvRAdr = 0x00000092,
    };

    // mapping of register names to addresses
    enum RegWriteAddrs
    {
    	R1CwapsWAdr = 0x00000004,
    	R2CwapsWAdr = 0x00000005,
    	R3CwapsWAdr = 0x00000006,
    	R4CwapsWAdr = 0x00000007,
    	R1CwalWAdr = 0x00000008,
    	R2CwalWAdr = 0x00000009,
    	R3CwalWAdr = 0x0000000A,
    	R4CwalWAdr = 0x0000000B,
    	R1CwapWAdr = 0x0000000C,
    	R2CwapWAdr = 0x0000000D,
    	R3CwapWAdr = 0x0000000E,
    	R4CwapWAdr = 0x0000000F,
    	RxcwamWAdr = 0x00000011,
    	RxcwatWAdr = 0x00000012,
    	RxatfltWAdr = 0x00000013,
    	RxcwafcWAdr = 0x00000014,
    	R1CwwlWAdr = 0x00000019,
    	R2CwwlWAdr = 0x0000001A,
    	R3CwwlWAdr = 0x0000001B,
    	R4CwwlWAdr = 0x0000001C,
    	RxcwwtsWAdr = 0x0000001E,
    	RxcwwmWAdr = 0x0000001F,
    	RxcwwfcWAdr = 0x00000020,
    	R1StmpiWAdr = 0x00000021,
    	R2StmpiWAdr = 0x00000022,
    	R3StmpiWAdr = 0x00000023,
    	R4StmpiWAdr = 0x00000024,
    	R1StmpvlWAdr = 0x00000029,
    	R2StmpvlWAdr = 0x0000002A,
    	R3StmpvlWAdr = 0x0000002B,
    	R4StmpvlWAdr = 0x0000002C,
    	RxstmpmWAdr = 0x0000002E,
    	RxstmpfcWAdr = 0x0000002F,
    	R1Cpltmp1IWAdr = 0x00000030,
    	R1Cpltmp2IWAdr = 0x00000031,
    	R2Cpltmp1IWAdr = 0x00000032,
    	R2Cpltmp2IWAdr = 0x00000033,
    	R3Cpltmp1IWAdr = 0x00000034,
    	R3Cpltmp2IWAdr = 0x00000035,
    	R4Cpltmp1IWAdr = 0x00000036,
    	R4Cpltmp2IWAdr = 0x00000037,
    	R1Cpltmp1VlWAdr = 0x00000040,
    	R1Cpltmp2VlWAdr = 0x00000041,
    	R2Cpltmp1VlWAdr = 0x00000042,
    	R2Cpltmp2VlWAdr = 0x00000043,
    	R3Cpltmp1VlWAdr = 0x00000044,
    	R3Cpltmp2VlWAdr = 0x00000045,
    	R4Cpltmp1VlWAdr = 0x00000046,
    	R4Cpltmp2VlWAdr = 0x00000047,
    	RxcpltmpmWAdr = 0x00000049,
    	RxcpltmpfcWAdr = 0x0000004A,
    	R1Cplfep1IlhWAdr = 0x00000057,
    	R1Cplfep2IlhWAdr = 0x00000058,
    	R1Cplfep3IlhWAdr = 0x00000059,
    	R2Cplfep1IlhWAdr = 0x0000005A,
    	R2Cplfep2IlhWAdr = 0x0000005B,
    	R2Cplfep3IlhWAdr = 0x0000005C,
    	R3Cplfep1IlhWAdr = 0x0000005D,
    	R3Cplfep2IlhWAdr = 0x0000005E,
    	R3Cplfep3IlhWAdr = 0x0000005F,
    	R4Cplfep1IlhWAdr = 0x00000060,
    	R4Cplfep2IlhWAdr = 0x00000061,
    	R4Cplfep3IlhWAdr = 0x00000062,
    	R1Cplfep1IllWAdr = 0x00000063,
    	R1Cplfep2IllWAdr = 0x00000064,
    	R1Cplfep3IllWAdr = 0x00000065,
    	R2Cplfep1IllWAdr = 0x00000066,
    	R2Cplfep2IllWAdr = 0x00000067,
    	R2Cplfep3IllWAdr = 0x00000068,
    	R3Cplfep1IllWAdr = 0x00000069,
    	R3Cplfep2IllWAdr = 0x0000006A,
    	R3Cplfep3IllWAdr = 0x0000006B,
    	R4Cplfep1IllWAdr = 0x0000006C,
    	R4Cplfep2IllWAdr = 0x0000006D,
    	R4Cplfep3IllWAdr = 0x0000006E,
    	RxcplfepmWAdr = 0x0000006F,
    	RxcplfepfcWAdr = 0x00000072,
    	RxcvfmWAdr = 0x00000074,
    	RxcvfcWAdr = 0x00000075,
    	RxcienmWAdr = 0x00000077,
    	RxciencWAdr = 0x00000078,
    	RxffsdmWAdr = 0x0000007A,
    	RxffsdcWAdr = 0x0000007B,
    	RxictlWAdr = 0x0000007D,
    	R1Cplfep1PerdWAdr = 0x0000007F,
    	R1Cplfep2PerdWAdr = 0x00000080,
    	R1Cplfep3PerdWAdr = 0x00000081,
    	R2Cplfep1PerdWAdr = 0x00000082,
    	R2Cplfep2PerdWAdr = 0x00000083,
    	R2Cplfep3PerdWAdr = 0x00000084,
    	R3Cplfep1PerdWAdr = 0x00000085,
    	R3Cplfep2PerdWAdr = 0x00000086,
    	R3Cplfep3PerdWAdr = 0x00000087,
    	R4Cplfep1PerdWAdr = 0x00000088,
    	R4Cplfep2PerdWAdr = 0x00000089,
    	R4Cplfep3PerdWAdr = 0x0000008A,
    	R5StmpiWAdr = 0x0000008B,
    	R6StmpiWAdr = 0x0000008C,
    	R7StmpiWAdr = 0x0000008D,
    	R8StmpiWAdr = 0x0000008E,
    };

    // masks applied to returned register data
    enum RegMasks
    {
    	R1CwavMask =  0xFFFFFFFF, // bit fields
    	R2CwavMask =  0xFFFFFFFF, // bit fields
    	R3CwavMask =  0xFFFFFFFF, // bit fields
    	R4CwavMask =  0xFFFFFFFF, // bit fields
    	R1CwapsMask =  0xFFFFFFFF, // bit fields
    	R2CwapsMask =  0xFFFFFFFF, // bit fields
    	R3CwapsMask =  0xFFFFFFFF, // bit fields
    	R4CwapsMask =  0xFFFFFFFF, // bit fields
    	R1CwalMask =  0xFFFFFFFF, // bit fields
    	R2CwalMask =  0xFFFFFFFF, // bit fields
    	R3CwalMask =  0xFFFFFFFF, // bit fields
    	R4CwalMask =  0xFFFFFFFF, // bit fields
    	R1CwapMask =  0xFFFFFFFF, // bit fields
    	R2CwapMask =  0xFFFFFFFF, // bit fields
    	R3CwapMask =  0xFFFFFFFF, // bit fields
    	R4CwapMask =  0xFFFFFFFF, // bit fields
    	RxcwadMask =  0xFFFFFFFF, // bit fields
    	RxcwamMask =  0xFFFFFFFF, // bit fields
    	RxcwatMask =  0xFFFFFFFF, // bit fields
    	RxatfltMask =  0xFFFFFFFF, // bit fields
    	RxcwafcMask =  0xFFFFFFFF, // bit fields
    	R1CwwtMask =  0xFFFFFFFF, // bit fields
    	R2CwwtMask =  0xFFFFFFFF, // bit fields
    	R3CwwtMask =  0xFFFFFFFF, // bit fields
    	R4CwwtMask =  0xFFFFFFFF, // bit fields
    	R1CwwlMask =  0xFFFFFFFF, // bit fields
    	R2CwwlMask =  0xFFFFFFFF, // bit fields
    	R3CwwlMask =  0xFFFFFFFF, // bit fields
    	R4CwwlMask =  0xFFFFFFFF, // bit fields
    	RxcwwdMask =  0xFFFFFFFF, // bit fields
    	RxcwwtsMask =  0xFFFFFFFF, // bit fields
    	RxcwwmMask =  0xFFFFFFFF, // bit fields
    	RxcwwfcMask =  0xFFFFFFFF, // bit fields
    	R1StmpiMask =  0xFFFFFFFF, // bit fields
    	R2StmpiMask =  0xFFFFFFFF, // bit fields
    	R3StmpiMask =  0xFFFFFFFF, // bit fields
    	R4StmpiMask =  0xFFFFFFFF, // bit fields
    	R1StmpvMask =  0xFFFFFFFF, // bit fields
    	R2StmpvMask =  0xFFFFFFFF, // bit fields
    	R3StmpvMask =  0xFFFFFFFF, // bit fields
    	R4StmpvMask =  0xFFFFFFFF, // bit fields
    	R1StmpvlMask =  0xFFFFFFFF, // bit fields
    	R2StmpvlMask =  0xFFFFFFFF, // bit fields
    	R3StmpvlMask =  0xFFFFFFFF, // bit fields
    	R4StmpvlMask =  0xFFFFFFFF, // bit fields
    	RxstmplsMask =  0xFFFFFFFF, // bit fields
    	RxstmpmMask =  0xFFFFFFFF, // bit fields
    	RxstmpfcMask =  0xFFFFFFFF, // bit fields
    	R1Cpltmp1IMask =  0xFFFFFFFF, // bit fields
    	R1Cpltmp2IMask =  0xFFFFFFFF, // bit fields
    	R2Cpltmp1IMask =  0xFFFFFFFF, // bit fields
    	R2Cpltmp2IMask =  0xFFFFFFFF, // bit fields
    	R3Cpltmp1IMask =  0xFFFFFFFF, // bit fields
    	R3Cpltmp2IMask =  0xFFFFFFFF, // bit fields
    	R4Cpltmp1IMask =  0xFFFFFFFF, // bit fields
    	R4Cpltmp2IMask =  0xFFFFFFFF, // bit fields
    	R1Cpltmp1VMask =  0xFFFFFFFF, // bit fields
    	R1Cpltmp2VMask =  0xFFFFFFFF, // bit fields
    	R2Cpltmp1VMask =  0xFFFFFFFF, // bit fields
    	R2Cpltmp2VMask =  0xFFFFFFFF, // bit fields
    	R3Cpltmp1VMask =  0xFFFFFFFF, // bit fields
    	R3Cpltmp2VMask =  0xFFFFFFFF, // bit fields
    	R4Cpltmp1VMask =  0xFFFFFFFF, // bit fields
    	R4Cpltmp2VMask =  0xFFFFFFFF, // bit fields
    	R1Cpltmp1VlMask =  0xFFFFFFFF, // bit fields
    	R1Cpltmp2VlMask =  0xFFFFFFFF, // bit fields
    	R2Cpltmp1VlMask =  0xFFFFFFFF, // bit fields
    	R2Cpltmp2VlMask =  0xFFFFFFFF, // bit fields
    	R3Cpltmp1VlMask =  0xFFFFFFFF, // bit fields
    	R3Cpltmp2VlMask =  0xFFFFFFFF, // bit fields
    	R4Cpltmp1VlMask =  0xFFFFFFFF, // bit fields
    	R4Cpltmp2VlMask =  0xFFFFFFFF, // bit fields
    	RxcpltmplsMask =  0xFFFFFFFF, // bit fields
    	RxcpltmpmMask =  0xFFFFFFFF, // bit fields
    	RxcpltmpfcMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep1IMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep2IMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep3IMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep1IMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep2IMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep3IMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep1IMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep2IMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep3IMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep1IMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep2IMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep3IMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep1IlhMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep2IlhMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep3IlhMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep1IlhMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep2IlhMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep3IlhMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep1IlhMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep2IlhMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep3IlhMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep1IlhMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep2IlhMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep3IlhMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep1IllMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep2IllMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep3IllMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep1IllMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep2IllMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep3IllMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep1IllMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep2IllMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep3IllMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep1IllMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep2IllMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep3IllMask =  0xFFFFFFFF, // bit fields
    	RxcplfepmMask =  0xFFFFFFFF, // bit fields
    	RxcplfeplsMask =  0xFFFFFFFF, // bit fields
    	RxcplfepfsMask =  0xFFFFFFFF, // bit fields
    	RxcplfepfcMask =  0xFFFFFFFF, // bit fields
    	RxcvfMask =  0xFFFFFFFF, // bit fields
    	RxcvfmMask =  0xFFFFFFFF, // bit fields
    	RxcvfcMask =  0xFFFFFFFF, // bit fields
    	RxcienMask =  0xFFFFFFFF, // bit fields
    	RxcienmMask =  0xFFFFFFFF, // bit fields
    	RxciencMask =  0xFFFFFFFF, // bit fields
    	RxffsdMask =  0xFFFFFFFF, // bit fields
    	RxffsdmMask =  0xFFFFFFFF, // bit fields
    	RxffsdcMask =  0xFFFFFFFF, // bit fields
    	RxistatMask =  0xFFFFFFFF, // bit fields
    	RxictlMask =  0xFFFFFFFF, // bit fields
    	RxiverMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep1PerdMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep2PerdMask =  0xFFFFFFFF, // bit fields
    	R1Cplfep3PerdMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep1PerdMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep2PerdMask =  0xFFFFFFFF, // bit fields
    	R2Cplfep3PerdMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep1PerdMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep2PerdMask =  0xFFFFFFFF, // bit fields
    	R3Cplfep3PerdMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep1PerdMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep2PerdMask =  0xFFFFFFFF, // bit fields
    	R4Cplfep3PerdMask =  0xFFFFFFFF, // bit fields
    	R5StmpiMask =  0xFFFFFFFF, // bit fields
    	R6StmpiMask =  0xFFFFFFFF, // bit fields
    	R7StmpiMask =  0xFFFFFFFF, // bit fields
    	R8StmpiMask =  0xFFFFFFFF, // bit fields
    	R5StmpvMask =  0xFFFFFFFF, // bit fields
    	R6StmpvMask =  0xFFFFFFFF, // bit fields
    	R7StmpvMask =  0xFFFFFFFF, // bit fields
    	R8StmpvMask =  0xFFFFFFFF, // bit fields

    };
};

#endif

