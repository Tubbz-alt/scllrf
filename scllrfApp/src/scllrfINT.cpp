/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : templateScllrfDriver.h
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Header defining register interface to scllrfINT, autogenerated from a python
 * dictionary.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/

#include "scllrfINT.h"
#include <asynOctetSyncIO.h>
#include <asynCommonSyncIO.h>
#include <limits>
#include <netinet/in.h>
#include <iostream>
using namespace std;
#include <math.h>

/** Constructor for the scllrfINT class.
 * Calls constructor for the asynPortDriver base class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] path The path to the peripherial as built by the builder api
 * \param[in] nelms The number of elements of this device (max addr)
 * \paarm[in] nEntries The number of asyn params to be created for each device
 *
 * */
scllrfINTDriver::scllrfINTDriver(const char *drvPortName, const char *netPortName)
: scllrfAsynPortDriver(drvPortName, netPortName,
		1, /* maxAddr, i.e. number of channels */
		NUM_SCLLRFINT_PARAMS)
{
	asynStatus status = asynSuccess;

    epicsThreadSleep(defaultPollPeriod);

    createParam(R1Cplfep1IRString, asynParamInt32, &p_R1Cplfep1IR);
    createParam(R1Cplfep1IlhRString, asynParamInt32, &p_R1Cplfep1IlhR);
    createParam(R1Cplfep1IlhWString, asynParamInt32, &p_R1Cplfep1IlhW);
    createParam(R1Cplfep1IllRString, asynParamInt32, &p_R1Cplfep1IllR);
    createParam(R1Cplfep1IllWString, asynParamInt32, &p_R1Cplfep1IllW);
    createParam(R1Cplfep1PerdRString, asynParamInt32, &p_R1Cplfep1PerdR);
    createParam(R1Cplfep1PerdWString, asynParamInt32, &p_R1Cplfep1PerdW);
    createParam(R1Cplfep2IRString, asynParamInt32, &p_R1Cplfep2IR);
    createParam(R1Cplfep2IlhRString, asynParamInt32, &p_R1Cplfep2IlhR);
    createParam(R1Cplfep2IlhWString, asynParamInt32, &p_R1Cplfep2IlhW);
    createParam(R1Cplfep2IllRString, asynParamInt32, &p_R1Cplfep2IllR);
    createParam(R1Cplfep2IllWString, asynParamInt32, &p_R1Cplfep2IllW);
    createParam(R1Cplfep2PerdRString, asynParamInt32, &p_R1Cplfep2PerdR);
    createParam(R1Cplfep2PerdWString, asynParamInt32, &p_R1Cplfep2PerdW);
    createParam(R1Cplfep3IRString, asynParamInt32, &p_R1Cplfep3IR);
    createParam(R1Cplfep3IlhRString, asynParamInt32, &p_R1Cplfep3IlhR);
    createParam(R1Cplfep3IlhWString, asynParamInt32, &p_R1Cplfep3IlhW);
    createParam(R1Cplfep3IllRString, asynParamInt32, &p_R1Cplfep3IllR);
    createParam(R1Cplfep3IllWString, asynParamInt32, &p_R1Cplfep3IllW);
    createParam(R1Cplfep3PerdRString, asynParamInt32, &p_R1Cplfep3PerdR);
    createParam(R1Cplfep3PerdWString, asynParamInt32, &p_R1Cplfep3PerdW);
    createParam(R1Cpltmp1IRString, asynParamInt32, &p_R1Cpltmp1IR);
    createParam(R1Cpltmp1IWString, asynParamInt32, &p_R1Cpltmp1IW);
    createParam(R1Cpltmp1VRString, asynParamInt32, &p_R1Cpltmp1VR);
    createParam(R1Cpltmp1VlRString, asynParamInt32, &p_R1Cpltmp1VlR);
    createParam(R1Cpltmp1VlWString, asynParamInt32, &p_R1Cpltmp1VlW);
    createParam(R1Cpltmp2IRString, asynParamInt32, &p_R1Cpltmp2IR);
    createParam(R1Cpltmp2IWString, asynParamInt32, &p_R1Cpltmp2IW);
    createParam(R1Cpltmp2VRString, asynParamInt32, &p_R1Cpltmp2VR);
    createParam(R1Cpltmp2VlRString, asynParamInt32, &p_R1Cpltmp2VlR);
    createParam(R1Cpltmp2VlWString, asynParamInt32, &p_R1Cpltmp2VlW);
    createParam(R1CwalRString, asynParamInt32, &p_R1CwalR);
    createParam(R1CwalWString, asynParamInt32, &p_R1CwalW);
    createParam(R1CwapRString, asynParamInt32, &p_R1CwapR);
    createParam(R1CwapWString, asynParamInt32, &p_R1CwapW);
    createParam(R1CwapsRString, asynParamInt32, &p_R1CwapsR);
    createParam(R1CwapsWString, asynParamInt32, &p_R1CwapsW);
    createParam(R1CwavRString, asynParamInt32, &p_R1CwavR);
    createParam(R1CwwlRString, asynParamInt32, &p_R1CwwlR);
    createParam(R1CwwlWString, asynParamInt32, &p_R1CwwlW);
    createParam(R1CwwtRString, asynParamInt32, &p_R1CwwtR);
    createParam(R1StmpiRString, asynParamInt32, &p_R1StmpiR);
    createParam(R1StmpiWString, asynParamInt32, &p_R1StmpiW);
    createParam(R1StmpvRString, asynParamInt32, &p_R1StmpvR);
    createParam(R1StmpvlRString, asynParamInt32, &p_R1StmpvlR);
    createParam(R1StmpvlWString, asynParamInt32, &p_R1StmpvlW);
    createParam(R2Cplfep1IRString, asynParamInt32, &p_R2Cplfep1IR);
    createParam(R2Cplfep1IlhRString, asynParamInt32, &p_R2Cplfep1IlhR);
    createParam(R2Cplfep1IlhWString, asynParamInt32, &p_R2Cplfep1IlhW);
    createParam(R2Cplfep1IllRString, asynParamInt32, &p_R2Cplfep1IllR);
    createParam(R2Cplfep1IllWString, asynParamInt32, &p_R2Cplfep1IllW);
    createParam(R2Cplfep1PerdRString, asynParamInt32, &p_R2Cplfep1PerdR);
    createParam(R2Cplfep1PerdWString, asynParamInt32, &p_R2Cplfep1PerdW);
    createParam(R2Cplfep2IRString, asynParamInt32, &p_R2Cplfep2IR);
    createParam(R2Cplfep2IlhRString, asynParamInt32, &p_R2Cplfep2IlhR);
    createParam(R2Cplfep2IlhWString, asynParamInt32, &p_R2Cplfep2IlhW);
    createParam(R2Cplfep2IllRString, asynParamInt32, &p_R2Cplfep2IllR);
    createParam(R2Cplfep2IllWString, asynParamInt32, &p_R2Cplfep2IllW);
    createParam(R2Cplfep2PerdRString, asynParamInt32, &p_R2Cplfep2PerdR);
    createParam(R2Cplfep2PerdWString, asynParamInt32, &p_R2Cplfep2PerdW);
    createParam(R2Cplfep3IRString, asynParamInt32, &p_R2Cplfep3IR);
    createParam(R2Cplfep3IlhRString, asynParamInt32, &p_R2Cplfep3IlhR);
    createParam(R2Cplfep3IlhWString, asynParamInt32, &p_R2Cplfep3IlhW);
    createParam(R2Cplfep3IllRString, asynParamInt32, &p_R2Cplfep3IllR);
    createParam(R2Cplfep3IllWString, asynParamInt32, &p_R2Cplfep3IllW);
    createParam(R2Cplfep3PerdRString, asynParamInt32, &p_R2Cplfep3PerdR);
    createParam(R2Cplfep3PerdWString, asynParamInt32, &p_R2Cplfep3PerdW);
    createParam(R2Cpltmp1IRString, asynParamInt32, &p_R2Cpltmp1IR);
    createParam(R2Cpltmp1IWString, asynParamInt32, &p_R2Cpltmp1IW);
    createParam(R2Cpltmp1VRString, asynParamInt32, &p_R2Cpltmp1VR);
    createParam(R2Cpltmp1VlRString, asynParamInt32, &p_R2Cpltmp1VlR);
    createParam(R2Cpltmp1VlWString, asynParamInt32, &p_R2Cpltmp1VlW);
    createParam(R2Cpltmp2IRString, asynParamInt32, &p_R2Cpltmp2IR);
    createParam(R2Cpltmp2IWString, asynParamInt32, &p_R2Cpltmp2IW);
    createParam(R2Cpltmp2VRString, asynParamInt32, &p_R2Cpltmp2VR);
    createParam(R2Cpltmp2VlRString, asynParamInt32, &p_R2Cpltmp2VlR);
    createParam(R2Cpltmp2VlWString, asynParamInt32, &p_R2Cpltmp2VlW);
    createParam(R2CwalRString, asynParamInt32, &p_R2CwalR);
    createParam(R2CwalWString, asynParamInt32, &p_R2CwalW);
    createParam(R2CwapRString, asynParamInt32, &p_R2CwapR);
    createParam(R2CwapWString, asynParamInt32, &p_R2CwapW);
    createParam(R2CwapsRString, asynParamInt32, &p_R2CwapsR);
    createParam(R2CwapsWString, asynParamInt32, &p_R2CwapsW);
    createParam(R2CwavRString, asynParamInt32, &p_R2CwavR);
    createParam(R2CwwlRString, asynParamInt32, &p_R2CwwlR);
    createParam(R2CwwlWString, asynParamInt32, &p_R2CwwlW);
    createParam(R2CwwtRString, asynParamInt32, &p_R2CwwtR);
    createParam(R2StmpiRString, asynParamInt32, &p_R2StmpiR);
    createParam(R2StmpiWString, asynParamInt32, &p_R2StmpiW);
    createParam(R2StmpvRString, asynParamInt32, &p_R2StmpvR);
    createParam(R2StmpvlRString, asynParamInt32, &p_R2StmpvlR);
    createParam(R2StmpvlWString, asynParamInt32, &p_R2StmpvlW);
    createParam(R3Cplfep1IRString, asynParamInt32, &p_R3Cplfep1IR);
    createParam(R3Cplfep1IlhRString, asynParamInt32, &p_R3Cplfep1IlhR);
    createParam(R3Cplfep1IlhWString, asynParamInt32, &p_R3Cplfep1IlhW);
    createParam(R3Cplfep1IllRString, asynParamInt32, &p_R3Cplfep1IllR);
    createParam(R3Cplfep1IllWString, asynParamInt32, &p_R3Cplfep1IllW);
    createParam(R3Cplfep1PerdRString, asynParamInt32, &p_R3Cplfep1PerdR);
    createParam(R3Cplfep1PerdWString, asynParamInt32, &p_R3Cplfep1PerdW);
    createParam(R3Cplfep2IRString, asynParamInt32, &p_R3Cplfep2IR);
    createParam(R3Cplfep2IlhRString, asynParamInt32, &p_R3Cplfep2IlhR);
    createParam(R3Cplfep2IlhWString, asynParamInt32, &p_R3Cplfep2IlhW);
    createParam(R3Cplfep2IllRString, asynParamInt32, &p_R3Cplfep2IllR);
    createParam(R3Cplfep2IllWString, asynParamInt32, &p_R3Cplfep2IllW);
    createParam(R3Cplfep2PerdRString, asynParamInt32, &p_R3Cplfep2PerdR);
    createParam(R3Cplfep2PerdWString, asynParamInt32, &p_R3Cplfep2PerdW);
    createParam(R3Cplfep3IRString, asynParamInt32, &p_R3Cplfep3IR);
    createParam(R3Cplfep3IlhRString, asynParamInt32, &p_R3Cplfep3IlhR);
    createParam(R3Cplfep3IlhWString, asynParamInt32, &p_R3Cplfep3IlhW);
    createParam(R3Cplfep3IllRString, asynParamInt32, &p_R3Cplfep3IllR);
    createParam(R3Cplfep3IllWString, asynParamInt32, &p_R3Cplfep3IllW);
    createParam(R3Cplfep3PerdRString, asynParamInt32, &p_R3Cplfep3PerdR);
    createParam(R3Cplfep3PerdWString, asynParamInt32, &p_R3Cplfep3PerdW);
    createParam(R3Cpltmp1IRString, asynParamInt32, &p_R3Cpltmp1IR);
    createParam(R3Cpltmp1IWString, asynParamInt32, &p_R3Cpltmp1IW);
    createParam(R3Cpltmp1VRString, asynParamInt32, &p_R3Cpltmp1VR);
    createParam(R3Cpltmp1VlRString, asynParamInt32, &p_R3Cpltmp1VlR);
    createParam(R3Cpltmp1VlWString, asynParamInt32, &p_R3Cpltmp1VlW);
    createParam(R3Cpltmp2IRString, asynParamInt32, &p_R3Cpltmp2IR);
    createParam(R3Cpltmp2IWString, asynParamInt32, &p_R3Cpltmp2IW);
    createParam(R3Cpltmp2VRString, asynParamInt32, &p_R3Cpltmp2VR);
    createParam(R3Cpltmp2VlRString, asynParamInt32, &p_R3Cpltmp2VlR);
    createParam(R3Cpltmp2VlWString, asynParamInt32, &p_R3Cpltmp2VlW);
    createParam(R3CwalRString, asynParamInt32, &p_R3CwalR);
    createParam(R3CwalWString, asynParamInt32, &p_R3CwalW);
    createParam(R3CwapRString, asynParamInt32, &p_R3CwapR);
    createParam(R3CwapWString, asynParamInt32, &p_R3CwapW);
    createParam(R3CwapsRString, asynParamInt32, &p_R3CwapsR);
    createParam(R3CwapsWString, asynParamInt32, &p_R3CwapsW);
    createParam(R3CwavRString, asynParamInt32, &p_R3CwavR);
    createParam(R3CwwlRString, asynParamInt32, &p_R3CwwlR);
    createParam(R3CwwlWString, asynParamInt32, &p_R3CwwlW);
    createParam(R3CwwtRString, asynParamInt32, &p_R3CwwtR);
    createParam(R3StmpiRString, asynParamInt32, &p_R3StmpiR);
    createParam(R3StmpiWString, asynParamInt32, &p_R3StmpiW);
    createParam(R3StmpvRString, asynParamInt32, &p_R3StmpvR);
    createParam(R3StmpvlRString, asynParamInt32, &p_R3StmpvlR);
    createParam(R3StmpvlWString, asynParamInt32, &p_R3StmpvlW);
    createParam(R4Cplfep1IRString, asynParamInt32, &p_R4Cplfep1IR);
    createParam(R4Cplfep1IlhRString, asynParamInt32, &p_R4Cplfep1IlhR);
    createParam(R4Cplfep1IlhWString, asynParamInt32, &p_R4Cplfep1IlhW);
    createParam(R4Cplfep1IllRString, asynParamInt32, &p_R4Cplfep1IllR);
    createParam(R4Cplfep1IllWString, asynParamInt32, &p_R4Cplfep1IllW);
    createParam(R4Cplfep1PerdRString, asynParamInt32, &p_R4Cplfep1PerdR);
    createParam(R4Cplfep1PerdWString, asynParamInt32, &p_R4Cplfep1PerdW);
    createParam(R4Cplfep2IRString, asynParamInt32, &p_R4Cplfep2IR);
    createParam(R4Cplfep2IlhRString, asynParamInt32, &p_R4Cplfep2IlhR);
    createParam(R4Cplfep2IlhWString, asynParamInt32, &p_R4Cplfep2IlhW);
    createParam(R4Cplfep2IllRString, asynParamInt32, &p_R4Cplfep2IllR);
    createParam(R4Cplfep2IllWString, asynParamInt32, &p_R4Cplfep2IllW);
    createParam(R4Cplfep2PerdRString, asynParamInt32, &p_R4Cplfep2PerdR);
    createParam(R4Cplfep2PerdWString, asynParamInt32, &p_R4Cplfep2PerdW);
    createParam(R4Cplfep3IRString, asynParamInt32, &p_R4Cplfep3IR);
    createParam(R4Cplfep3IlhRString, asynParamInt32, &p_R4Cplfep3IlhR);
    createParam(R4Cplfep3IlhWString, asynParamInt32, &p_R4Cplfep3IlhW);
    createParam(R4Cplfep3IllRString, asynParamInt32, &p_R4Cplfep3IllR);
    createParam(R4Cplfep3IllWString, asynParamInt32, &p_R4Cplfep3IllW);
    createParam(R4Cplfep3PerdRString, asynParamInt32, &p_R4Cplfep3PerdR);
    createParam(R4Cplfep3PerdWString, asynParamInt32, &p_R4Cplfep3PerdW);
    createParam(R4Cpltmp1IRString, asynParamInt32, &p_R4Cpltmp1IR);
    createParam(R4Cpltmp1IWString, asynParamInt32, &p_R4Cpltmp1IW);
    createParam(R4Cpltmp1VRString, asynParamInt32, &p_R4Cpltmp1VR);
    createParam(R4Cpltmp1VlRString, asynParamInt32, &p_R4Cpltmp1VlR);
    createParam(R4Cpltmp1VlWString, asynParamInt32, &p_R4Cpltmp1VlW);
    createParam(R4Cpltmp2IRString, asynParamInt32, &p_R4Cpltmp2IR);
    createParam(R4Cpltmp2IWString, asynParamInt32, &p_R4Cpltmp2IW);
    createParam(R4Cpltmp2VRString, asynParamInt32, &p_R4Cpltmp2VR);
    createParam(R4Cpltmp2VlRString, asynParamInt32, &p_R4Cpltmp2VlR);
    createParam(R4Cpltmp2VlWString, asynParamInt32, &p_R4Cpltmp2VlW);
    createParam(R4CwalRString, asynParamInt32, &p_R4CwalR);
    createParam(R4CwalWString, asynParamInt32, &p_R4CwalW);
    createParam(R4CwapRString, asynParamInt32, &p_R4CwapR);
    createParam(R4CwapWString, asynParamInt32, &p_R4CwapW);
    createParam(R4CwapsRString, asynParamInt32, &p_R4CwapsR);
    createParam(R4CwapsWString, asynParamInt32, &p_R4CwapsW);
    createParam(R4CwavRString, asynParamInt32, &p_R4CwavR);
    createParam(R4CwwlRString, asynParamInt32, &p_R4CwwlR);
    createParam(R4CwwlWString, asynParamInt32, &p_R4CwwlW);
    createParam(R4CwwtRString, asynParamInt32, &p_R4CwwtR);
    createParam(R4StmpiRString, asynParamInt32, &p_R4StmpiR);
    createParam(R4StmpiWString, asynParamInt32, &p_R4StmpiW);
    createParam(R4StmpvRString, asynParamInt32, &p_R4StmpvR);
    createParam(R4StmpvlRString, asynParamInt32, &p_R4StmpvlR);
    createParam(R4StmpvlWString, asynParamInt32, &p_R4StmpvlW);
    createParam(R5StmpiRString, asynParamInt32, &p_R5StmpiR);
    createParam(R5StmpiWString, asynParamInt32, &p_R5StmpiW);
    createParam(R5StmpvRString, asynParamInt32, &p_R5StmpvR);
    createParam(R6StmpiRString, asynParamInt32, &p_R6StmpiR);
    createParam(R6StmpiWString, asynParamInt32, &p_R6StmpiW);
    createParam(R6StmpvRString, asynParamInt32, &p_R6StmpvR);
    createParam(R7StmpiRString, asynParamInt32, &p_R7StmpiR);
    createParam(R7StmpiWString, asynParamInt32, &p_R7StmpiW);
    createParam(R7StmpvRString, asynParamInt32, &p_R7StmpvR);
    createParam(R8StmpiRString, asynParamInt32, &p_R8StmpiR);
    createParam(R8StmpiWString, asynParamInt32, &p_R8StmpiW);
    createParam(R8StmpvRString, asynParamInt32, &p_R8StmpvR);
    createParam(RxatfltRString, asynParamInt32, &p_RxatfltR);
    createParam(RxatfltWString, asynParamInt32, &p_RxatfltW);
    createParam(RxcienRString, asynParamInt32, &p_RxcienR);
    createParam(RxciencRString, asynParamInt32, &p_RxciencR);
    createParam(RxciencWString, asynParamInt32, &p_RxciencW);
    createParam(RxcienmRString, asynParamInt32, &p_RxcienmR);
    createParam(RxcienmWString, asynParamInt32, &p_RxcienmW);
    createParam(RxcplfepfcRString, asynParamInt32, &p_RxcplfepfcR);
    createParam(RxcplfepfcWString, asynParamInt32, &p_RxcplfepfcW);
    createParam(RxcplfepfsRString, asynParamInt32, &p_RxcplfepfsR);
    createParam(RxcplfeplsRString, asynParamInt32, &p_RxcplfeplsR);
    createParam(RxcplfepmRString, asynParamInt32, &p_RxcplfepmR);
    createParam(RxcplfepmWString, asynParamInt32, &p_RxcplfepmW);
    createParam(RxcpltmpfcRString, asynParamInt32, &p_RxcpltmpfcR);
    createParam(RxcpltmpfcWString, asynParamInt32, &p_RxcpltmpfcW);
    createParam(RxcpltmplsRString, asynParamInt32, &p_RxcpltmplsR);
    createParam(RxcpltmpmRString, asynParamInt32, &p_RxcpltmpmR);
    createParam(RxcpltmpmWString, asynParamInt32, &p_RxcpltmpmW);
    createParam(RxcvfRString, asynParamInt32, &p_RxcvfR);
    createParam(RxcvfcRString, asynParamInt32, &p_RxcvfcR);
    createParam(RxcvfcWString, asynParamInt32, &p_RxcvfcW);
    createParam(RxcvfmRString, asynParamInt32, &p_RxcvfmR);
    createParam(RxcvfmWString, asynParamInt32, &p_RxcvfmW);
    createParam(RxcwadRString, asynParamInt32, &p_RxcwadR);
    createParam(RxcwafcRString, asynParamInt32, &p_RxcwafcR);
    createParam(RxcwafcWString, asynParamInt32, &p_RxcwafcW);
    createParam(RxcwamRString, asynParamInt32, &p_RxcwamR);
    createParam(RxcwamWString, asynParamInt32, &p_RxcwamW);
    createParam(RxcwatRString, asynParamInt32, &p_RxcwatR);
    createParam(RxcwatWString, asynParamInt32, &p_RxcwatW);
    createParam(RxcwwdRString, asynParamInt32, &p_RxcwwdR);
    createParam(RxcwwfcRString, asynParamInt32, &p_RxcwwfcR);
    createParam(RxcwwfcWString, asynParamInt32, &p_RxcwwfcW);
    createParam(RxcwwmRString, asynParamInt32, &p_RxcwwmR);
    createParam(RxcwwmWString, asynParamInt32, &p_RxcwwmW);
    createParam(RxcwwtsRString, asynParamInt32, &p_RxcwwtsR);
    createParam(RxcwwtsWString, asynParamInt32, &p_RxcwwtsW);
    createParam(RxffsdRString, asynParamInt32, &p_RxffsdR);
    createParam(RxffsdcRString, asynParamInt32, &p_RxffsdcR);
    createParam(RxffsdcWString, asynParamInt32, &p_RxffsdcW);
    createParam(RxffsdmRString, asynParamInt32, &p_RxffsdmR);
    createParam(RxffsdmWString, asynParamInt32, &p_RxffsdmW);
    createParam(RxictlRString, asynParamInt32, &p_RxictlR);
    createParam(RxictlWString, asynParamInt32, &p_RxictlW);
    createParam(RxistatRString, asynParamInt32, &p_RxistatR);
    createParam(RxiverRString, asynParamInt32, &p_RxiverR);
    createParam(RxstmpfcRString, asynParamInt32, &p_RxstmpfcR);
    createParam(RxstmpfcWString, asynParamInt32, &p_RxstmpfcW);
    createParam(RxstmplsRString, asynParamInt32, &p_RxstmplsR);
    createParam(RxstmpmRString, asynParamInt32, &p_RxstmpmR);
    createParam(RxstmpmWString, asynParamInt32, &p_RxstmpmW);

    // Message size is the number of read registers, plus 1 nonce for every 175 read registers
    PolledRegMsgSize_ = scllrfINTReadRegCount + (scllrfINTReadRegCount / 175) + 1;
	// A canned request to read all registers
    pPolledRegMsg_ = new FpgaReg[PolledRegMsgSize_]
	{
		{ 0, 0 },
		{ flagReadMask | R1CwavRAdr, blankData },
		{ flagReadMask | R2CwavRAdr, blankData },
		{ flagReadMask | R3CwavRAdr, blankData },
		{ flagReadMask | R4CwavRAdr, blankData },
		{ flagReadMask | R1CwapsRAdr, blankData },
		{ flagReadMask | R2CwapsRAdr, blankData },
		{ flagReadMask | R3CwapsRAdr, blankData },
		{ flagReadMask | R4CwapsRAdr, blankData },
		{ flagReadMask | R1CwalRAdr, blankData },
		{ flagReadMask | R2CwalRAdr, blankData },
		{ flagReadMask | R3CwalRAdr, blankData },
		{ flagReadMask | R4CwalRAdr, blankData },
		{ flagReadMask | R1CwapRAdr, blankData },
		{ flagReadMask | R2CwapRAdr, blankData },
		{ flagReadMask | R3CwapRAdr, blankData },
		{ flagReadMask | R4CwapRAdr, blankData },
		{ flagReadMask | RxcwadRAdr, blankData },
		{ flagReadMask | RxcwamRAdr, blankData },
		{ flagReadMask | RxcwatRAdr, blankData },
		{ flagReadMask | RxatfltRAdr, blankData },
		{ flagReadMask | RxcwafcRAdr, blankData },
		{ flagReadMask | R1CwwtRAdr, blankData },
		{ flagReadMask | R2CwwtRAdr, blankData },
		{ flagReadMask | R3CwwtRAdr, blankData },
		{ flagReadMask | R4CwwtRAdr, blankData },
		{ flagReadMask | R1CwwlRAdr, blankData },
		{ flagReadMask | R2CwwlRAdr, blankData },
		{ flagReadMask | R3CwwlRAdr, blankData },
		{ flagReadMask | R4CwwlRAdr, blankData },
		{ flagReadMask | RxcwwdRAdr, blankData },
		{ flagReadMask | RxcwwtsRAdr, blankData },
		{ flagReadMask | RxcwwmRAdr, blankData },
		{ flagReadMask | RxcwwfcRAdr, blankData },
		{ flagReadMask | R1StmpiRAdr, blankData },
		{ flagReadMask | R2StmpiRAdr, blankData },
		{ flagReadMask | R3StmpiRAdr, blankData },
		{ flagReadMask | R4StmpiRAdr, blankData },
		{ flagReadMask | R1StmpvRAdr, blankData },
		{ flagReadMask | R2StmpvRAdr, blankData },
		{ flagReadMask | R3StmpvRAdr, blankData },
		{ flagReadMask | R4StmpvRAdr, blankData },
		{ flagReadMask | R1StmpvlRAdr, blankData },
		{ flagReadMask | R2StmpvlRAdr, blankData },
		{ flagReadMask | R3StmpvlRAdr, blankData },
		{ flagReadMask | R4StmpvlRAdr, blankData },
		{ flagReadMask | RxstmplsRAdr, blankData },
		{ flagReadMask | RxstmpmRAdr, blankData },
		{ flagReadMask | RxstmpfcRAdr, blankData },
		{ flagReadMask | R1Cpltmp1IRAdr, blankData },
		{ flagReadMask | R1Cpltmp2IRAdr, blankData },
		{ flagReadMask | R2Cpltmp1IRAdr, blankData },
		{ flagReadMask | R2Cpltmp2IRAdr, blankData },
		{ flagReadMask | R3Cpltmp1IRAdr, blankData },
		{ flagReadMask | R3Cpltmp2IRAdr, blankData },
		{ flagReadMask | R4Cpltmp1IRAdr, blankData },
		{ flagReadMask | R4Cpltmp2IRAdr, blankData },
		{ flagReadMask | R1Cpltmp1VRAdr, blankData },
		{ flagReadMask | R1Cpltmp2VRAdr, blankData },
		{ flagReadMask | R2Cpltmp1VRAdr, blankData },
		{ flagReadMask | R2Cpltmp2VRAdr, blankData },
		{ flagReadMask | R3Cpltmp1VRAdr, blankData },
		{ flagReadMask | R3Cpltmp2VRAdr, blankData },
		{ flagReadMask | R4Cpltmp1VRAdr, blankData },
		{ flagReadMask | R4Cpltmp2VRAdr, blankData },
		{ flagReadMask | R1Cpltmp1VlRAdr, blankData },
		{ flagReadMask | R1Cpltmp2VlRAdr, blankData },
		{ flagReadMask | R2Cpltmp1VlRAdr, blankData },
		{ flagReadMask | R2Cpltmp2VlRAdr, blankData },
		{ flagReadMask | R3Cpltmp1VlRAdr, blankData },
		{ flagReadMask | R3Cpltmp2VlRAdr, blankData },
		{ flagReadMask | R4Cpltmp1VlRAdr, blankData },
		{ flagReadMask | R4Cpltmp2VlRAdr, blankData },
		{ flagReadMask | RxcpltmplsRAdr, blankData },
		{ flagReadMask | RxcpltmpmRAdr, blankData },
		{ flagReadMask | RxcpltmpfcRAdr, blankData },
		{ flagReadMask | R1Cplfep1IRAdr, blankData },
		{ flagReadMask | R1Cplfep2IRAdr, blankData },
		{ flagReadMask | R1Cplfep3IRAdr, blankData },
		{ flagReadMask | R2Cplfep1IRAdr, blankData },
		{ flagReadMask | R2Cplfep2IRAdr, blankData },
		{ flagReadMask | R2Cplfep3IRAdr, blankData },
		{ flagReadMask | R3Cplfep1IRAdr, blankData },
		{ flagReadMask | R3Cplfep2IRAdr, blankData },
		{ flagReadMask | R3Cplfep3IRAdr, blankData },
		{ flagReadMask | R4Cplfep1IRAdr, blankData },
		{ flagReadMask | R4Cplfep2IRAdr, blankData },
		{ flagReadMask | R4Cplfep3IRAdr, blankData },
		{ flagReadMask | R1Cplfep1IlhRAdr, blankData },
		{ flagReadMask | R1Cplfep2IlhRAdr, blankData },
		{ flagReadMask | R1Cplfep3IlhRAdr, blankData },
		{ flagReadMask | R2Cplfep1IlhRAdr, blankData },
		{ flagReadMask | R2Cplfep2IlhRAdr, blankData },
		{ flagReadMask | R2Cplfep3IlhRAdr, blankData },
		{ flagReadMask | R3Cplfep1IlhRAdr, blankData },
		{ flagReadMask | R3Cplfep2IlhRAdr, blankData },
		{ flagReadMask | R3Cplfep3IlhRAdr, blankData },
		{ flagReadMask | R4Cplfep1IlhRAdr, blankData },
		{ flagReadMask | R4Cplfep2IlhRAdr, blankData },
		{ flagReadMask | R4Cplfep3IlhRAdr, blankData },
		{ flagReadMask | R1Cplfep1IllRAdr, blankData },
		{ flagReadMask | R1Cplfep2IllRAdr, blankData },
		{ flagReadMask | R1Cplfep3IllRAdr, blankData },
		{ flagReadMask | R2Cplfep1IllRAdr, blankData },
		{ flagReadMask | R2Cplfep2IllRAdr, blankData },
		{ flagReadMask | R2Cplfep3IllRAdr, blankData },
		{ flagReadMask | R3Cplfep1IllRAdr, blankData },
		{ flagReadMask | R3Cplfep2IllRAdr, blankData },
		{ flagReadMask | R3Cplfep3IllRAdr, blankData },
		{ flagReadMask | R4Cplfep1IllRAdr, blankData },
		{ flagReadMask | R4Cplfep2IllRAdr, blankData },
		{ flagReadMask | R4Cplfep3IllRAdr, blankData },
		{ flagReadMask | RxcplfepmRAdr, blankData },
		{ flagReadMask | RxcplfeplsRAdr, blankData },
		{ flagReadMask | RxcplfepfsRAdr, blankData },
		{ flagReadMask | RxcplfepfcRAdr, blankData },
		{ flagReadMask | RxcvfRAdr, blankData },
		{ flagReadMask | RxcvfmRAdr, blankData },
		{ flagReadMask | RxcvfcRAdr, blankData },
		{ flagReadMask | RxcienRAdr, blankData },
		{ flagReadMask | RxcienmRAdr, blankData },
		{ flagReadMask | RxciencRAdr, blankData },
		{ flagReadMask | RxffsdRAdr, blankData },
		{ flagReadMask | RxffsdmRAdr, blankData },
		{ flagReadMask | RxffsdcRAdr, blankData },
		{ flagReadMask | RxistatRAdr, blankData },
		{ flagReadMask | RxictlRAdr, blankData },
		{ flagReadMask | RxiverRAdr, blankData },
		{ flagReadMask | R1Cplfep1PerdRAdr, blankData },
		{ flagReadMask | R1Cplfep2PerdRAdr, blankData },
		{ flagReadMask | R1Cplfep3PerdRAdr, blankData },
		{ flagReadMask | R2Cplfep1PerdRAdr, blankData },
		{ flagReadMask | R2Cplfep2PerdRAdr, blankData },
		{ flagReadMask | R2Cplfep3PerdRAdr, blankData },
		{ flagReadMask | R3Cplfep1PerdRAdr, blankData },
		{ flagReadMask | R3Cplfep2PerdRAdr, blankData },
		{ flagReadMask | R3Cplfep3PerdRAdr, blankData },
		{ flagReadMask | R4Cplfep1PerdRAdr, blankData },
		{ flagReadMask | R4Cplfep2PerdRAdr, blankData },
		{ flagReadMask | R4Cplfep3PerdRAdr, blankData },
		{ flagReadMask | R5StmpiRAdr, blankData },
		{ flagReadMask | R6StmpiRAdr, blankData },
		{ flagReadMask | R7StmpiRAdr, blankData },
		{ flagReadMask | R8StmpiRAdr, blankData },
		{ flagReadMask | R5StmpvRAdr, blankData },
		{ flagReadMask | R6StmpvRAdr, blankData },
		{ flagReadMask | R7StmpvRAdr, blankData },
		{ flagReadMask | R8StmpvRAdr, blankData },
	};

	htonFpgaRegArray(pPolledRegMsg_, PolledRegMsgSize_);

    epicsThreadSleep(defaultPollPeriod);
    printf("%s created %ld parameters.\n",__PRETTY_FUNCTION__,NUM_SCLLRFINT_PARAMS);

    wakeupPoller();
    wakeupReader();
}

scllrfINTDriver::~scllrfINTDriver()
{
	isShuttingDown_ = true;
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller();
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller(); // call this twice in case the poller was never set to run
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupReader();
	pasynOctetSyncIO->disconnect(pOctetAsynUser_);
	pasynCommonSyncIO->disconnectDevice(pCommonAsynUser_);
	pasynCommonSyncIO->disconnect(pCommonAsynUser_);
}

/** Called when you have the asyn parameter name and want the corresponding
 * register address.
  * \param[in] function From pAsynUser->reason, corresponding to a registered parameter.
  * \param[in] pToFpga Pointer to the {Address, Data} structure where the register address will be written
  * \param[in] nElements Number of elements to read. */
asynStatus scllrfINTDriver::functionToRegister(const int function, FpgaReg *pToFpga)
{
	asynStatus status = asynSuccess;

    if( function == p_R1Cplfep1IR )
    {
		pToFpga->addr = R1Cplfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep1IlhR )
    {
		pToFpga->addr = R1Cplfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep1IlhW )
    {
		pToFpga->addr = R1Cplfep1IlhWAdr;
    }
    else
    if( function == p_R1Cplfep1IllR )
    {
		pToFpga->addr = R1Cplfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep1IllW )
    {
		pToFpga->addr = R1Cplfep1IllWAdr;
    }
    else
    if( function == p_R1Cplfep1PerdR )
    {
		pToFpga->addr = R1Cplfep1PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep1PerdW )
    {
		pToFpga->addr = R1Cplfep1PerdWAdr;
    }
    else
    if( function == p_R1Cplfep2IR )
    {
		pToFpga->addr = R1Cplfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep2IlhR )
    {
		pToFpga->addr = R1Cplfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep2IlhW )
    {
		pToFpga->addr = R1Cplfep2IlhWAdr;
    }
    else
    if( function == p_R1Cplfep2IllR )
    {
		pToFpga->addr = R1Cplfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep2IllW )
    {
		pToFpga->addr = R1Cplfep2IllWAdr;
    }
    else
    if( function == p_R1Cplfep2PerdR )
    {
		pToFpga->addr = R1Cplfep2PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep2PerdW )
    {
		pToFpga->addr = R1Cplfep2PerdWAdr;
    }
    else
    if( function == p_R1Cplfep3IR )
    {
		pToFpga->addr = R1Cplfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep3IlhR )
    {
		pToFpga->addr = R1Cplfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep3IlhW )
    {
		pToFpga->addr = R1Cplfep3IlhWAdr;
    }
    else
    if( function == p_R1Cplfep3IllR )
    {
		pToFpga->addr = R1Cplfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep3IllW )
    {
		pToFpga->addr = R1Cplfep3IllWAdr;
    }
    else
    if( function == p_R1Cplfep3PerdR )
    {
		pToFpga->addr = R1Cplfep3PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cplfep3PerdW )
    {
		pToFpga->addr = R1Cplfep3PerdWAdr;
    }
    else
    if( function == p_R1Cpltmp1IR )
    {
		pToFpga->addr = R1Cpltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cpltmp1IW )
    {
		pToFpga->addr = R1Cpltmp1IWAdr;
    }
    else
    if( function == p_R1Cpltmp1VR )
    {
		pToFpga->addr = R1Cpltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cpltmp1VlR )
    {
		pToFpga->addr = R1Cpltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cpltmp1VlW )
    {
		pToFpga->addr = R1Cpltmp1VlWAdr;
    }
    else
    if( function == p_R1Cpltmp2IR )
    {
		pToFpga->addr = R1Cpltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cpltmp2IW )
    {
		pToFpga->addr = R1Cpltmp2IWAdr;
    }
    else
    if( function == p_R1Cpltmp2VR )
    {
		pToFpga->addr = R1Cpltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cpltmp2VlR )
    {
		pToFpga->addr = R1Cpltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_R1Cpltmp2VlW )
    {
		pToFpga->addr = R1Cpltmp2VlWAdr;
    }
    else
    if( function == p_R1CwalR )
    {
		pToFpga->addr = R1CwalRAdr|flagReadMask;
    }
    else
    if( function == p_R1CwalW )
    {
		pToFpga->addr = R1CwalWAdr;
    }
    else
    if( function == p_R1CwapR )
    {
		pToFpga->addr = R1CwapRAdr|flagReadMask;
    }
    else
    if( function == p_R1CwapW )
    {
		pToFpga->addr = R1CwapWAdr;
    }
    else
    if( function == p_R1CwapsR )
    {
		pToFpga->addr = R1CwapsRAdr|flagReadMask;
    }
    else
    if( function == p_R1CwapsW )
    {
		pToFpga->addr = R1CwapsWAdr;
    }
    else
    if( function == p_R1CwavR )
    {
		pToFpga->addr = R1CwavRAdr|flagReadMask;
    }
    else
    if( function == p_R1CwwlR )
    {
		pToFpga->addr = R1CwwlRAdr|flagReadMask;
    }
    else
    if( function == p_R1CwwlW )
    {
		pToFpga->addr = R1CwwlWAdr;
    }
    else
    if( function == p_R1CwwtR )
    {
		pToFpga->addr = R1CwwtRAdr|flagReadMask;
    }
    else
    if( function == p_R1StmpiR )
    {
		pToFpga->addr = R1StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R1StmpiW )
    {
		pToFpga->addr = R1StmpiWAdr;
    }
    else
    if( function == p_R1StmpvR )
    {
		pToFpga->addr = R1StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_R1StmpvlR )
    {
		pToFpga->addr = R1StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_R1StmpvlW )
    {
		pToFpga->addr = R1StmpvlWAdr;
    }
    else
    if( function == p_R2Cplfep1IR )
    {
		pToFpga->addr = R2Cplfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep1IlhR )
    {
		pToFpga->addr = R2Cplfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep1IlhW )
    {
		pToFpga->addr = R2Cplfep1IlhWAdr;
    }
    else
    if( function == p_R2Cplfep1IllR )
    {
		pToFpga->addr = R2Cplfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep1IllW )
    {
		pToFpga->addr = R2Cplfep1IllWAdr;
    }
    else
    if( function == p_R2Cplfep1PerdR )
    {
		pToFpga->addr = R2Cplfep1PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep1PerdW )
    {
		pToFpga->addr = R2Cplfep1PerdWAdr;
    }
    else
    if( function == p_R2Cplfep2IR )
    {
		pToFpga->addr = R2Cplfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep2IlhR )
    {
		pToFpga->addr = R2Cplfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep2IlhW )
    {
		pToFpga->addr = R2Cplfep2IlhWAdr;
    }
    else
    if( function == p_R2Cplfep2IllR )
    {
		pToFpga->addr = R2Cplfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep2IllW )
    {
		pToFpga->addr = R2Cplfep2IllWAdr;
    }
    else
    if( function == p_R2Cplfep2PerdR )
    {
		pToFpga->addr = R2Cplfep2PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep2PerdW )
    {
		pToFpga->addr = R2Cplfep2PerdWAdr;
    }
    else
    if( function == p_R2Cplfep3IR )
    {
		pToFpga->addr = R2Cplfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep3IlhR )
    {
		pToFpga->addr = R2Cplfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep3IlhW )
    {
		pToFpga->addr = R2Cplfep3IlhWAdr;
    }
    else
    if( function == p_R2Cplfep3IllR )
    {
		pToFpga->addr = R2Cplfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep3IllW )
    {
		pToFpga->addr = R2Cplfep3IllWAdr;
    }
    else
    if( function == p_R2Cplfep3PerdR )
    {
		pToFpga->addr = R2Cplfep3PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cplfep3PerdW )
    {
		pToFpga->addr = R2Cplfep3PerdWAdr;
    }
    else
    if( function == p_R2Cpltmp1IR )
    {
		pToFpga->addr = R2Cpltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cpltmp1IW )
    {
		pToFpga->addr = R2Cpltmp1IWAdr;
    }
    else
    if( function == p_R2Cpltmp1VR )
    {
		pToFpga->addr = R2Cpltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cpltmp1VlR )
    {
		pToFpga->addr = R2Cpltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cpltmp1VlW )
    {
		pToFpga->addr = R2Cpltmp1VlWAdr;
    }
    else
    if( function == p_R2Cpltmp2IR )
    {
		pToFpga->addr = R2Cpltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cpltmp2IW )
    {
		pToFpga->addr = R2Cpltmp2IWAdr;
    }
    else
    if( function == p_R2Cpltmp2VR )
    {
		pToFpga->addr = R2Cpltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cpltmp2VlR )
    {
		pToFpga->addr = R2Cpltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_R2Cpltmp2VlW )
    {
		pToFpga->addr = R2Cpltmp2VlWAdr;
    }
    else
    if( function == p_R2CwalR )
    {
		pToFpga->addr = R2CwalRAdr|flagReadMask;
    }
    else
    if( function == p_R2CwalW )
    {
		pToFpga->addr = R2CwalWAdr;
    }
    else
    if( function == p_R2CwapR )
    {
		pToFpga->addr = R2CwapRAdr|flagReadMask;
    }
    else
    if( function == p_R2CwapW )
    {
		pToFpga->addr = R2CwapWAdr;
    }
    else
    if( function == p_R2CwapsR )
    {
		pToFpga->addr = R2CwapsRAdr|flagReadMask;
    }
    else
    if( function == p_R2CwapsW )
    {
		pToFpga->addr = R2CwapsWAdr;
    }
    else
    if( function == p_R2CwavR )
    {
		pToFpga->addr = R2CwavRAdr|flagReadMask;
    }
    else
    if( function == p_R2CwwlR )
    {
		pToFpga->addr = R2CwwlRAdr|flagReadMask;
    }
    else
    if( function == p_R2CwwlW )
    {
		pToFpga->addr = R2CwwlWAdr;
    }
    else
    if( function == p_R2CwwtR )
    {
		pToFpga->addr = R2CwwtRAdr|flagReadMask;
    }
    else
    if( function == p_R2StmpiR )
    {
		pToFpga->addr = R2StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R2StmpiW )
    {
		pToFpga->addr = R2StmpiWAdr;
    }
    else
    if( function == p_R2StmpvR )
    {
		pToFpga->addr = R2StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_R2StmpvlR )
    {
		pToFpga->addr = R2StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_R2StmpvlW )
    {
		pToFpga->addr = R2StmpvlWAdr;
    }
    else
    if( function == p_R3Cplfep1IR )
    {
		pToFpga->addr = R3Cplfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep1IlhR )
    {
		pToFpga->addr = R3Cplfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep1IlhW )
    {
		pToFpga->addr = R3Cplfep1IlhWAdr;
    }
    else
    if( function == p_R3Cplfep1IllR )
    {
		pToFpga->addr = R3Cplfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep1IllW )
    {
		pToFpga->addr = R3Cplfep1IllWAdr;
    }
    else
    if( function == p_R3Cplfep1PerdR )
    {
		pToFpga->addr = R3Cplfep1PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep1PerdW )
    {
		pToFpga->addr = R3Cplfep1PerdWAdr;
    }
    else
    if( function == p_R3Cplfep2IR )
    {
		pToFpga->addr = R3Cplfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep2IlhR )
    {
		pToFpga->addr = R3Cplfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep2IlhW )
    {
		pToFpga->addr = R3Cplfep2IlhWAdr;
    }
    else
    if( function == p_R3Cplfep2IllR )
    {
		pToFpga->addr = R3Cplfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep2IllW )
    {
		pToFpga->addr = R3Cplfep2IllWAdr;
    }
    else
    if( function == p_R3Cplfep2PerdR )
    {
		pToFpga->addr = R3Cplfep2PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep2PerdW )
    {
		pToFpga->addr = R3Cplfep2PerdWAdr;
    }
    else
    if( function == p_R3Cplfep3IR )
    {
		pToFpga->addr = R3Cplfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep3IlhR )
    {
		pToFpga->addr = R3Cplfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep3IlhW )
    {
		pToFpga->addr = R3Cplfep3IlhWAdr;
    }
    else
    if( function == p_R3Cplfep3IllR )
    {
		pToFpga->addr = R3Cplfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep3IllW )
    {
		pToFpga->addr = R3Cplfep3IllWAdr;
    }
    else
    if( function == p_R3Cplfep3PerdR )
    {
		pToFpga->addr = R3Cplfep3PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cplfep3PerdW )
    {
		pToFpga->addr = R3Cplfep3PerdWAdr;
    }
    else
    if( function == p_R3Cpltmp1IR )
    {
		pToFpga->addr = R3Cpltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cpltmp1IW )
    {
		pToFpga->addr = R3Cpltmp1IWAdr;
    }
    else
    if( function == p_R3Cpltmp1VR )
    {
		pToFpga->addr = R3Cpltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cpltmp1VlR )
    {
		pToFpga->addr = R3Cpltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cpltmp1VlW )
    {
		pToFpga->addr = R3Cpltmp1VlWAdr;
    }
    else
    if( function == p_R3Cpltmp2IR )
    {
		pToFpga->addr = R3Cpltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cpltmp2IW )
    {
		pToFpga->addr = R3Cpltmp2IWAdr;
    }
    else
    if( function == p_R3Cpltmp2VR )
    {
		pToFpga->addr = R3Cpltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cpltmp2VlR )
    {
		pToFpga->addr = R3Cpltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_R3Cpltmp2VlW )
    {
		pToFpga->addr = R3Cpltmp2VlWAdr;
    }
    else
    if( function == p_R3CwalR )
    {
		pToFpga->addr = R3CwalRAdr|flagReadMask;
    }
    else
    if( function == p_R3CwalW )
    {
		pToFpga->addr = R3CwalWAdr;
    }
    else
    if( function == p_R3CwapR )
    {
		pToFpga->addr = R3CwapRAdr|flagReadMask;
    }
    else
    if( function == p_R3CwapW )
    {
		pToFpga->addr = R3CwapWAdr;
    }
    else
    if( function == p_R3CwapsR )
    {
		pToFpga->addr = R3CwapsRAdr|flagReadMask;
    }
    else
    if( function == p_R3CwapsW )
    {
		pToFpga->addr = R3CwapsWAdr;
    }
    else
    if( function == p_R3CwavR )
    {
		pToFpga->addr = R3CwavRAdr|flagReadMask;
    }
    else
    if( function == p_R3CwwlR )
    {
		pToFpga->addr = R3CwwlRAdr|flagReadMask;
    }
    else
    if( function == p_R3CwwlW )
    {
		pToFpga->addr = R3CwwlWAdr;
    }
    else
    if( function == p_R3CwwtR )
    {
		pToFpga->addr = R3CwwtRAdr|flagReadMask;
    }
    else
    if( function == p_R3StmpiR )
    {
		pToFpga->addr = R3StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R3StmpiW )
    {
		pToFpga->addr = R3StmpiWAdr;
    }
    else
    if( function == p_R3StmpvR )
    {
		pToFpga->addr = R3StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_R3StmpvlR )
    {
		pToFpga->addr = R3StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_R3StmpvlW )
    {
		pToFpga->addr = R3StmpvlWAdr;
    }
    else
    if( function == p_R4Cplfep1IR )
    {
		pToFpga->addr = R4Cplfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep1IlhR )
    {
		pToFpga->addr = R4Cplfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep1IlhW )
    {
		pToFpga->addr = R4Cplfep1IlhWAdr;
    }
    else
    if( function == p_R4Cplfep1IllR )
    {
		pToFpga->addr = R4Cplfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep1IllW )
    {
		pToFpga->addr = R4Cplfep1IllWAdr;
    }
    else
    if( function == p_R4Cplfep1PerdR )
    {
		pToFpga->addr = R4Cplfep1PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep1PerdW )
    {
		pToFpga->addr = R4Cplfep1PerdWAdr;
    }
    else
    if( function == p_R4Cplfep2IR )
    {
		pToFpga->addr = R4Cplfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep2IlhR )
    {
		pToFpga->addr = R4Cplfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep2IlhW )
    {
		pToFpga->addr = R4Cplfep2IlhWAdr;
    }
    else
    if( function == p_R4Cplfep2IllR )
    {
		pToFpga->addr = R4Cplfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep2IllW )
    {
		pToFpga->addr = R4Cplfep2IllWAdr;
    }
    else
    if( function == p_R4Cplfep2PerdR )
    {
		pToFpga->addr = R4Cplfep2PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep2PerdW )
    {
		pToFpga->addr = R4Cplfep2PerdWAdr;
    }
    else
    if( function == p_R4Cplfep3IR )
    {
		pToFpga->addr = R4Cplfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep3IlhR )
    {
		pToFpga->addr = R4Cplfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep3IlhW )
    {
		pToFpga->addr = R4Cplfep3IlhWAdr;
    }
    else
    if( function == p_R4Cplfep3IllR )
    {
		pToFpga->addr = R4Cplfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep3IllW )
    {
		pToFpga->addr = R4Cplfep3IllWAdr;
    }
    else
    if( function == p_R4Cplfep3PerdR )
    {
		pToFpga->addr = R4Cplfep3PerdRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cplfep3PerdW )
    {
		pToFpga->addr = R4Cplfep3PerdWAdr;
    }
    else
    if( function == p_R4Cpltmp1IR )
    {
		pToFpga->addr = R4Cpltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cpltmp1IW )
    {
		pToFpga->addr = R4Cpltmp1IWAdr;
    }
    else
    if( function == p_R4Cpltmp1VR )
    {
		pToFpga->addr = R4Cpltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cpltmp1VlR )
    {
		pToFpga->addr = R4Cpltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cpltmp1VlW )
    {
		pToFpga->addr = R4Cpltmp1VlWAdr;
    }
    else
    if( function == p_R4Cpltmp2IR )
    {
		pToFpga->addr = R4Cpltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cpltmp2IW )
    {
		pToFpga->addr = R4Cpltmp2IWAdr;
    }
    else
    if( function == p_R4Cpltmp2VR )
    {
		pToFpga->addr = R4Cpltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cpltmp2VlR )
    {
		pToFpga->addr = R4Cpltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_R4Cpltmp2VlW )
    {
		pToFpga->addr = R4Cpltmp2VlWAdr;
    }
    else
    if( function == p_R4CwalR )
    {
		pToFpga->addr = R4CwalRAdr|flagReadMask;
    }
    else
    if( function == p_R4CwalW )
    {
		pToFpga->addr = R4CwalWAdr;
    }
    else
    if( function == p_R4CwapR )
    {
		pToFpga->addr = R4CwapRAdr|flagReadMask;
    }
    else
    if( function == p_R4CwapW )
    {
		pToFpga->addr = R4CwapWAdr;
    }
    else
    if( function == p_R4CwapsR )
    {
		pToFpga->addr = R4CwapsRAdr|flagReadMask;
    }
    else
    if( function == p_R4CwapsW )
    {
		pToFpga->addr = R4CwapsWAdr;
    }
    else
    if( function == p_R4CwavR )
    {
		pToFpga->addr = R4CwavRAdr|flagReadMask;
    }
    else
    if( function == p_R4CwwlR )
    {
		pToFpga->addr = R4CwwlRAdr|flagReadMask;
    }
    else
    if( function == p_R4CwwlW )
    {
		pToFpga->addr = R4CwwlWAdr;
    }
    else
    if( function == p_R4CwwtR )
    {
		pToFpga->addr = R4CwwtRAdr|flagReadMask;
    }
    else
    if( function == p_R4StmpiR )
    {
		pToFpga->addr = R4StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R4StmpiW )
    {
		pToFpga->addr = R4StmpiWAdr;
    }
    else
    if( function == p_R4StmpvR )
    {
		pToFpga->addr = R4StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_R4StmpvlR )
    {
		pToFpga->addr = R4StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_R4StmpvlW )
    {
		pToFpga->addr = R4StmpvlWAdr;
    }
    else
    if( function == p_R5StmpiR )
    {
		pToFpga->addr = R5StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R5StmpiW )
    {
		pToFpga->addr = R5StmpiWAdr;
    }
    else
    if( function == p_R5StmpvR )
    {
		pToFpga->addr = R5StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_R6StmpiR )
    {
		pToFpga->addr = R6StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R6StmpiW )
    {
		pToFpga->addr = R6StmpiWAdr;
    }
    else
    if( function == p_R6StmpvR )
    {
		pToFpga->addr = R6StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_R7StmpiR )
    {
		pToFpga->addr = R7StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R7StmpiW )
    {
		pToFpga->addr = R7StmpiWAdr;
    }
    else
    if( function == p_R7StmpvR )
    {
		pToFpga->addr = R7StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_R8StmpiR )
    {
		pToFpga->addr = R8StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_R8StmpiW )
    {
		pToFpga->addr = R8StmpiWAdr;
    }
    else
    if( function == p_R8StmpvR )
    {
		pToFpga->addr = R8StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_RxatfltR )
    {
		pToFpga->addr = RxatfltRAdr|flagReadMask;
    }
    else
    if( function == p_RxatfltW )
    {
		pToFpga->addr = RxatfltWAdr;
    }
    else
    if( function == p_RxcienR )
    {
		pToFpga->addr = RxcienRAdr|flagReadMask;
    }
    else
    if( function == p_RxciencR )
    {
		pToFpga->addr = RxciencRAdr|flagReadMask;
    }
    else
    if( function == p_RxciencW )
    {
		pToFpga->addr = RxciencWAdr;
    }
    else
    if( function == p_RxcienmR )
    {
		pToFpga->addr = RxcienmRAdr|flagReadMask;
    }
    else
    if( function == p_RxcienmW )
    {
		pToFpga->addr = RxcienmWAdr;
    }
    else
    if( function == p_RxcplfepfcR )
    {
		pToFpga->addr = RxcplfepfcRAdr|flagReadMask;
    }
    else
    if( function == p_RxcplfepfcW )
    {
		pToFpga->addr = RxcplfepfcWAdr;
    }
    else
    if( function == p_RxcplfepfsR )
    {
		pToFpga->addr = RxcplfepfsRAdr|flagReadMask;
    }
    else
    if( function == p_RxcplfeplsR )
    {
		pToFpga->addr = RxcplfeplsRAdr|flagReadMask;
    }
    else
    if( function == p_RxcplfepmR )
    {
		pToFpga->addr = RxcplfepmRAdr|flagReadMask;
    }
    else
    if( function == p_RxcplfepmW )
    {
		pToFpga->addr = RxcplfepmWAdr;
    }
    else
    if( function == p_RxcpltmpfcR )
    {
		pToFpga->addr = RxcpltmpfcRAdr|flagReadMask;
    }
    else
    if( function == p_RxcpltmpfcW )
    {
		pToFpga->addr = RxcpltmpfcWAdr;
    }
    else
    if( function == p_RxcpltmplsR )
    {
		pToFpga->addr = RxcpltmplsRAdr|flagReadMask;
    }
    else
    if( function == p_RxcpltmpmR )
    {
		pToFpga->addr = RxcpltmpmRAdr|flagReadMask;
    }
    else
    if( function == p_RxcpltmpmW )
    {
		pToFpga->addr = RxcpltmpmWAdr;
    }
    else
    if( function == p_RxcvfR )
    {
		pToFpga->addr = RxcvfRAdr|flagReadMask;
    }
    else
    if( function == p_RxcvfcR )
    {
		pToFpga->addr = RxcvfcRAdr|flagReadMask;
    }
    else
    if( function == p_RxcvfcW )
    {
		pToFpga->addr = RxcvfcWAdr;
    }
    else
    if( function == p_RxcvfmR )
    {
		pToFpga->addr = RxcvfmRAdr|flagReadMask;
    }
    else
    if( function == p_RxcvfmW )
    {
		pToFpga->addr = RxcvfmWAdr;
    }
    else
    if( function == p_RxcwadR )
    {
		pToFpga->addr = RxcwadRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwafcR )
    {
		pToFpga->addr = RxcwafcRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwafcW )
    {
		pToFpga->addr = RxcwafcWAdr;
    }
    else
    if( function == p_RxcwamR )
    {
		pToFpga->addr = RxcwamRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwamW )
    {
		pToFpga->addr = RxcwamWAdr;
    }
    else
    if( function == p_RxcwatR )
    {
		pToFpga->addr = RxcwatRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwatW )
    {
		pToFpga->addr = RxcwatWAdr;
    }
    else
    if( function == p_RxcwwdR )
    {
		pToFpga->addr = RxcwwdRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwwfcR )
    {
		pToFpga->addr = RxcwwfcRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwwfcW )
    {
		pToFpga->addr = RxcwwfcWAdr;
    }
    else
    if( function == p_RxcwwmR )
    {
		pToFpga->addr = RxcwwmRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwwmW )
    {
		pToFpga->addr = RxcwwmWAdr;
    }
    else
    if( function == p_RxcwwtsR )
    {
		pToFpga->addr = RxcwwtsRAdr|flagReadMask;
    }
    else
    if( function == p_RxcwwtsW )
    {
		pToFpga->addr = RxcwwtsWAdr;
    }
    else
    if( function == p_RxffsdR )
    {
		pToFpga->addr = RxffsdRAdr|flagReadMask;
    }
    else
    if( function == p_RxffsdcR )
    {
		pToFpga->addr = RxffsdcRAdr|flagReadMask;
    }
    else
    if( function == p_RxffsdcW )
    {
		pToFpga->addr = RxffsdcWAdr;
    }
    else
    if( function == p_RxffsdmR )
    {
		pToFpga->addr = RxffsdmRAdr|flagReadMask;
    }
    else
    if( function == p_RxffsdmW )
    {
		pToFpga->addr = RxffsdmWAdr;
    }
    else
    if( function == p_RxictlR )
    {
		pToFpga->addr = RxictlRAdr|flagReadMask;
    }
    else
    if( function == p_RxictlW )
    {
		pToFpga->addr = RxictlWAdr;
    }
    else
    if( function == p_RxistatR )
    {
		pToFpga->addr = RxistatRAdr|flagReadMask;
    }
    else
    if( function == p_RxiverR )
    {
		pToFpga->addr = RxiverRAdr|flagReadMask;
    }
    else
    if( function == p_RxstmpfcR )
    {
		pToFpga->addr = RxstmpfcRAdr|flagReadMask;
    }
    else
    if( function == p_RxstmpfcW )
    {
		pToFpga->addr = RxstmpfcWAdr;
    }
    else
    if( function == p_RxstmplsR )
    {
		pToFpga->addr = RxstmplsRAdr|flagReadMask;
    }
    else
    if( function == p_RxstmpmR )
    {
		pToFpga->addr = RxstmpmRAdr|flagReadMask;
    }
    else
    if( function == p_RxstmpmW )
    {
		pToFpga->addr = RxstmpmWAdr;
    }
    else
    	status = asynError;

    return status;
}

/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfINTDriver::processRegReadback(const FpgaReg *pFromFpga, bool &waveIsReady)
{
	unsigned int i;
	asynStatus status = asynSuccess;
	assert(pFromFpga->addr&flagReadMask); // This function is only for read registers
	epicsInt32 errorCount;
	int32_t signExtBits = 0;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
	break;

    case R1CwavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1CwavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwavRString, (unsigned ) pFromFpga->data);
	break;

    case R2CwavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2CwavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwavRString, (unsigned ) pFromFpga->data);
	break;

    case R3CwavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3CwavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwavRString, (unsigned ) pFromFpga->data);
	break;

    case R4CwavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4CwavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwavRString, (unsigned ) pFromFpga->data);
	break;

    case R1CwapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1CwapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwapsRString, (unsigned ) pFromFpga->data);
	break;

    case R2CwapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2CwapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwapsRString, (unsigned ) pFromFpga->data);
	break;

    case R3CwapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3CwapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwapsRString, (unsigned ) pFromFpga->data);
	break;

    case R4CwapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4CwapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwapsRString, (unsigned ) pFromFpga->data);
	break;

    case R1CwalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1CwalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwalRString, (unsigned ) pFromFpga->data);
	break;

    case R2CwalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2CwalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwalRString, (unsigned ) pFromFpga->data);
	break;

    case R3CwalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3CwalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwalRString, (unsigned ) pFromFpga->data);
	break;

    case R4CwalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4CwalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwalRString, (unsigned ) pFromFpga->data);
	break;

    case R1CwapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1CwapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwapRString, (unsigned ) pFromFpga->data);
	break;

    case R2CwapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2CwapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwapRString, (unsigned ) pFromFpga->data);
	break;

    case R3CwapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3CwapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwapRString, (unsigned ) pFromFpga->data);
	break;

    case R4CwapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4CwapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwapRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwadRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwadR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwadRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwamRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwamR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwamRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwatRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwatR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwatRString, (unsigned ) pFromFpga->data);
	break;

    case RxatfltRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxatfltR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxatfltRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwafcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwafcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwafcRString, (unsigned ) pFromFpga->data);
	break;

    case R1CwwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1CwwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwwtRString, (unsigned ) pFromFpga->data);
	break;

    case R2CwwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2CwwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwwtRString, (unsigned ) pFromFpga->data);
	break;

    case R3CwwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3CwwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwwtRString, (unsigned ) pFromFpga->data);
	break;

    case R4CwwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4CwwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwwtRString, (unsigned ) pFromFpga->data);
	break;

    case R1CwwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1CwwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwwlRString, (unsigned ) pFromFpga->data);
	break;

    case R2CwwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2CwwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwwlRString, (unsigned ) pFromFpga->data);
	break;

    case R3CwwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3CwwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwwlRString, (unsigned ) pFromFpga->data);
	break;

    case R4CwwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4CwwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwwlRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwwdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwwdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwdRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwwtsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwwtsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwtsRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwwmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwwmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwmRString, (unsigned ) pFromFpga->data);
	break;

    case RxcwwfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcwwfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwfcRString, (unsigned ) pFromFpga->data);
	break;

    case R1StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R2StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R3StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R4StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R1StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case R2StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case R3StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case R4StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case R1StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case R2StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case R3StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case R4StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case RxstmplsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxstmplsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxstmplsRString, (unsigned ) pFromFpga->data);
	break;

    case RxstmpmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxstmpmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxstmpmRString, (unsigned ) pFromFpga->data);
	break;

    case RxstmpfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxstmpfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxstmpfcRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cpltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cpltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cpltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cpltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cpltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cpltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cpltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cpltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cpltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cpltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cpltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cpltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cpltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cpltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cpltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cpltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cpltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cpltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cpltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cpltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cpltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cpltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cpltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cpltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cpltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cpltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cpltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cpltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cpltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cpltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cpltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cpltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cpltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cpltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cpltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cpltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cpltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cpltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cpltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cpltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cpltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cpltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cpltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cpltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cpltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cpltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cpltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cpltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case RxcpltmplsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcpltmplsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcpltmplsRString, (unsigned ) pFromFpga->data);
	break;

    case RxcpltmpmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcpltmpmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcpltmpmRString, (unsigned ) pFromFpga->data);
	break;

    case RxcpltmpfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcpltmpfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcpltmpfcRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case RxcplfepmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcplfepmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfepmRString, (unsigned ) pFromFpga->data);
	break;

    case RxcplfeplsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcplfeplsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfeplsRString, (unsigned ) pFromFpga->data);
	break;

    case RxcplfepfsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcplfepfsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfepfsRString, (unsigned ) pFromFpga->data);
	break;

    case RxcplfepfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcplfepfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfepfcRString, (unsigned ) pFromFpga->data);
	break;

    case RxcvfRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcvfR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcvfRString, (unsigned ) pFromFpga->data);
	break;

    case RxcvfmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcvfmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcvfmRString, (unsigned ) pFromFpga->data);
	break;

    case RxcvfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcvfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcvfcRString, (unsigned ) pFromFpga->data);
	break;

    case RxcienRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcienR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcienRString, (unsigned ) pFromFpga->data);
	break;

    case RxcienmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxcienmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcienmRString, (unsigned ) pFromFpga->data);
	break;

    case RxciencRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxciencR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxciencRString, (unsigned ) pFromFpga->data);
	break;

    case RxffsdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxffsdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxffsdRString, (unsigned ) pFromFpga->data);
	break;

    case RxffsdmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxffsdmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxffsdmRString, (unsigned ) pFromFpga->data);
	break;

    case RxffsdcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxffsdcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxffsdcRString, (unsigned ) pFromFpga->data);
	break;

    case RxistatRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxistatR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxistatRString, (unsigned ) pFromFpga->data);
	break;

    case RxictlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxictlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxictlRString, (unsigned ) pFromFpga->data);
	break;

    case RxiverRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RxiverR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxiverRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep1PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep1PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep2PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep2PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R1Cplfep3PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R1Cplfep3PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep1PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep1PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep2PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep2PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R2Cplfep3PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R2Cplfep3PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep1PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep1PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep2PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep2PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R3Cplfep3PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R3Cplfep3PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep1PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep1PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep2PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep2PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R4Cplfep3PerdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R4Cplfep3PerdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3PerdRString, (unsigned ) pFromFpga->data);
	break;

    case R5StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R5StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R5StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R6StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R6StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R6StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R7StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R7StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R7StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R8StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R8StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R8StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case R5StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R5StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R5StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case R6StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R6StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R6StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case R7StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R7StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R7StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case R8StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_R8StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R8StmpvRString, (unsigned ) pFromFpga->data);
		break;

	default:
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		break;
    }

    return status;
}


/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfINTDriver::processRegWriteResponse(const FpgaReg *pFromFpga)
{
	asynStatus status = asynSuccess;
	epicsInt32 valueSet[maxMsgSize/sizeof(FpgaReg)]; // Put the value sent to the FPGA here for comparison
	epicsInt32 errorCount;
//  variables that may be useful for checking array data
//	asynUser *pAsynArrayUser;
//	unsigned int i;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case R1CwapsWAdr:
		status = (asynStatus) getIntegerParam(p_R1CwapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1CwapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2CwapsWAdr:
		status = (asynStatus) getIntegerParam(p_R2CwapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2CwapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3CwapsWAdr:
		status = (asynStatus) getIntegerParam(p_R3CwapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3CwapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4CwapsWAdr:
		status = (asynStatus) getIntegerParam(p_R4CwapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4CwapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1CwalWAdr:
		status = (asynStatus) getIntegerParam(p_R1CwalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1CwalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2CwalWAdr:
		status = (asynStatus) getIntegerParam(p_R2CwalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2CwalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3CwalWAdr:
		status = (asynStatus) getIntegerParam(p_R3CwalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3CwalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4CwalWAdr:
		status = (asynStatus) getIntegerParam(p_R4CwalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4CwalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1CwapWAdr:
		status = (asynStatus) getIntegerParam(p_R1CwapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1CwapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2CwapWAdr:
		status = (asynStatus) getIntegerParam(p_R2CwapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2CwapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3CwapWAdr:
		status = (asynStatus) getIntegerParam(p_R3CwapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3CwapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4CwapWAdr:
		status = (asynStatus) getIntegerParam(p_R4CwapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4CwapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcwamWAdr:
		status = (asynStatus) getIntegerParam(p_RxcwamW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwamWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwamWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcwamW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcwatWAdr:
		status = (asynStatus) getIntegerParam(p_RxcwatW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwatWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwatWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcwatW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxatfltWAdr:
		status = (asynStatus) getIntegerParam(p_RxatfltW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxatfltWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxatfltWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxatfltW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcwafcWAdr:
		status = (asynStatus) getIntegerParam(p_RxcwafcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwafcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwafcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcwafcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1CwwlWAdr:
		status = (asynStatus) getIntegerParam(p_R1CwwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1CwwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1CwwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2CwwlWAdr:
		status = (asynStatus) getIntegerParam(p_R2CwwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2CwwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2CwwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3CwwlWAdr:
		status = (asynStatus) getIntegerParam(p_R3CwwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3CwwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3CwwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4CwwlWAdr:
		status = (asynStatus) getIntegerParam(p_R4CwwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4CwwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4CwwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcwwtsWAdr:
		status = (asynStatus) getIntegerParam(p_RxcwwtsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwtsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwtsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcwwtsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcwwmWAdr:
		status = (asynStatus) getIntegerParam(p_RxcwwmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcwwmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcwwfcWAdr:
		status = (asynStatus) getIntegerParam(p_RxcwwfcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwfcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcwwfcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcwwfcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R1StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R2StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R3StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R4StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_R1StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_R2StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_R3StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_R4StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxstmpmWAdr:
		status = (asynStatus) getIntegerParam(p_RxstmpmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxstmpmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxstmpmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxstmpmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxstmpfcWAdr:
		status = (asynStatus) getIntegerParam(p_RxstmpfcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxstmpfcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxstmpfcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxstmpfcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cpltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cpltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cpltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cpltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cpltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cpltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cpltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cpltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cpltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cpltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cpltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cpltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cpltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cpltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cpltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cpltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cpltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cpltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cpltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cpltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cpltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cpltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cpltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cpltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cpltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cpltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cpltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cpltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cpltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cpltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cpltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cpltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cpltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cpltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cpltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cpltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cpltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cpltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cpltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cpltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cpltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cpltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cpltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cpltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cpltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cpltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cpltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cpltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cpltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cpltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cpltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cpltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcpltmpmWAdr:
		status = (asynStatus) getIntegerParam(p_RxcpltmpmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcpltmpmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcpltmpmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcpltmpmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcpltmpfcWAdr:
		status = (asynStatus) getIntegerParam(p_RxcpltmpfcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcpltmpfcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcpltmpfcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcpltmpfcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcplfepmWAdr:
		status = (asynStatus) getIntegerParam(p_RxcplfepmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfepmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfepmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcplfepmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcplfepfcWAdr:
		status = (asynStatus) getIntegerParam(p_RxcplfepfcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfepfcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcplfepfcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcplfepfcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcvfmWAdr:
		status = (asynStatus) getIntegerParam(p_RxcvfmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcvfmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcvfmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcvfmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcvfcWAdr:
		status = (asynStatus) getIntegerParam(p_RxcvfcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcvfcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcvfcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcvfcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxcienmWAdr:
		status = (asynStatus) getIntegerParam(p_RxcienmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxcienmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxcienmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxcienmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxciencWAdr:
		status = (asynStatus) getIntegerParam(p_RxciencW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxciencWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxciencWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxciencW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxffsdmWAdr:
		status = (asynStatus) getIntegerParam(p_RxffsdmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxffsdmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxffsdmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxffsdmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxffsdcWAdr:
		status = (asynStatus) getIntegerParam(p_RxffsdcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxffsdcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxffsdcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxffsdcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RxictlWAdr:
		status = (asynStatus) getIntegerParam(p_RxictlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RxictlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RxictlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_RxictlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep1PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep1PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep1PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep1PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep2PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep2PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep2PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep2PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R1Cplfep3PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R1Cplfep3PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R1Cplfep3PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R1Cplfep3PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep1PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep1PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep1PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep1PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep2PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep2PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep2PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep2PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R2Cplfep3PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R2Cplfep3PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R2Cplfep3PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R2Cplfep3PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep1PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep1PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep1PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep1PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep2PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep2PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep2PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep2PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R3Cplfep3PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R3Cplfep3PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R3Cplfep3PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R3Cplfep3PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep1PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep1PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep1PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep1PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep2PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep2PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep2PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep2PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R4Cplfep3PerdWAdr:
		status = (asynStatus) getIntegerParam(p_R4Cplfep3PerdW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3PerdWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R4Cplfep3PerdWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R4Cplfep3PerdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R5StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R5StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R5StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R5StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R5StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R6StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R6StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R6StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R6StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R6StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R7StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R7StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R7StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R7StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R7StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case R8StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_R8StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				R8StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				R8StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_R8StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
	default:
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		break;
    }

	// TODO: handle arrays

    return status;
}



extern "C" {

/* Configuration routine.  Called directly, or from the iocsh function below */

/** EPICS iocsh callable function to call constructor for the scllrfINT class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asynIPport this will use to communicate */
int scllrfINTConfigure(const char *drvPortName, const char *netPortName)
{
	new scllrfINTDriver(drvPortName, netPortName);
	return asynSuccess;
}


/* EPICS iocsh shell commands */

static const iocshArg initArg0 = { "drvPortName",iocshArgString};
static const iocshArg initArg1 = { "IP port name",iocshArgString};
static const iocshArg * const initArgs[] = {&initArg0,
		&initArg1};
static const iocshFuncDef initFuncDef = {"scllrfINTConfigure",2,initArgs};
static void initCallFunc(const iocshArgBuf *args)
{
	scllrfINTConfigure(args[0].sval, args[1].sval);
}

void scllrfINTRegister(void)
{
	iocshRegister(&initFuncDef,initCallFunc);
}

epicsExportRegistrar(scllrfINTRegister);

}



