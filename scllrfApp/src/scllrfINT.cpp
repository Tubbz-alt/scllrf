/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : templateScllrfDriver.h
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Header defining register interface to scllrfINT, autogenerated from a python
 * dictionary.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/

#include "scllrfINT.h"
#include <asynOctetSyncIO.h>
#include <asynCommonSyncIO.h>
#include <limits>
#include <netinet/in.h>
#include <iostream>
using namespace std;
#include <math.h>

/** Constructor for the scllrfINT class.
 * Calls constructor for the asynPortDriver base class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] path The path to the peripherial as built by the builder api
 * \param[in] nelms The number of elements of this device (max addr)
 * \paarm[in] nEntries The number of asyn params to be created for each device
 *
 * */
scllrfINTDriver::scllrfINTDriver(const char *drvPortName, const char *netPortName)
: scllrfAsynPortDriver(drvPortName, netPortName,
		1, /* maxAddr, i.e. number of channels */
		NUM_SCLLRFINT_PARAMS)
{
	asynStatus status = asynSuccess;

    epicsThreadSleep(defaultPollPeriod);

    createParam(C1Plfep1IRString, asynParamInt32, &p_C1Plfep1IR);
    createParam(C1Plfep1IlhRString, asynParamInt32, &p_C1Plfep1IlhR);
    createParam(C1Plfep1IlhWString, asynParamInt32, &p_C1Plfep1IlhW);
    createParam(C1Plfep1IllRString, asynParamInt32, &p_C1Plfep1IllR);
    createParam(C1Plfep1IllWString, asynParamInt32, &p_C1Plfep1IllW);
    createParam(C1Plfep2IRString, asynParamInt32, &p_C1Plfep2IR);
    createParam(C1Plfep2IlhRString, asynParamInt32, &p_C1Plfep2IlhR);
    createParam(C1Plfep2IlhWString, asynParamInt32, &p_C1Plfep2IlhW);
    createParam(C1Plfep2IllRString, asynParamInt32, &p_C1Plfep2IllR);
    createParam(C1Plfep2IllWString, asynParamInt32, &p_C1Plfep2IllW);
    createParam(C1Plfep3IRString, asynParamInt32, &p_C1Plfep3IR);
    createParam(C1Plfep3IlhRString, asynParamInt32, &p_C1Plfep3IlhR);
    createParam(C1Plfep3IlhWString, asynParamInt32, &p_C1Plfep3IlhW);
    createParam(C1Plfep3IllRString, asynParamInt32, &p_C1Plfep3IllR);
    createParam(C1Plfep3IllWString, asynParamInt32, &p_C1Plfep3IllW);
    createParam(C1Pltmp1IRString, asynParamInt32, &p_C1Pltmp1IR);
    createParam(C1Pltmp1IWString, asynParamInt32, &p_C1Pltmp1IW);
    createParam(C1Pltmp1VRString, asynParamInt32, &p_C1Pltmp1VR);
    createParam(C1Pltmp1VlRString, asynParamInt32, &p_C1Pltmp1VlR);
    createParam(C1Pltmp1VlWString, asynParamInt32, &p_C1Pltmp1VlW);
    createParam(C1Pltmp2IRString, asynParamInt32, &p_C1Pltmp2IR);
    createParam(C1Pltmp2IWString, asynParamInt32, &p_C1Pltmp2IW);
    createParam(C1Pltmp2VRString, asynParamInt32, &p_C1Pltmp2VR);
    createParam(C1Pltmp2VlRString, asynParamInt32, &p_C1Pltmp2VlR);
    createParam(C1Pltmp2VlWString, asynParamInt32, &p_C1Pltmp2VlW);
    createParam(C1StmpiRString, asynParamInt32, &p_C1StmpiR);
    createParam(C1StmpiWString, asynParamInt32, &p_C1StmpiW);
    createParam(C1StmpvRString, asynParamInt32, &p_C1StmpvR);
    createParam(C1StmpvlRString, asynParamInt32, &p_C1StmpvlR);
    createParam(C1StmpvlWString, asynParamInt32, &p_C1StmpvlW);
    createParam(C1WalRString, asynParamInt32, &p_C1WalR);
    createParam(C1WalWString, asynParamInt32, &p_C1WalW);
    createParam(C1WapRString, asynParamInt32, &p_C1WapR);
    createParam(C1WapWString, asynParamInt32, &p_C1WapW);
    createParam(C1WapsRString, asynParamInt32, &p_C1WapsR);
    createParam(C1WapsWString, asynParamInt32, &p_C1WapsW);
    createParam(C1WavRString, asynParamInt32, &p_C1WavR);
    createParam(C1WwlRString, asynParamInt32, &p_C1WwlR);
    createParam(C1WwlWString, asynParamInt32, &p_C1WwlW);
    createParam(C1WwtRString, asynParamInt32, &p_C1WwtR);
    createParam(C2Plfep1IRString, asynParamInt32, &p_C2Plfep1IR);
    createParam(C2Plfep1IlhRString, asynParamInt32, &p_C2Plfep1IlhR);
    createParam(C2Plfep1IlhWString, asynParamInt32, &p_C2Plfep1IlhW);
    createParam(C2Plfep1IllRString, asynParamInt32, &p_C2Plfep1IllR);
    createParam(C2Plfep1IllWString, asynParamInt32, &p_C2Plfep1IllW);
    createParam(C2Plfep2IRString, asynParamInt32, &p_C2Plfep2IR);
    createParam(C2Plfep2IlhRString, asynParamInt32, &p_C2Plfep2IlhR);
    createParam(C2Plfep2IlhWString, asynParamInt32, &p_C2Plfep2IlhW);
    createParam(C2Plfep2IllRString, asynParamInt32, &p_C2Plfep2IllR);
    createParam(C2Plfep2IllWString, asynParamInt32, &p_C2Plfep2IllW);
    createParam(C2Plfep3IRString, asynParamInt32, &p_C2Plfep3IR);
    createParam(C2Plfep3IlhRString, asynParamInt32, &p_C2Plfep3IlhR);
    createParam(C2Plfep3IlhWString, asynParamInt32, &p_C2Plfep3IlhW);
    createParam(C2Plfep3IllRString, asynParamInt32, &p_C2Plfep3IllR);
    createParam(C2Plfep3IllWString, asynParamInt32, &p_C2Plfep3IllW);
    createParam(C2Pltmp1IRString, asynParamInt32, &p_C2Pltmp1IR);
    createParam(C2Pltmp1IWString, asynParamInt32, &p_C2Pltmp1IW);
    createParam(C2Pltmp1VRString, asynParamInt32, &p_C2Pltmp1VR);
    createParam(C2Pltmp1VlRString, asynParamInt32, &p_C2Pltmp1VlR);
    createParam(C2Pltmp1VlWString, asynParamInt32, &p_C2Pltmp1VlW);
    createParam(C2Pltmp2IRString, asynParamInt32, &p_C2Pltmp2IR);
    createParam(C2Pltmp2IWString, asynParamInt32, &p_C2Pltmp2IW);
    createParam(C2Pltmp2VRString, asynParamInt32, &p_C2Pltmp2VR);
    createParam(C2Pltmp2VlRString, asynParamInt32, &p_C2Pltmp2VlR);
    createParam(C2Pltmp2VlWString, asynParamInt32, &p_C2Pltmp2VlW);
    createParam(C2StmpiRString, asynParamInt32, &p_C2StmpiR);
    createParam(C2StmpiWString, asynParamInt32, &p_C2StmpiW);
    createParam(C2StmpvRString, asynParamInt32, &p_C2StmpvR);
    createParam(C2StmpvlRString, asynParamInt32, &p_C2StmpvlR);
    createParam(C2StmpvlWString, asynParamInt32, &p_C2StmpvlW);
    createParam(C2WalRString, asynParamInt32, &p_C2WalR);
    createParam(C2WalWString, asynParamInt32, &p_C2WalW);
    createParam(C2WapRString, asynParamInt32, &p_C2WapR);
    createParam(C2WapWString, asynParamInt32, &p_C2WapW);
    createParam(C2WapsRString, asynParamInt32, &p_C2WapsR);
    createParam(C2WapsWString, asynParamInt32, &p_C2WapsW);
    createParam(C2WavRString, asynParamInt32, &p_C2WavR);
    createParam(C2WwlRString, asynParamInt32, &p_C2WwlR);
    createParam(C2WwlWString, asynParamInt32, &p_C2WwlW);
    createParam(C2WwtRString, asynParamInt32, &p_C2WwtR);
    createParam(C3Plfep1IRString, asynParamInt32, &p_C3Plfep1IR);
    createParam(C3Plfep1IlhRString, asynParamInt32, &p_C3Plfep1IlhR);
    createParam(C3Plfep1IlhWString, asynParamInt32, &p_C3Plfep1IlhW);
    createParam(C3Plfep1IllRString, asynParamInt32, &p_C3Plfep1IllR);
    createParam(C3Plfep1IllWString, asynParamInt32, &p_C3Plfep1IllW);
    createParam(C3Plfep2IRString, asynParamInt32, &p_C3Plfep2IR);
    createParam(C3Plfep2IlhRString, asynParamInt32, &p_C3Plfep2IlhR);
    createParam(C3Plfep2IlhWString, asynParamInt32, &p_C3Plfep2IlhW);
    createParam(C3Plfep2IllRString, asynParamInt32, &p_C3Plfep2IllR);
    createParam(C3Plfep2IllWString, asynParamInt32, &p_C3Plfep2IllW);
    createParam(C3Plfep3IRString, asynParamInt32, &p_C3Plfep3IR);
    createParam(C3Plfep3IlhRString, asynParamInt32, &p_C3Plfep3IlhR);
    createParam(C3Plfep3IlhWString, asynParamInt32, &p_C3Plfep3IlhW);
    createParam(C3Plfep3IllRString, asynParamInt32, &p_C3Plfep3IllR);
    createParam(C3Plfep3IllWString, asynParamInt32, &p_C3Plfep3IllW);
    createParam(C3Pltmp1IRString, asynParamInt32, &p_C3Pltmp1IR);
    createParam(C3Pltmp1IWString, asynParamInt32, &p_C3Pltmp1IW);
    createParam(C3Pltmp1VRString, asynParamInt32, &p_C3Pltmp1VR);
    createParam(C3Pltmp1VlRString, asynParamInt32, &p_C3Pltmp1VlR);
    createParam(C3Pltmp1VlWString, asynParamInt32, &p_C3Pltmp1VlW);
    createParam(C3Pltmp2IRString, asynParamInt32, &p_C3Pltmp2IR);
    createParam(C3Pltmp2IWString, asynParamInt32, &p_C3Pltmp2IW);
    createParam(C3Pltmp2VRString, asynParamInt32, &p_C3Pltmp2VR);
    createParam(C3Pltmp2VlRString, asynParamInt32, &p_C3Pltmp2VlR);
    createParam(C3Pltmp2VlWString, asynParamInt32, &p_C3Pltmp2VlW);
    createParam(C3StmpiRString, asynParamInt32, &p_C3StmpiR);
    createParam(C3StmpiWString, asynParamInt32, &p_C3StmpiW);
    createParam(C3StmpvRString, asynParamInt32, &p_C3StmpvR);
    createParam(C3StmpvlRString, asynParamInt32, &p_C3StmpvlR);
    createParam(C3StmpvlWString, asynParamInt32, &p_C3StmpvlW);
    createParam(C3WalRString, asynParamInt32, &p_C3WalR);
    createParam(C3WalWString, asynParamInt32, &p_C3WalW);
    createParam(C3WapRString, asynParamInt32, &p_C3WapR);
    createParam(C3WapWString, asynParamInt32, &p_C3WapW);
    createParam(C3WapsRString, asynParamInt32, &p_C3WapsR);
    createParam(C3WapsWString, asynParamInt32, &p_C3WapsW);
    createParam(C3WavRString, asynParamInt32, &p_C3WavR);
    createParam(C3WwlRString, asynParamInt32, &p_C3WwlR);
    createParam(C3WwlWString, asynParamInt32, &p_C3WwlW);
    createParam(C3WwtRString, asynParamInt32, &p_C3WwtR);
    createParam(C4Plfep1IRString, asynParamInt32, &p_C4Plfep1IR);
    createParam(C4Plfep1IlhRString, asynParamInt32, &p_C4Plfep1IlhR);
    createParam(C4Plfep1IlhWString, asynParamInt32, &p_C4Plfep1IlhW);
    createParam(C4Plfep1IllRString, asynParamInt32, &p_C4Plfep1IllR);
    createParam(C4Plfep1IllWString, asynParamInt32, &p_C4Plfep1IllW);
    createParam(C4Plfep2IRString, asynParamInt32, &p_C4Plfep2IR);
    createParam(C4Plfep2IlhRString, asynParamInt32, &p_C4Plfep2IlhR);
    createParam(C4Plfep2IlhWString, asynParamInt32, &p_C4Plfep2IlhW);
    createParam(C4Plfep2IllRString, asynParamInt32, &p_C4Plfep2IllR);
    createParam(C4Plfep2IllWString, asynParamInt32, &p_C4Plfep2IllW);
    createParam(C4Plfep3IRString, asynParamInt32, &p_C4Plfep3IR);
    createParam(C4Plfep3IlhRString, asynParamInt32, &p_C4Plfep3IlhR);
    createParam(C4Plfep3IlhWString, asynParamInt32, &p_C4Plfep3IlhW);
    createParam(C4Plfep3IllRString, asynParamInt32, &p_C4Plfep3IllR);
    createParam(C4Plfep3IllWString, asynParamInt32, &p_C4Plfep3IllW);
    createParam(C4Pltmp1IRString, asynParamInt32, &p_C4Pltmp1IR);
    createParam(C4Pltmp1IWString, asynParamInt32, &p_C4Pltmp1IW);
    createParam(C4Pltmp1VRString, asynParamInt32, &p_C4Pltmp1VR);
    createParam(C4Pltmp1VlRString, asynParamInt32, &p_C4Pltmp1VlR);
    createParam(C4Pltmp1VlWString, asynParamInt32, &p_C4Pltmp1VlW);
    createParam(C4Pltmp2IRString, asynParamInt32, &p_C4Pltmp2IR);
    createParam(C4Pltmp2IWString, asynParamInt32, &p_C4Pltmp2IW);
    createParam(C4Pltmp2VRString, asynParamInt32, &p_C4Pltmp2VR);
    createParam(C4Pltmp2VlRString, asynParamInt32, &p_C4Pltmp2VlR);
    createParam(C4Pltmp2VlWString, asynParamInt32, &p_C4Pltmp2VlW);
    createParam(C4StmpiRString, asynParamInt32, &p_C4StmpiR);
    createParam(C4StmpiWString, asynParamInt32, &p_C4StmpiW);
    createParam(C4StmpvRString, asynParamInt32, &p_C4StmpvR);
    createParam(C4StmpvlRString, asynParamInt32, &p_C4StmpvlR);
    createParam(C4StmpvlWString, asynParamInt32, &p_C4StmpvlW);
    createParam(C4WalRString, asynParamInt32, &p_C4WalR);
    createParam(C4WalWString, asynParamInt32, &p_C4WalW);
    createParam(C4WapRString, asynParamInt32, &p_C4WapR);
    createParam(C4WapWString, asynParamInt32, &p_C4WapW);
    createParam(C4WapsRString, asynParamInt32, &p_C4WapsR);
    createParam(C4WapsWString, asynParamInt32, &p_C4WapsW);
    createParam(C4WavRString, asynParamInt32, &p_C4WavR);
    createParam(C4WwlRString, asynParamInt32, &p_C4WwlR);
    createParam(C4WwlWString, asynParamInt32, &p_C4WwlW);
    createParam(C4WwtRString, asynParamInt32, &p_C4WwtR);
    createParam(XatfltRString, asynParamInt32, &p_XatfltR);
	createParam(XatfltBit0RString, asynParamUInt32Digital, &p_XatfltBit0R);
    createParam(XcienRString, asynParamInt32, &p_XcienR);
	createParam(XcienBit0RString, asynParamUInt32Digital, &p_XcienBit0R);
    createParam(XciencRString, asynParamInt32, &p_XciencR);
	createParam(XciencBit0RString, asynParamUInt32Digital, &p_XciencBit0R);
    createParam(XciencWString, asynParamInt32, &p_XciencW);
    createParam(XciencBit0WString, asynParamUInt32Digital, &p_XciencBit0W);
    createParam(XcienmRString, asynParamInt32, &p_XcienmR);
	createParam(XcienmBit0RString, asynParamUInt32Digital, &p_XcienmBit0R);
    createParam(XcienmWString, asynParamInt32, &p_XcienmW);
    createParam(XcienmBit0WString, asynParamUInt32Digital, &p_XcienmBit0W);
    createParam(XcplfepfcRString, asynParamInt32, &p_XcplfepfcR);
	createParam(XcplfepfcBit0RString, asynParamUInt32Digital, &p_XcplfepfcBit0R);
    createParam(XcplfeplsRString, asynParamInt32, &p_XcplfeplsR);
	createParam(XcplfeplsBit0RString, asynParamUInt32Digital, &p_XcplfeplsBit0R);
    createParam(XcpltmplsRString, asynParamInt32, &p_XcpltmplsR);
	createParam(XcpltmplsBit0RString, asynParamUInt32Digital, &p_XcpltmplsBit0R);
    createParam(XcvfRString, asynParamInt32, &p_XcvfR);
	createParam(XcvfBit0RString, asynParamUInt32Digital, &p_XcvfBit0R);
    createParam(XcvfcRString, asynParamInt32, &p_XcvfcR);
	createParam(XcvfcBit0RString, asynParamUInt32Digital, &p_XcvfcBit0R);
    createParam(XcvfcWString, asynParamInt32, &p_XcvfcW);
    createParam(XcvfcBit0WString, asynParamUInt32Digital, &p_XcvfcBit0W);
    createParam(XcvfmRString, asynParamInt32, &p_XcvfmR);
	createParam(XcvfmBit0RString, asynParamUInt32Digital, &p_XcvfmBit0R);
    createParam(XcvfmWString, asynParamInt32, &p_XcvfmW);
    createParam(XcvfmBit0WString, asynParamUInt32Digital, &p_XcvfmBit0W);
    createParam(XcwadRString, asynParamInt32, &p_XcwadR);
	createParam(XcwadBit0RString, asynParamUInt32Digital, &p_XcwadBit0R);
    createParam(XcwafcRString, asynParamInt32, &p_XcwafcR);
	createParam(XcwafcBit0RString, asynParamUInt32Digital, &p_XcwafcBit0R);
    createParam(XcwafcWString, asynParamInt32, &p_XcwafcW);
    createParam(XcwafcBit0WString, asynParamUInt32Digital, &p_XcwafcBit0W);
    createParam(XcwamRString, asynParamInt32, &p_XcwamR);
	createParam(XcwamBit0RString, asynParamUInt32Digital, &p_XcwamBit0R);
    createParam(XcwamWString, asynParamInt32, &p_XcwamW);
    createParam(XcwamBit0WString, asynParamUInt32Digital, &p_XcwamBit0W);
    createParam(XcwatRString, asynParamInt32, &p_XcwatR);
	createParam(XcwatBit0RString, asynParamUInt32Digital, &p_XcwatBit0R);
    createParam(XcwatWString, asynParamInt32, &p_XcwatW);
    createParam(XcwatBit0WString, asynParamUInt32Digital, &p_XcwatBit0W);
    createParam(XcwwdRString, asynParamInt32, &p_XcwwdR);
	createParam(XcwwdBit0RString, asynParamUInt32Digital, &p_XcwwdBit0R);
    createParam(XcwwfcRString, asynParamInt32, &p_XcwwfcR);
	createParam(XcwwfcBit0RString, asynParamUInt32Digital, &p_XcwwfcBit0R);
    createParam(XcwwmRString, asynParamInt32, &p_XcwwmR);
	createParam(XcwwmBit0RString, asynParamUInt32Digital, &p_XcwwmBit0R);
    createParam(XcwwtsRString, asynParamInt32, &p_XcwwtsR);
	createParam(XcwwtsBit0RString, asynParamUInt32Digital, &p_XcwwtsBit0R);
    createParam(XcwwtsWString, asynParamInt32, &p_XcwwtsW);
    createParam(XcwwtsBit0WString, asynParamUInt32Digital, &p_XcwwtsBit0W);
    createParam(XffsdRString, asynParamInt32, &p_XffsdR);
	createParam(XffsdBit0RString, asynParamUInt32Digital, &p_XffsdBit0R);
    createParam(XffsdcRString, asynParamInt32, &p_XffsdcR);
	createParam(XffsdcBit0RString, asynParamUInt32Digital, &p_XffsdcBit0R);
    createParam(XffsdcWString, asynParamInt32, &p_XffsdcW);
    createParam(XffsdcBit0WString, asynParamUInt32Digital, &p_XffsdcBit0W);
    createParam(XffsdmRString, asynParamInt32, &p_XffsdmR);
	createParam(XffsdmBit0RString, asynParamUInt32Digital, &p_XffsdmBit0R);
    createParam(XffsdmWString, asynParamInt32, &p_XffsdmW);
    createParam(XffsdmBit0WString, asynParamUInt32Digital, &p_XffsdmBit0W);
    createParam(XictlRString, asynParamInt32, &p_XictlR);
	createParam(XictlBit0RString, asynParamUInt32Digital, &p_XictlBit0R);
    createParam(XictlWString, asynParamInt32, &p_XictlW);
    createParam(XictlBit0WString, asynParamUInt32Digital, &p_XictlBit0W);
    createParam(XistatRString, asynParamInt32, &p_XistatR);
	createParam(XistatBit0RString, asynParamUInt32Digital, &p_XistatBit0R);
    createParam(XiverRString, asynParamInt32, &p_XiverR);
    createParam(XstmplsRString, asynParamInt32, &p_XstmplsR);
	createParam(XstmplsBit0RString, asynParamUInt32Digital, &p_XstmplsBit0R);

    // Message size is the number of read registers, plus 1 nonce for every 175 read registers
    PolledRegMsgSize_ = scllrfINTReadRegCount + (scllrfINTReadRegCount / 175) + 1;
	// A canned request to read all registers
    pPolledRegMsg_ = new FpgaReg[PolledRegMsgSize_]
	{
		{ 0, 0 },
		{ flagReadMask | C1WavRAdr, blankData },
		{ flagReadMask | C2WavRAdr, blankData },
		{ flagReadMask | C3WavRAdr, blankData },
		{ flagReadMask | C4WavRAdr, blankData },
		{ flagReadMask | C1WapsRAdr, blankData },
		{ flagReadMask | C2WapsRAdr, blankData },
		{ flagReadMask | C3WapsRAdr, blankData },
		{ flagReadMask | C4WapsRAdr, blankData },
		{ flagReadMask | C1WalRAdr, blankData },
		{ flagReadMask | C2WalRAdr, blankData },
		{ flagReadMask | C3WalRAdr, blankData },
		{ flagReadMask | C4WalRAdr, blankData },
		{ flagReadMask | C1WapRAdr, blankData },
		{ flagReadMask | C2WapRAdr, blankData },
		{ flagReadMask | C3WapRAdr, blankData },
		{ flagReadMask | C4WapRAdr, blankData },
		{ flagReadMask | XcwadRAdr, blankData },
		{ flagReadMask | XcwamRAdr, blankData },
		{ flagReadMask | XcwatRAdr, blankData },
		{ flagReadMask | XatfltRAdr, blankData },
		{ flagReadMask | XcwafcRAdr, blankData },
		{ flagReadMask | C1WwtRAdr, blankData },
		{ flagReadMask | C2WwtRAdr, blankData },
		{ flagReadMask | C3WwtRAdr, blankData },
		{ flagReadMask | C4WwtRAdr, blankData },
		{ flagReadMask | C1WwlRAdr, blankData },
		{ flagReadMask | C2WwlRAdr, blankData },
		{ flagReadMask | C3WwlRAdr, blankData },
		{ flagReadMask | C4WwlRAdr, blankData },
		{ flagReadMask | XcwwdRAdr, blankData },
		{ flagReadMask | XcwwtsRAdr, blankData },
		{ flagReadMask | XcwwmRAdr, blankData },
		{ flagReadMask | XcwwfcRAdr, blankData },
		{ flagReadMask | C1StmpiRAdr, blankData },
		{ flagReadMask | C2StmpiRAdr, blankData },
		{ flagReadMask | C3StmpiRAdr, blankData },
		{ flagReadMask | C4StmpiRAdr, blankData },
		{ flagReadMask | C1StmpvRAdr, blankData },
		{ flagReadMask | C2StmpvRAdr, blankData },
		{ flagReadMask | C3StmpvRAdr, blankData },
		{ flagReadMask | C4StmpvRAdr, blankData },
		{ flagReadMask | C1StmpvlRAdr, blankData },
		{ flagReadMask | C2StmpvlRAdr, blankData },
		{ flagReadMask | C3StmpvlRAdr, blankData },
		{ flagReadMask | C4StmpvlRAdr, blankData },
		{ flagReadMask | XstmplsRAdr, blankData },
		{ flagReadMask | C1Pltmp1IRAdr, blankData },
		{ flagReadMask | C1Pltmp2IRAdr, blankData },
		{ flagReadMask | C2Pltmp1IRAdr, blankData },
		{ flagReadMask | C2Pltmp2IRAdr, blankData },
		{ flagReadMask | C3Pltmp1IRAdr, blankData },
		{ flagReadMask | C3Pltmp2IRAdr, blankData },
		{ flagReadMask | C4Pltmp1IRAdr, blankData },
		{ flagReadMask | C4Pltmp2IRAdr, blankData },
		{ flagReadMask | C1Pltmp1VRAdr, blankData },
		{ flagReadMask | C1Pltmp2VRAdr, blankData },
		{ flagReadMask | C2Pltmp1VRAdr, blankData },
		{ flagReadMask | C2Pltmp2VRAdr, blankData },
		{ flagReadMask | C3Pltmp1VRAdr, blankData },
		{ flagReadMask | C3Pltmp2VRAdr, blankData },
		{ flagReadMask | C4Pltmp1VRAdr, blankData },
		{ flagReadMask | C4Pltmp2VRAdr, blankData },
		{ flagReadMask | C1Pltmp1VlRAdr, blankData },
		{ flagReadMask | C1Pltmp2VlRAdr, blankData },
		{ flagReadMask | C2Pltmp1VlRAdr, blankData },
		{ flagReadMask | C2Pltmp2VlRAdr, blankData },
		{ flagReadMask | C3Pltmp1VlRAdr, blankData },
		{ flagReadMask | C3Pltmp2VlRAdr, blankData },
		{ flagReadMask | C4Pltmp1VlRAdr, blankData },
		{ flagReadMask | C4Pltmp2VlRAdr, blankData },
		{ flagReadMask | XcpltmplsRAdr, blankData },
		{ flagReadMask | C1Plfep1IRAdr, blankData },
		{ flagReadMask | C1Plfep2IRAdr, blankData },
		{ flagReadMask | C1Plfep3IRAdr, blankData },
		{ flagReadMask | C2Plfep1IRAdr, blankData },
		{ flagReadMask | C2Plfep2IRAdr, blankData },
		{ flagReadMask | C2Plfep3IRAdr, blankData },
		{ flagReadMask | C3Plfep1IRAdr, blankData },
		{ flagReadMask | C3Plfep2IRAdr, blankData },
		{ flagReadMask | C3Plfep3IRAdr, blankData },
		{ flagReadMask | C4Plfep1IRAdr, blankData },
		{ flagReadMask | C4Plfep2IRAdr, blankData },
		{ flagReadMask | C4Plfep3IRAdr, blankData },
		{ flagReadMask | C1Plfep1IlhRAdr, blankData },
		{ flagReadMask | C1Plfep2IlhRAdr, blankData },
		{ flagReadMask | C1Plfep3IlhRAdr, blankData },
		{ flagReadMask | C2Plfep1IlhRAdr, blankData },
		{ flagReadMask | C2Plfep2IlhRAdr, blankData },
		{ flagReadMask | C2Plfep3IlhRAdr, blankData },
		{ flagReadMask | C3Plfep1IlhRAdr, blankData },
		{ flagReadMask | C3Plfep2IlhRAdr, blankData },
		{ flagReadMask | C3Plfep3IlhRAdr, blankData },
		{ flagReadMask | C4Plfep1IlhRAdr, blankData },
		{ flagReadMask | C4Plfep2IlhRAdr, blankData },
		{ flagReadMask | C4Plfep3IlhRAdr, blankData },
		{ flagReadMask | C1Plfep1IllRAdr, blankData },
		{ flagReadMask | C1Plfep2IllRAdr, blankData },
		{ flagReadMask | C1Plfep3IllRAdr, blankData },
		{ flagReadMask | C2Plfep1IllRAdr, blankData },
		{ flagReadMask | C2Plfep2IllRAdr, blankData },
		{ flagReadMask | C2Plfep3IllRAdr, blankData },
		{ flagReadMask | C3Plfep1IllRAdr, blankData },
		{ flagReadMask | C3Plfep2IllRAdr, blankData },
		{ flagReadMask | C3Plfep3IllRAdr, blankData },
		{ flagReadMask | C4Plfep1IllRAdr, blankData },
		{ flagReadMask | C4Plfep2IllRAdr, blankData },
		{ flagReadMask | C4Plfep3IllRAdr, blankData },
		{ flagReadMask | XcplfeplsRAdr, blankData },
		{ flagReadMask | XcplfepfcRAdr, blankData },
		{ flagReadMask | XcvfRAdr, blankData },
		{ flagReadMask | XcvfmRAdr, blankData },
		{ flagReadMask | XcvfcRAdr, blankData },
		{ flagReadMask | XcienRAdr, blankData },
		{ flagReadMask | XcienmRAdr, blankData },
		{ flagReadMask | XciencRAdr, blankData },
		{ flagReadMask | XffsdRAdr, blankData },
		{ flagReadMask | XffsdmRAdr, blankData },
		{ flagReadMask | XffsdcRAdr, blankData },
		{ flagReadMask | XistatRAdr, blankData },
		{ flagReadMask | XictlRAdr, blankData },
		{ flagReadMask | XiverRAdr, blankData },
	};

	htonFpgaRegArray(pPolledRegMsg_, PolledRegMsgSize_);

    epicsThreadSleep(defaultPollPeriod);
    printf("%s created %ld parameters.\n",__PRETTY_FUNCTION__,NUM_SCLLRFINT_PARAMS);

    wakeupPoller();
    wakeupReader();
}

scllrfINTDriver::~scllrfINTDriver()
{
	isShuttingDown_ = true;
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller();
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller(); // call this twice in case the poller was never set to run
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupReader();
	pasynOctetSyncIO->disconnect(pOctetAsynUser_);
	pasynCommonSyncIO->disconnectDevice(pCommonAsynUser_);
	pasynCommonSyncIO->disconnect(pCommonAsynUser_);
}

/** Called when you have the asyn parameter name and want the corresponding
 * register address.
  * \param[in] function From pAsynUser->reason, corresponding to a registered parameter.
  * \param[in] pToFpga Pointer to the {Address, Data} structure where the register address will be written
  * \param[in] nElements Number of elements to read. */
asynStatus scllrfINTDriver::functionToRegister(const int function, FpgaReg *pToFpga)
{
	asynStatus status = asynSuccess;

    if( function == p_C1Plfep1IR )
    {
		pToFpga->addr = C1Plfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep1IlhR )
    {
		pToFpga->addr = C1Plfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep1IlhW )
    {
		pToFpga->addr = C1Plfep1IlhWAdr;
    }
    else
    if( function == p_C1Plfep1IllR )
    {
		pToFpga->addr = C1Plfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep1IllW )
    {
		pToFpga->addr = C1Plfep1IllWAdr;
    }
    else
    if( function == p_C1Plfep2IR )
    {
		pToFpga->addr = C1Plfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep2IlhR )
    {
		pToFpga->addr = C1Plfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep2IlhW )
    {
		pToFpga->addr = C1Plfep2IlhWAdr;
    }
    else
    if( function == p_C1Plfep2IllR )
    {
		pToFpga->addr = C1Plfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep2IllW )
    {
		pToFpga->addr = C1Plfep2IllWAdr;
    }
    else
    if( function == p_C1Plfep3IR )
    {
		pToFpga->addr = C1Plfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep3IlhR )
    {
		pToFpga->addr = C1Plfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep3IlhW )
    {
		pToFpga->addr = C1Plfep3IlhWAdr;
    }
    else
    if( function == p_C1Plfep3IllR )
    {
		pToFpga->addr = C1Plfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_C1Plfep3IllW )
    {
		pToFpga->addr = C1Plfep3IllWAdr;
    }
    else
    if( function == p_C1Pltmp1IR )
    {
		pToFpga->addr = C1Pltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_C1Pltmp1IW )
    {
		pToFpga->addr = C1Pltmp1IWAdr;
    }
    else
    if( function == p_C1Pltmp1VR )
    {
		pToFpga->addr = C1Pltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_C1Pltmp1VlR )
    {
		pToFpga->addr = C1Pltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_C1Pltmp1VlW )
    {
		pToFpga->addr = C1Pltmp1VlWAdr;
    }
    else
    if( function == p_C1Pltmp2IR )
    {
		pToFpga->addr = C1Pltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_C1Pltmp2IW )
    {
		pToFpga->addr = C1Pltmp2IWAdr;
    }
    else
    if( function == p_C1Pltmp2VR )
    {
		pToFpga->addr = C1Pltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_C1Pltmp2VlR )
    {
		pToFpga->addr = C1Pltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_C1Pltmp2VlW )
    {
		pToFpga->addr = C1Pltmp2VlWAdr;
    }
    else
    if( function == p_C1StmpiR )
    {
		pToFpga->addr = C1StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_C1StmpiW )
    {
		pToFpga->addr = C1StmpiWAdr;
    }
    else
    if( function == p_C1StmpvR )
    {
		pToFpga->addr = C1StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_C1StmpvlR )
    {
		pToFpga->addr = C1StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_C1StmpvlW )
    {
		pToFpga->addr = C1StmpvlWAdr;
    }
    else
    if( function == p_C1WalR )
    {
		pToFpga->addr = C1WalRAdr|flagReadMask;
    }
    else
    if( function == p_C1WalW )
    {
		pToFpga->addr = C1WalWAdr;
    }
    else
    if( function == p_C1WapR )
    {
		pToFpga->addr = C1WapRAdr|flagReadMask;
    }
    else
    if( function == p_C1WapW )
    {
		pToFpga->addr = C1WapWAdr;
    }
    else
    if( function == p_C1WapsR )
    {
		pToFpga->addr = C1WapsRAdr|flagReadMask;
    }
    else
    if( function == p_C1WapsW )
    {
		pToFpga->addr = C1WapsWAdr;
    }
    else
    if( function == p_C1WavR )
    {
		pToFpga->addr = C1WavRAdr|flagReadMask;
    }
    else
    if( function == p_C1WwlR )
    {
		pToFpga->addr = C1WwlRAdr|flagReadMask;
    }
    else
    if( function == p_C1WwlW )
    {
		pToFpga->addr = C1WwlWAdr;
    }
    else
    if( function == p_C1WwtR )
    {
		pToFpga->addr = C1WwtRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep1IR )
    {
		pToFpga->addr = C2Plfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep1IlhR )
    {
		pToFpga->addr = C2Plfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep1IlhW )
    {
		pToFpga->addr = C2Plfep1IlhWAdr;
    }
    else
    if( function == p_C2Plfep1IllR )
    {
		pToFpga->addr = C2Plfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep1IllW )
    {
		pToFpga->addr = C2Plfep1IllWAdr;
    }
    else
    if( function == p_C2Plfep2IR )
    {
		pToFpga->addr = C2Plfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep2IlhR )
    {
		pToFpga->addr = C2Plfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep2IlhW )
    {
		pToFpga->addr = C2Plfep2IlhWAdr;
    }
    else
    if( function == p_C2Plfep2IllR )
    {
		pToFpga->addr = C2Plfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep2IllW )
    {
		pToFpga->addr = C2Plfep2IllWAdr;
    }
    else
    if( function == p_C2Plfep3IR )
    {
		pToFpga->addr = C2Plfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep3IlhR )
    {
		pToFpga->addr = C2Plfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep3IlhW )
    {
		pToFpga->addr = C2Plfep3IlhWAdr;
    }
    else
    if( function == p_C2Plfep3IllR )
    {
		pToFpga->addr = C2Plfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_C2Plfep3IllW )
    {
		pToFpga->addr = C2Plfep3IllWAdr;
    }
    else
    if( function == p_C2Pltmp1IR )
    {
		pToFpga->addr = C2Pltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_C2Pltmp1IW )
    {
		pToFpga->addr = C2Pltmp1IWAdr;
    }
    else
    if( function == p_C2Pltmp1VR )
    {
		pToFpga->addr = C2Pltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_C2Pltmp1VlR )
    {
		pToFpga->addr = C2Pltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_C2Pltmp1VlW )
    {
		pToFpga->addr = C2Pltmp1VlWAdr;
    }
    else
    if( function == p_C2Pltmp2IR )
    {
		pToFpga->addr = C2Pltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_C2Pltmp2IW )
    {
		pToFpga->addr = C2Pltmp2IWAdr;
    }
    else
    if( function == p_C2Pltmp2VR )
    {
		pToFpga->addr = C2Pltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_C2Pltmp2VlR )
    {
		pToFpga->addr = C2Pltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_C2Pltmp2VlW )
    {
		pToFpga->addr = C2Pltmp2VlWAdr;
    }
    else
    if( function == p_C2StmpiR )
    {
		pToFpga->addr = C2StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_C2StmpiW )
    {
		pToFpga->addr = C2StmpiWAdr;
    }
    else
    if( function == p_C2StmpvR )
    {
		pToFpga->addr = C2StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_C2StmpvlR )
    {
		pToFpga->addr = C2StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_C2StmpvlW )
    {
		pToFpga->addr = C2StmpvlWAdr;
    }
    else
    if( function == p_C2WalR )
    {
		pToFpga->addr = C2WalRAdr|flagReadMask;
    }
    else
    if( function == p_C2WalW )
    {
		pToFpga->addr = C2WalWAdr;
    }
    else
    if( function == p_C2WapR )
    {
		pToFpga->addr = C2WapRAdr|flagReadMask;
    }
    else
    if( function == p_C2WapW )
    {
		pToFpga->addr = C2WapWAdr;
    }
    else
    if( function == p_C2WapsR )
    {
		pToFpga->addr = C2WapsRAdr|flagReadMask;
    }
    else
    if( function == p_C2WapsW )
    {
		pToFpga->addr = C2WapsWAdr;
    }
    else
    if( function == p_C2WavR )
    {
		pToFpga->addr = C2WavRAdr|flagReadMask;
    }
    else
    if( function == p_C2WwlR )
    {
		pToFpga->addr = C2WwlRAdr|flagReadMask;
    }
    else
    if( function == p_C2WwlW )
    {
		pToFpga->addr = C2WwlWAdr;
    }
    else
    if( function == p_C2WwtR )
    {
		pToFpga->addr = C2WwtRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep1IR )
    {
		pToFpga->addr = C3Plfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep1IlhR )
    {
		pToFpga->addr = C3Plfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep1IlhW )
    {
		pToFpga->addr = C3Plfep1IlhWAdr;
    }
    else
    if( function == p_C3Plfep1IllR )
    {
		pToFpga->addr = C3Plfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep1IllW )
    {
		pToFpga->addr = C3Plfep1IllWAdr;
    }
    else
    if( function == p_C3Plfep2IR )
    {
		pToFpga->addr = C3Plfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep2IlhR )
    {
		pToFpga->addr = C3Plfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep2IlhW )
    {
		pToFpga->addr = C3Plfep2IlhWAdr;
    }
    else
    if( function == p_C3Plfep2IllR )
    {
		pToFpga->addr = C3Plfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep2IllW )
    {
		pToFpga->addr = C3Plfep2IllWAdr;
    }
    else
    if( function == p_C3Plfep3IR )
    {
		pToFpga->addr = C3Plfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep3IlhR )
    {
		pToFpga->addr = C3Plfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep3IlhW )
    {
		pToFpga->addr = C3Plfep3IlhWAdr;
    }
    else
    if( function == p_C3Plfep3IllR )
    {
		pToFpga->addr = C3Plfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_C3Plfep3IllW )
    {
		pToFpga->addr = C3Plfep3IllWAdr;
    }
    else
    if( function == p_C3Pltmp1IR )
    {
		pToFpga->addr = C3Pltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_C3Pltmp1IW )
    {
		pToFpga->addr = C3Pltmp1IWAdr;
    }
    else
    if( function == p_C3Pltmp1VR )
    {
		pToFpga->addr = C3Pltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_C3Pltmp1VlR )
    {
		pToFpga->addr = C3Pltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_C3Pltmp1VlW )
    {
		pToFpga->addr = C3Pltmp1VlWAdr;
    }
    else
    if( function == p_C3Pltmp2IR )
    {
		pToFpga->addr = C3Pltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_C3Pltmp2IW )
    {
		pToFpga->addr = C3Pltmp2IWAdr;
    }
    else
    if( function == p_C3Pltmp2VR )
    {
		pToFpga->addr = C3Pltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_C3Pltmp2VlR )
    {
		pToFpga->addr = C3Pltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_C3Pltmp2VlW )
    {
		pToFpga->addr = C3Pltmp2VlWAdr;
    }
    else
    if( function == p_C3StmpiR )
    {
		pToFpga->addr = C3StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_C3StmpiW )
    {
		pToFpga->addr = C3StmpiWAdr;
    }
    else
    if( function == p_C3StmpvR )
    {
		pToFpga->addr = C3StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_C3StmpvlR )
    {
		pToFpga->addr = C3StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_C3StmpvlW )
    {
		pToFpga->addr = C3StmpvlWAdr;
    }
    else
    if( function == p_C3WalR )
    {
		pToFpga->addr = C3WalRAdr|flagReadMask;
    }
    else
    if( function == p_C3WalW )
    {
		pToFpga->addr = C3WalWAdr;
    }
    else
    if( function == p_C3WapR )
    {
		pToFpga->addr = C3WapRAdr|flagReadMask;
    }
    else
    if( function == p_C3WapW )
    {
		pToFpga->addr = C3WapWAdr;
    }
    else
    if( function == p_C3WapsR )
    {
		pToFpga->addr = C3WapsRAdr|flagReadMask;
    }
    else
    if( function == p_C3WapsW )
    {
		pToFpga->addr = C3WapsWAdr;
    }
    else
    if( function == p_C3WavR )
    {
		pToFpga->addr = C3WavRAdr|flagReadMask;
    }
    else
    if( function == p_C3WwlR )
    {
		pToFpga->addr = C3WwlRAdr|flagReadMask;
    }
    else
    if( function == p_C3WwlW )
    {
		pToFpga->addr = C3WwlWAdr;
    }
    else
    if( function == p_C3WwtR )
    {
		pToFpga->addr = C3WwtRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep1IR )
    {
		pToFpga->addr = C4Plfep1IRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep1IlhR )
    {
		pToFpga->addr = C4Plfep1IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep1IlhW )
    {
		pToFpga->addr = C4Plfep1IlhWAdr;
    }
    else
    if( function == p_C4Plfep1IllR )
    {
		pToFpga->addr = C4Plfep1IllRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep1IllW )
    {
		pToFpga->addr = C4Plfep1IllWAdr;
    }
    else
    if( function == p_C4Plfep2IR )
    {
		pToFpga->addr = C4Plfep2IRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep2IlhR )
    {
		pToFpga->addr = C4Plfep2IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep2IlhW )
    {
		pToFpga->addr = C4Plfep2IlhWAdr;
    }
    else
    if( function == p_C4Plfep2IllR )
    {
		pToFpga->addr = C4Plfep2IllRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep2IllW )
    {
		pToFpga->addr = C4Plfep2IllWAdr;
    }
    else
    if( function == p_C4Plfep3IR )
    {
		pToFpga->addr = C4Plfep3IRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep3IlhR )
    {
		pToFpga->addr = C4Plfep3IlhRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep3IlhW )
    {
		pToFpga->addr = C4Plfep3IlhWAdr;
    }
    else
    if( function == p_C4Plfep3IllR )
    {
		pToFpga->addr = C4Plfep3IllRAdr|flagReadMask;
    }
    else
    if( function == p_C4Plfep3IllW )
    {
		pToFpga->addr = C4Plfep3IllWAdr;
    }
    else
    if( function == p_C4Pltmp1IR )
    {
		pToFpga->addr = C4Pltmp1IRAdr|flagReadMask;
    }
    else
    if( function == p_C4Pltmp1IW )
    {
		pToFpga->addr = C4Pltmp1IWAdr;
    }
    else
    if( function == p_C4Pltmp1VR )
    {
		pToFpga->addr = C4Pltmp1VRAdr|flagReadMask;
    }
    else
    if( function == p_C4Pltmp1VlR )
    {
		pToFpga->addr = C4Pltmp1VlRAdr|flagReadMask;
    }
    else
    if( function == p_C4Pltmp1VlW )
    {
		pToFpga->addr = C4Pltmp1VlWAdr;
    }
    else
    if( function == p_C4Pltmp2IR )
    {
		pToFpga->addr = C4Pltmp2IRAdr|flagReadMask;
    }
    else
    if( function == p_C4Pltmp2IW )
    {
		pToFpga->addr = C4Pltmp2IWAdr;
    }
    else
    if( function == p_C4Pltmp2VR )
    {
		pToFpga->addr = C4Pltmp2VRAdr|flagReadMask;
    }
    else
    if( function == p_C4Pltmp2VlR )
    {
		pToFpga->addr = C4Pltmp2VlRAdr|flagReadMask;
    }
    else
    if( function == p_C4Pltmp2VlW )
    {
		pToFpga->addr = C4Pltmp2VlWAdr;
    }
    else
    if( function == p_C4StmpiR )
    {
		pToFpga->addr = C4StmpiRAdr|flagReadMask;
    }
    else
    if( function == p_C4StmpiW )
    {
		pToFpga->addr = C4StmpiWAdr;
    }
    else
    if( function == p_C4StmpvR )
    {
		pToFpga->addr = C4StmpvRAdr|flagReadMask;
    }
    else
    if( function == p_C4StmpvlR )
    {
		pToFpga->addr = C4StmpvlRAdr|flagReadMask;
    }
    else
    if( function == p_C4StmpvlW )
    {
		pToFpga->addr = C4StmpvlWAdr;
    }
    else
    if( function == p_C4WalR )
    {
		pToFpga->addr = C4WalRAdr|flagReadMask;
    }
    else
    if( function == p_C4WalW )
    {
		pToFpga->addr = C4WalWAdr;
    }
    else
    if( function == p_C4WapR )
    {
		pToFpga->addr = C4WapRAdr|flagReadMask;
    }
    else
    if( function == p_C4WapW )
    {
		pToFpga->addr = C4WapWAdr;
    }
    else
    if( function == p_C4WapsR )
    {
		pToFpga->addr = C4WapsRAdr|flagReadMask;
    }
    else
    if( function == p_C4WapsW )
    {
		pToFpga->addr = C4WapsWAdr;
    }
    else
    if( function == p_C4WavR )
    {
		pToFpga->addr = C4WavRAdr|flagReadMask;
    }
    else
    if( function == p_C4WwlR )
    {
		pToFpga->addr = C4WwlRAdr|flagReadMask;
    }
    else
    if( function == p_C4WwlW )
    {
		pToFpga->addr = C4WwlWAdr;
    }
    else
    if( function == p_C4WwtR )
    {
		pToFpga->addr = C4WwtRAdr|flagReadMask;
    }
    else
    if( function == p_XatfltR )
    {
		pToFpga->addr = XatfltRAdr|flagReadMask;
    }
    else
    if( function == p_XcienR )
    {
		pToFpga->addr = XcienRAdr|flagReadMask;
    }
    else
    if( function == p_XciencR )
    {
		pToFpga->addr = XciencRAdr|flagReadMask;
    }
    else
    if( function == p_XciencW )
    {
		pToFpga->addr = XciencWAdr;
    }
    else
    if( function == p_XcienmR )
    {
		pToFpga->addr = XcienmRAdr|flagReadMask;
    }
    else
    if( function == p_XcienmW )
    {
		pToFpga->addr = XcienmWAdr;
    }
    else
    if( function == p_XcplfepfcR )
    {
		pToFpga->addr = XcplfepfcRAdr|flagReadMask;
    }
    else
    if( function == p_XcplfeplsR )
    {
		pToFpga->addr = XcplfeplsRAdr|flagReadMask;
    }
    else
    if( function == p_XcpltmplsR )
    {
		pToFpga->addr = XcpltmplsRAdr|flagReadMask;
    }
    else
    if( function == p_XcvfR )
    {
		pToFpga->addr = XcvfRAdr|flagReadMask;
    }
    else
    if( function == p_XcvfcR )
    {
		pToFpga->addr = XcvfcRAdr|flagReadMask;
    }
    else
    if( function == p_XcvfcW )
    {
		pToFpga->addr = XcvfcWAdr;
    }
    else
    if( function == p_XcvfmR )
    {
		pToFpga->addr = XcvfmRAdr|flagReadMask;
    }
    else
    if( function == p_XcvfmW )
    {
		pToFpga->addr = XcvfmWAdr;
    }
    else
    if( function == p_XcwadR )
    {
		pToFpga->addr = XcwadRAdr|flagReadMask;
    }
    else
    if( function == p_XcwafcR )
    {
		pToFpga->addr = XcwafcRAdr|flagReadMask;
    }
    else
    if( function == p_XcwafcW )
    {
		pToFpga->addr = XcwafcWAdr;
    }
    else
    if( function == p_XcwamR )
    {
		pToFpga->addr = XcwamRAdr|flagReadMask;
    }
    else
    if( function == p_XcwamW )
    {
		pToFpga->addr = XcwamWAdr;
    }
    else
    if( function == p_XcwatR )
    {
		pToFpga->addr = XcwatRAdr|flagReadMask;
    }
    else
    if( function == p_XcwatW )
    {
		pToFpga->addr = XcwatWAdr;
    }
    else
    if( function == p_XcwwdR )
    {
		pToFpga->addr = XcwwdRAdr|flagReadMask;
    }
    else
    if( function == p_XcwwfcR )
    {
		pToFpga->addr = XcwwfcRAdr|flagReadMask;
    }
    else
    if( function == p_XcwwmR )
    {
		pToFpga->addr = XcwwmRAdr|flagReadMask;
    }
    else
    if( function == p_XcwwtsR )
    {
		pToFpga->addr = XcwwtsRAdr|flagReadMask;
    }
    else
    if( function == p_XcwwtsW )
    {
		pToFpga->addr = XcwwtsWAdr;
    }
    else
    if( function == p_XffsdR )
    {
		pToFpga->addr = XffsdRAdr|flagReadMask;
    }
    else
    if( function == p_XffsdcR )
    {
		pToFpga->addr = XffsdcRAdr|flagReadMask;
    }
    else
    if( function == p_XffsdcW )
    {
		pToFpga->addr = XffsdcWAdr;
    }
    else
    if( function == p_XffsdmR )
    {
		pToFpga->addr = XffsdmRAdr|flagReadMask;
    }
    else
    if( function == p_XffsdmW )
    {
		pToFpga->addr = XffsdmWAdr;
    }
    else
    if( function == p_XictlR )
    {
		pToFpga->addr = XictlRAdr|flagReadMask;
    }
    else
    if( function == p_XictlW )
    {
		pToFpga->addr = XictlWAdr;
    }
    else
    if( function == p_XistatR )
    {
		pToFpga->addr = XistatRAdr|flagReadMask;
    }
    else
    if( function == p_XiverR )
    {
		pToFpga->addr = XiverRAdr|flagReadMask;
    }
    else
    if( function == p_XstmplsR )
    {
		pToFpga->addr = XstmplsRAdr|flagReadMask;
    }
    else
    	status = asynError;

    return status;
}

/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfINTDriver::processRegReadback(const FpgaReg *pFromFpga, bool &waveIsReady)
{
	unsigned int i;
	asynStatus status = asynSuccess;
	assert(pFromFpga->addr&flagReadMask); // This function is only for read registers
	epicsInt32 errorCount;
	int32_t signExtBits = 0;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
	break;

    case C1WavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1WavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WavRString, (unsigned ) pFromFpga->data);
	break;

    case C2WavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2WavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WavRString, (unsigned ) pFromFpga->data);
	break;

    case C3WavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3WavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WavRString, (unsigned ) pFromFpga->data);
	break;

    case C4WavRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4WavR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WavRString, (unsigned ) pFromFpga->data);
	break;

    case C1WapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1WapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WapsRString, (unsigned ) pFromFpga->data);
	break;

    case C2WapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2WapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WapsRString, (unsigned ) pFromFpga->data);
	break;

    case C3WapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3WapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WapsRString, (unsigned ) pFromFpga->data);
	break;

    case C4WapsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4WapsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WapsRString, (unsigned ) pFromFpga->data);
	break;

    case C1WalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1WalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WalRString, (unsigned ) pFromFpga->data);
	break;

    case C2WalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2WalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WalRString, (unsigned ) pFromFpga->data);
	break;

    case C3WalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3WalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WalRString, (unsigned ) pFromFpga->data);
	break;

    case C4WalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4WalR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WalRString, (unsigned ) pFromFpga->data);
	break;

    case C1WapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1WapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WapRString, (unsigned ) pFromFpga->data);
	break;

    case C2WapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2WapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WapRString, (unsigned ) pFromFpga->data);
	break;

    case C3WapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3WapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WapRString, (unsigned ) pFromFpga->data);
	break;

    case C4WapRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4WapR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WapRString, (unsigned ) pFromFpga->data);
	break;

    case XcwadRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwadR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwadRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwadBit0R,
				pFromFpga->data, XcwadBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwadBit0RString,
				(unsigned ) pFromFpga->data & XcwadBit0Mask);
	break;

    case XcwamRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwamR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwamRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwamBit0R,
				pFromFpga->data, XcwamBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwamBit0RString,
				(unsigned ) pFromFpga->data & XcwamBit0Mask);
	break;

    case XcwatRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwatR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwatRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwatBit0R,
				pFromFpga->data, XcwatBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwatBit0RString,
				(unsigned ) pFromFpga->data & XcwatBit0Mask);
	break;

    case XatfltRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XatfltR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XatfltRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XatfltBit0R,
				pFromFpga->data, XatfltBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XatfltBit0RString,
				(unsigned ) pFromFpga->data & XatfltBit0Mask);
	break;

    case XcwafcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwafcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwafcRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwafcBit0R,
				pFromFpga->data, XcwafcBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwafcBit0RString,
				(unsigned ) pFromFpga->data & XcwafcBit0Mask);
	break;

    case C1WwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1WwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WwtRString, (unsigned ) pFromFpga->data);
	break;

    case C2WwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2WwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WwtRString, (unsigned ) pFromFpga->data);
	break;

    case C3WwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3WwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WwtRString, (unsigned ) pFromFpga->data);
	break;

    case C4WwtRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4WwtR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WwtRString, (unsigned ) pFromFpga->data);
	break;

    case C1WwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1WwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WwlRString, (unsigned ) pFromFpga->data);
	break;

    case C2WwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2WwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WwlRString, (unsigned ) pFromFpga->data);
	break;

    case C3WwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3WwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WwlRString, (unsigned ) pFromFpga->data);
	break;

    case C4WwlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4WwlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WwlRString, (unsigned ) pFromFpga->data);
	break;

    case XcwwdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwwdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwdRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwwdBit0R,
				pFromFpga->data, XcwwdBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwdBit0RString,
				(unsigned ) pFromFpga->data & XcwwdBit0Mask);
	break;

    case XcwwtsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwwtsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwtsRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwwtsBit0R,
				pFromFpga->data, XcwwtsBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwtsBit0RString,
				(unsigned ) pFromFpga->data & XcwwtsBit0Mask);
	break;

    case XcwwmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwwmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwmRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwwmBit0R,
				pFromFpga->data, XcwwmBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwmBit0RString,
				(unsigned ) pFromFpga->data & XcwwmBit0Mask);
	break;

    case XcwwfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcwwfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwfcRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcwwfcBit0R,
				pFromFpga->data, XcwwfcBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwfcBit0RString,
				(unsigned ) pFromFpga->data & XcwwfcBit0Mask);
	break;

    case C1StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case C2StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case C3StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case C4StmpiRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4StmpiR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4StmpiRString, (unsigned ) pFromFpga->data);
	break;

    case C1StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case C2StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case C3StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case C4StmpvRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4StmpvR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4StmpvRString, (unsigned ) pFromFpga->data);
	break;

    case C1StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case C2StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case C3StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case C4StmpvlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4StmpvlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4StmpvlRString, (unsigned ) pFromFpga->data);
	break;

    case XstmplsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XstmplsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XstmplsRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XstmplsBit0R,
				pFromFpga->data, XstmplsBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XstmplsBit0RString,
				(unsigned ) pFromFpga->data & XstmplsBit0Mask);
	break;

    case C1Pltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Pltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case C1Pltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Pltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case C2Pltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Pltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case C2Pltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Pltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case C3Pltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Pltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case C3Pltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Pltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case C4Pltmp1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Pltmp1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp1IRString, (unsigned ) pFromFpga->data);
	break;

    case C4Pltmp2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Pltmp2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp2IRString, (unsigned ) pFromFpga->data);
	break;

    case C1Pltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Pltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case C1Pltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Pltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case C2Pltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Pltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case C2Pltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Pltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case C3Pltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Pltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case C3Pltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Pltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case C4Pltmp1VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Pltmp1VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp1VRString, (unsigned ) pFromFpga->data);
	break;

    case C4Pltmp2VRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Pltmp2VR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp2VRString, (unsigned ) pFromFpga->data);
	break;

    case C1Pltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Pltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case C1Pltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Pltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case C2Pltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Pltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case C2Pltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Pltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case C3Pltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Pltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case C3Pltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Pltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case C4Pltmp1VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Pltmp1VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp1VlRString, (unsigned ) pFromFpga->data);
	break;

    case C4Pltmp2VlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Pltmp2VlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp2VlRString, (unsigned ) pFromFpga->data);
	break;

    case XcpltmplsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcpltmplsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcpltmplsRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcpltmplsBit0R,
				pFromFpga->data, XcpltmplsBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcpltmplsBit0RString,
				(unsigned ) pFromFpga->data & XcpltmplsBit0Mask);
	break;

    case C1Plfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep1IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep1IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep1IRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep2IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep2IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep2IRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep3IRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep3IR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep3IRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep1IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep1IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep1IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep2IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep2IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep2IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep3IlhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep3IlhR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep3IlhRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case C1Plfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Plfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case C2Plfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C2Plfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case C3Plfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C3Plfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep1IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep1IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep1IllRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep2IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep2IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep2IllRString, (unsigned ) pFromFpga->data);
	break;

    case C4Plfep3IllRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C4Plfep3IllR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep3IllRString, (unsigned ) pFromFpga->data);
	break;

    case XcplfeplsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcplfeplsR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcplfeplsRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcplfeplsBit0R,
				pFromFpga->data, XcplfeplsBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcplfeplsBit0RString,
				(unsigned ) pFromFpga->data & XcplfeplsBit0Mask);
	break;

    case XcplfepfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcplfepfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcplfepfcRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcplfepfcBit0R,
				pFromFpga->data, XcplfepfcBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcplfepfcBit0RString,
				(unsigned ) pFromFpga->data & XcplfepfcBit0Mask);
	break;

    case XcvfRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcvfR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcvfBit0R,
				pFromFpga->data, XcvfBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfBit0RString,
				(unsigned ) pFromFpga->data & XcvfBit0Mask);
	break;

    case XcvfmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcvfmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfmRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcvfmBit0R,
				pFromFpga->data, XcvfmBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfmBit0RString,
				(unsigned ) pFromFpga->data & XcvfmBit0Mask);
	break;

    case XcvfcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcvfcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfcRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcvfcBit0R,
				pFromFpga->data, XcvfcBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfcBit0RString,
				(unsigned ) pFromFpga->data & XcvfcBit0Mask);
	break;

    case XcienRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcienR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcienRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcienBit0R,
				pFromFpga->data, XcienBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcienBit0RString,
				(unsigned ) pFromFpga->data & XcienBit0Mask);
	break;

    case XcienmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XcienmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcienmRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XcienmBit0R,
				pFromFpga->data, XcienmBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcienmBit0RString,
				(unsigned ) pFromFpga->data & XcienmBit0Mask);
	break;

    case XciencRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XciencR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XciencRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XciencBit0R,
				pFromFpga->data, XciencBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XciencBit0RString,
				(unsigned ) pFromFpga->data & XciencBit0Mask);
	break;

    case XffsdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XffsdR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XffsdBit0R,
				pFromFpga->data, XffsdBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdBit0RString,
				(unsigned ) pFromFpga->data & XffsdBit0Mask);
	break;

    case XffsdmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XffsdmR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdmRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XffsdmBit0R,
				pFromFpga->data, XffsdmBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdmBit0RString,
				(unsigned ) pFromFpga->data & XffsdmBit0Mask);
	break;

    case XffsdcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XffsdcR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdcRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XffsdcBit0R,
				pFromFpga->data, XffsdcBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdcBit0RString,
				(unsigned ) pFromFpga->data & XffsdcBit0Mask);
	break;

    case XistatRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XistatR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XistatRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XistatBit0R,
				pFromFpga->data, XistatBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XistatBit0RString,
				(unsigned ) pFromFpga->data & XistatBit0Mask);
	break;

    case XictlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XictlR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XictlRString, (unsigned ) pFromFpga->data);

		status = (asynStatus) setUIntDigitalParam(p_XictlBit0R,
				pFromFpga->data, XictlBit0Mask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XictlBit0RString,
				(unsigned ) pFromFpga->data & XictlBit0Mask);
	break;

    case XiverRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_XiverR,
				pFromFpga->data);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XiverRString, (unsigned ) pFromFpga->data);
		break;

	default:
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		break;
    }

    return status;
}


/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfINTDriver::processRegWriteResponse(const FpgaReg *pFromFpga)
{
	asynStatus status = asynSuccess;
	epicsInt32 valueSet[maxMsgSize/sizeof(FpgaReg)]; // Put the value sent to the FPGA here for comparison
	epicsInt32 errorCount;
//  variables that may be useful for checking array data
//	asynUser *pAsynArrayUser;
//	unsigned int i;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case C1WapsWAdr:
		status = (asynStatus) getIntegerParam(p_C1WapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1WapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1WapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2WapsWAdr:
		status = (asynStatus) getIntegerParam(p_C2WapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2WapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2WapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3WapsWAdr:
		status = (asynStatus) getIntegerParam(p_C3WapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3WapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3WapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4WapsWAdr:
		status = (asynStatus) getIntegerParam(p_C4WapsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WapsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4WapsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4WapsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1WalWAdr:
		status = (asynStatus) getIntegerParam(p_C1WalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1WalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1WalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2WalWAdr:
		status = (asynStatus) getIntegerParam(p_C2WalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2WalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2WalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3WalWAdr:
		status = (asynStatus) getIntegerParam(p_C3WalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3WalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3WalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4WalWAdr:
		status = (asynStatus) getIntegerParam(p_C4WalW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WalWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4WalWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4WalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1WapWAdr:
		status = (asynStatus) getIntegerParam(p_C1WapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1WapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1WapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2WapWAdr:
		status = (asynStatus) getIntegerParam(p_C2WapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2WapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2WapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3WapWAdr:
		status = (asynStatus) getIntegerParam(p_C3WapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3WapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3WapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4WapWAdr:
		status = (asynStatus) getIntegerParam(p_C4WapW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WapWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4WapWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4WapW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XcwamWAdr:
		status = (asynStatus) getIntegerParam(p_XcwamW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwamWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XcwamWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XcwamW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XcwatWAdr:
		status = (asynStatus) getIntegerParam(p_XcwatW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwatWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XcwatWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XcwatW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XcwafcWAdr:
		status = (asynStatus) getIntegerParam(p_XcwafcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwafcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XcwafcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XcwafcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1WwlWAdr:
		status = (asynStatus) getIntegerParam(p_C1WwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1WwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1WwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1WwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2WwlWAdr:
		status = (asynStatus) getIntegerParam(p_C2WwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2WwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2WwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2WwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3WwlWAdr:
		status = (asynStatus) getIntegerParam(p_C3WwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3WwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3WwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3WwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4WwlWAdr:
		status = (asynStatus) getIntegerParam(p_C4WwlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4WwlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4WwlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4WwlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XcwwtsWAdr:
		status = (asynStatus) getIntegerParam(p_XcwwtsW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwtsWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XcwwtsWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XcwwtsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_C1StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_C2StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_C3StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4StmpiWAdr:
		status = (asynStatus) getIntegerParam(p_C4StmpiW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4StmpiWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4StmpiWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4StmpiW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_C1StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_C2StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_C3StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4StmpvlWAdr:
		status = (asynStatus) getIntegerParam(p_C4StmpvlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4StmpvlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4StmpvlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4StmpvlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Pltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_C1Pltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Pltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Pltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_C1Pltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Pltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Pltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_C2Pltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Pltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Pltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_C2Pltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Pltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Pltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_C3Pltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Pltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Pltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_C3Pltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Pltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Pltmp1IWAdr:
		status = (asynStatus) getIntegerParam(p_C4Pltmp1IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp1IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp1IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Pltmp1IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Pltmp2IWAdr:
		status = (asynStatus) getIntegerParam(p_C4Pltmp2IW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp2IWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp2IWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Pltmp2IW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Pltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_C1Pltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Pltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Pltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_C1Pltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Pltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Pltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Pltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_C2Pltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Pltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Pltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_C2Pltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Pltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Pltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Pltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_C3Pltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Pltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Pltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_C3Pltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Pltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Pltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Pltmp1VlWAdr:
		status = (asynStatus) getIntegerParam(p_C4Pltmp1VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp1VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp1VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Pltmp1VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Pltmp2VlWAdr:
		status = (asynStatus) getIntegerParam(p_C4Pltmp2VlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp2VlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Pltmp2VlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Pltmp2VlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Plfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C1Plfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Plfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Plfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C1Plfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Plfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Plfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C1Plfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Plfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Plfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C2Plfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Plfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Plfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C2Plfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Plfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Plfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C2Plfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Plfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Plfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C3Plfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Plfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Plfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C3Plfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Plfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Plfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C3Plfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Plfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Plfep1IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C4Plfep1IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep1IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep1IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Plfep1IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Plfep2IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C4Plfep2IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep2IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep2IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Plfep2IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Plfep3IlhWAdr:
		status = (asynStatus) getIntegerParam(p_C4Plfep3IlhW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep3IlhWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep3IlhWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Plfep3IlhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Plfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_C1Plfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Plfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Plfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_C1Plfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Plfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Plfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_C1Plfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Plfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C1Plfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Plfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_C2Plfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Plfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Plfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_C2Plfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Plfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C2Plfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_C2Plfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C2Plfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C2Plfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Plfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_C3Plfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Plfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Plfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_C3Plfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Plfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C3Plfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_C3Plfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C3Plfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C3Plfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Plfep1IllWAdr:
		status = (asynStatus) getIntegerParam(p_C4Plfep1IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep1IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep1IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Plfep1IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Plfep2IllWAdr:
		status = (asynStatus) getIntegerParam(p_C4Plfep2IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep2IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep2IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Plfep2IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C4Plfep3IllWAdr:
		status = (asynStatus) getIntegerParam(p_C4Plfep3IllW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep3IllWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C4Plfep3IllWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_C4Plfep3IllW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XcvfmWAdr:
		status = (asynStatus) getIntegerParam(p_XcvfmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XcvfmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XcvfcWAdr:
		status = (asynStatus) getIntegerParam(p_XcvfcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XcvfcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XcvfcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XcienmWAdr:
		status = (asynStatus) getIntegerParam(p_XcienmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XcienmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XcienmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XcienmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XciencWAdr:
		status = (asynStatus) getIntegerParam(p_XciencW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XciencWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XciencWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XciencW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XffsdmWAdr:
		status = (asynStatus) getIntegerParam(p_XffsdmW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdmWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdmWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XffsdmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XffsdcWAdr:
		status = (asynStatus) getIntegerParam(p_XffsdcW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdcWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XffsdcWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XffsdcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case XictlWAdr:
		status = (asynStatus) getIntegerParam(p_XictlW, valueSet);
		if( (valueSet[0] ) == (pFromFpga->data ))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				XictlWString, (unsigned ) pFromFpga->data );
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				XictlWString, valueSet[0] , (unsigned ) pFromFpga->data );
			status = asynError;
			setParamStatus(p_XictlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
	default:
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		break;
    }

	// TODO: handle arrays

    return status;
}



extern "C" {

/* Configuration routine.  Called directly, or from the iocsh function below */

/** EPICS iocsh callable function to call constructor for the scllrfINT class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asynIPport this will use to communicate */
int scllrfINTConfigure(const char *drvPortName, const char *netPortName)
{
	new scllrfINTDriver(drvPortName, netPortName);
	return asynSuccess;
}


/* EPICS iocsh shell commands */

static const iocshArg initArg0 = { "drvPortName",iocshArgString};
static const iocshArg initArg1 = { "IP port name",iocshArgString};
static const iocshArg * const initArgs[] = {&initArg0,
		&initArg1};
static const iocshFuncDef initFuncDef = {"scllrfINTConfigure",2,initArgs};
static void initCallFunc(const iocshArgBuf *args)
{
	scllrfINTConfigure(args[0].sval, args[1].sval);
}

void scllrfINTRegister(void)
{
	iocshRegister(&initFuncDef,initCallFunc);
}

epicsExportRegistrar(scllrfINTRegister);

}



