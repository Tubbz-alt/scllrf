/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : scllrfAsynPortDriver.cpp
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Prototype for FPGA register access to FPGAs using protocol defined in papers
 * given to SLAC by LBNL (Larry Doolittle). Uses asynPortDriver interface. Some of this
 * should eventually be autogenerated from json files or some such, and templates.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/

#include "scllrfPRC.h"
#include <asynOctetSyncIO.h>
#include <asynCommonSyncIO.h>
#include <limits>
#include <netinet/in.h>
#include <iostream>
using namespace std;
#include <math.h>

/** Constructor for the scllrfPRC class.
 * Calls constructor for the asynPortDriver base class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] path The path to the peripherial as built by the builder api
 * \param[in] nelms The number of elements of this device (max addr)
 * \paarm[in] nEntries The number of asyn params to be created for each device
 *
 * */
scllrfPRC::scllrfPRC(const char *drvPortName, const char *netPortName)
: scllrfAsynPortDriver(drvPortName, netPortName,
		maxWavesCount, /* maxAddr, i.e. number of channels */
		NUM_SCLLRFPRC_PARAMS)
{
	unsigned int i;

    epicsThreadSleep(defaultPollPeriod);

    createParam(HellRString, asynParamInt32, &p_HellR);
    createParam(U15SdioAsSdoRString, asynParamInt32, &p_U15SdioAsSdoR);
    createParam(U15SdoAddrRString, asynParamInt32, &p_U15SdoAddrR);
    createParam(U15SpiReadyRString, asynParamInt32, &p_U15SpiReadyR);
    createParam(U18SdioAsSdoRString, asynParamInt32, &p_U18SdioAsSdoR);
    createParam(U18SdoAddrRString, asynParamInt32, &p_U18SdoAddrR);
    createParam(U18SpiReadyRString, asynParamInt32, &p_U18SpiReadyR);
    createParam(U2Doutbits31To0RString, asynParamInt32, &p_U2Doutbits31To0R);
    createParam(U2Doutbits63To32RString, asynParamInt32, &p_U2Doutbits63To32R);
    createParam(U3Doutbits31To0RString, asynParamInt32, &p_U3Doutbits31To0R);
    createParam(U3Doutbits63To32RString, asynParamInt32, &p_U3Doutbits63To32R);
    createParam(U15SpiRdbkRString, asynParamInt32, &p_U15SpiRdbkR);
    createParam(U18SpiRdbkRString, asynParamInt32, &p_U18SpiRdbkR);
    createParam(AdcMmcmRString, asynParamInt32, &p_AdcMmcmR);
    createParam(AdcMmcmWString, asynParamInt32, &p_AdcMmcmW);
    createParam(AdcTestTrigCntRString, asynParamInt32, &p_AdcTestTrigCntR);
    createParam(AdcTestWv1OutRString, asynParamInt32, &p_AdcTestWv1OutR);
    createParam(AdcTestWv2OutRString, asynParamInt32, &p_AdcTestWv2OutR);
    createParam(AdcTestWv3OutRString, asynParamInt32, &p_AdcTestWv3OutR);
    createParam(AdcTestWv4OutRString, asynParamInt32, &p_AdcTestWv4OutR);
    createParam(BanyanBufRString, asynParamInt32, &p_BanyanBufR);
    createParam(BanyanStatusRString, asynParamInt32, &p_BanyanStatusR);
    createParam(ClkPhDiffOutU2RString, asynParamInt32, &p_ClkPhDiffOutU2R);
    createParam(ClkPhDiffOutU3RString, asynParamInt32, &p_ClkPhDiffOutU3R);
    createParam(CrcErrorsRString, asynParamInt32, &p_CrcErrorsR);
    createParam(CtraceRunningRString, asynParamInt32, &p_CtraceRunningR);
    createParam(DigCfgU15SpiDataAddrRRString, asynParamInt32, &p_DigCfgU15SpiDataAddrRR);
    createParam(DigCfgU15SpiDataAddrRWString, asynParamInt32, &p_DigCfgU15SpiDataAddrRW);
    createParam(DigCfgU15SpiReadAndStartRRString, asynParamInt32, &p_DigCfgU15SpiReadAndStartRR);
    createParam(DigCfgU15SpiReadAndStartRWString, asynParamInt32, &p_DigCfgU15SpiReadAndStartRW);
    createParam(DigCfgU18SpiDataAddrRRString, asynParamInt32, &p_DigCfgU18SpiDataAddrRR);
    createParam(DigCfgU18SpiDataAddrRWString, asynParamInt32, &p_DigCfgU18SpiDataAddrRW);
    createParam(DigCfgU18SpiReadAndStartRRString, asynParamInt32, &p_DigCfgU18SpiReadAndStartRR);
    createParam(DigCfgU18SpiReadAndStartRWString, asynParamInt32, &p_DigCfgU18SpiReadAndStartRW);
    createParam(DigCfgU2ClkResetRRString, asynParamInt32, &p_DigCfgU2ClkResetRR);
    createParam(DigCfgU2ClkResetRWString, asynParamInt32, &p_DigCfgU2ClkResetRW);
    createParam(DigCfgU2IserdesResetRRString, asynParamInt32, &p_DigCfgU2IserdesResetRR);
    createParam(DigCfgU2IserdesResetRWString, asynParamInt32, &p_DigCfgU2IserdesResetRW);
    createParam(DigCfgU3ClkResetRRString, asynParamInt32, &p_DigCfgU3ClkResetRR);
    createParam(DigCfgU3ClkResetRWString, asynParamInt32, &p_DigCfgU3ClkResetRW);
    createParam(DigCfgU3IserdesResetRRString, asynParamInt32, &p_DigCfgU3IserdesResetRR);
    createParam(DigCfgU3IserdesResetRWString, asynParamInt32, &p_DigCfgU3IserdesResetRW);
    createParam(DigCfgU4ResetRRString, asynParamInt32, &p_DigCfgU4ResetRR);
    createParam(DigCfgU4ResetRWString, asynParamInt32, &p_DigCfgU4ResetRW);
    createParam(DigCfgBanyanMaskRString, asynParamInt32, &p_DigCfgBanyanMaskR);
    createParam(DigCfgBanyanMaskWString, asynParamInt32, &p_DigCfgBanyanMaskW);
    createParam(DigCfgBitslipRString, asynParamInt32, &p_DigCfgBitslipR);
    createParam(DigCfgBitslipWString, asynParamInt32, &p_DigCfgBitslipW);
    createParam(DigCfgIdelayctrlResetRRString, asynParamInt32, &p_DigCfgIdelayctrlResetRR);
    createParam(DigCfgIdelayctrlResetRWString, asynParamInt32, &p_DigCfgIdelayctrlResetRW);
    createParam(DigCfgLlspiWeRString, asynParamInt32, &p_DigCfgLlspiWeR);
    createParam(DigCfgLlspiWeWString, asynParamInt32, &p_DigCfgLlspiWeW);
    createParam(DigCfgMmcmResetRRString, asynParamInt32, &p_DigCfgMmcmResetRR);
    createParam(DigCfgMmcmResetRWString, asynParamInt32, &p_DigCfgMmcmResetRW);
    createParam(DigCfgPeriphConfigRString, asynParamInt32, &p_DigCfgPeriphConfigR);
    createParam(DigCfgPeriphConfigWString, asynParamInt32, &p_DigCfgPeriphConfigW);
    createParam(DigCfgPhxTrigRString, asynParamInt32, &p_DigCfgPhxTrigR);
    createParam(DigCfgPhxTrigWString, asynParamInt32, &p_DigCfgPhxTrigW);
    createParam(DigCfgRawadcTrigRString, asynParamInt32, &p_DigCfgRawadcTrigR);
    createParam(DigCfgRawadcTrigWString, asynParamInt32, &p_DigCfgRawadcTrigW);
    createParam(DigCfgScanTriggerWeRString, asynParamInt32, &p_DigCfgScanTriggerWeR);
    createParam(DigCfgScanTriggerWeWString, asynParamInt32, &p_DigCfgScanTriggerWeW);
    createParam(DigCfgScannerDebugRString, asynParamInt32, &p_DigCfgScannerDebugR);
    createParam(DigCfgScannerDebugWString, asynParamInt32, &p_DigCfgScannerDebugW);
    createParam(DigCfgSyncAd7794CsetRString, asynParamInt32, &p_DigCfgSyncAd7794CsetR);
    createParam(DigCfgSyncAd7794CsetWString, asynParamInt32, &p_DigCfgSyncAd7794CsetW);
    createParam(DigCfgSyncTps62210CsetRString, asynParamInt32, &p_DigCfgSyncTps62210CsetR);
    createParam(DigCfgSyncTps62210CsetWString, asynParamInt32, &p_DigCfgSyncTps62210CsetW);
    createParam(DigDspAdcTestMdRString, asynParamInt32, &p_DigDspAdcTestMdR);
    createParam(DigDspAdcTestMdWString, asynParamInt32, &p_DigDspAdcTestMdW);
    createParam(DigDspAdcTestResetRString, asynParamInt32, &p_DigDspAdcTestResetR);
    createParam(DigDspAdcTestResetWString, asynParamInt32, &p_DigDspAdcTestResetW);
    createParam(DigDspAmplitudeRString, asynParamInt32, &p_DigDspAmplitudeR);
    createParam(DigDspAmplitudeWString, asynParamInt32, &p_DigDspAmplitudeW);
    createParam(DigDspAverageLenRString, asynParamInt32, &p_DigDspAverageLenR);
    createParam(DigDspAverageLenWString, asynParamInt32, &p_DigDspAverageLenW);
    createParam(DigDspBufTrigRString, asynParamInt32, &p_DigDspBufTrigR);
    createParam(DigDspBufTrigWString, asynParamInt32, &p_DigDspBufTrigW);
    createParam(DigDspCicPeriodRString, asynParamInt32, &p_DigDspCicPeriodR);
    createParam(DigDspCicPeriodWString, asynParamInt32, &p_DigDspCicPeriodW);
    createParam(DigDspCicShiftRString, asynParamInt32, &p_DigDspCicShiftR);
    createParam(DigDspCicShiftWString, asynParamInt32, &p_DigDspCicShiftW);
    createParam(DigDspCircleBufFlipRString, asynParamInt32, &p_DigDspCircleBufFlipR);
    createParam(DigDspCircleBufFlipWString, asynParamInt32, &p_DigDspCircleBufFlipW);
    createParam(DigDspDacDdsResetRString, asynParamInt32, &p_DigDspDacDdsResetR);
    createParam(DigDspDacDdsResetWString, asynParamInt32, &p_DigDspDacDdsResetW);
    createParam(DigDspDacMdRString, asynParamInt32, &p_DigDspDacMdR);
    createParam(DigDspDacMdWString, asynParamInt32, &p_DigDspDacMdW);
    createParam(DigDspDdsaModRString, asynParamInt32, &p_DigDspDdsaModR);
    createParam(DigDspDdsaModWString, asynParamInt32, &p_DigDspDdsaModW);
    createParam(DigDspDdsaPhstepHRString, asynParamInt32, &p_DigDspDdsaPhstepHR);
    createParam(DigDspDdsaPhstepHWString, asynParamInt32, &p_DigDspDdsaPhstepHW);
    createParam(DigDspDdsaPhstepLRString, asynParamInt32, &p_DigDspDdsaPhstepLR);
    createParam(DigDspDdsaPhstepLWString, asynParamInt32, &p_DigDspDdsaPhstepLW);
    createParam(DigDspHistCountWStrobeRString, asynParamInt32, &p_DigDspHistCountWStrobeR);
    createParam(DigDspHistCountWStrobeWString, asynParamInt32, &p_DigDspHistCountWStrobeW);
    createParam(DigDspLlrfDspDacEnRString, asynParamInt32, &p_DigDspLlrfDspDacEnR);
    createParam(DigDspLlrfDspDacEnWString, asynParamInt32, &p_DigDspLlrfDspDacEnW);
    createParam(DigDspLoAmpRString, asynParamInt32, &p_DigDspLoAmpR);
    createParam(DigDspLoAmpWString, asynParamInt32, &p_DigDspLoAmpW);
    createParam(DigDspModRString, asynParamInt32, &p_DigDspModR);
    createParam(DigDspModWString, asynParamInt32, &p_DigDspModW);
    createParam(DigDspPhStepHRString, asynParamInt32, &p_DigDspPhStepHR);
    createParam(DigDspPhStepHWString, asynParamInt32, &p_DigDspPhStepHW);
    createParam(DigDspPhStepLRString, asynParamInt32, &p_DigDspPhStepLR);
    createParam(DigDspPhStepLWString, asynParamInt32, &p_DigDspPhStepLW);
    createParam(DigDspPrcDspCselRString, asynParamInt32, &p_DigDspPrcDspCselR);
    createParam(DigDspPrcDspCselWString, asynParamInt32, &p_DigDspPrcDspCselW);
    createParam(DigDspPrcDspPrlCfgRString, asynParamInt32, &p_DigDspPrcDspPrlCfgR);
    createParam(DigDspPrcDspPrlCfgWString, asynParamInt32, &p_DigDspPrcDspPrlCfgW);
    createParam(DigDspPrcDspPrlGainRString, asynParamInt32, &p_DigDspPrcDspPrlGainR);
    createParam(DigDspPrcDspPrlGainWString, asynParamInt32, &p_DigDspPrcDspPrlGainW);
    createParam(DigDspRewindRString, asynParamInt32, &p_DigDspRewindR);
    createParam(DigDspRewindWString, asynParamInt32, &p_DigDspRewindW);
    createParam(DigDspRsmBeam0ModRString, asynParamInt32, &p_DigDspRsmBeam0ModR);
    createParam(DigDspRsmBeam0ModWString, asynParamInt32, &p_DigDspRsmBeam0ModW);
    createParam(DigDspRsmBeam0PhInitRString, asynParamInt32, &p_DigDspRsmBeam0PhInitR);
    createParam(DigDspRsmBeam0PhInitWString, asynParamInt32, &p_DigDspRsmBeam0PhInitW);
    createParam(DigDspRsmBeam0PhStepRString, asynParamInt32, &p_DigDspRsmBeam0PhStepR);
    createParam(DigDspRsmBeam0PhStepWString, asynParamInt32, &p_DigDspRsmBeam0PhStepW);
    createParam(DigDspRsmBeam1ModRString, asynParamInt32, &p_DigDspRsmBeam1ModR);
    createParam(DigDspRsmBeam1ModWString, asynParamInt32, &p_DigDspRsmBeam1ModW);
    createParam(DigDspRsmBeam1PhInitRString, asynParamInt32, &p_DigDspRsmBeam1PhInitR);
    createParam(DigDspRsmBeam1PhInitWString, asynParamInt32, &p_DigDspRsmBeam1PhInitW);
    createParam(DigDspRsmBeam1PhStepRString, asynParamInt32, &p_DigDspRsmBeam1PhStepR);
    createParam(DigDspRsmBeam1PhStepWString, asynParamInt32, &p_DigDspRsmBeam1PhStepW);
    createParam(DigDspRsmC0ACoffsetRString, asynParamInt32, &p_DigDspRsmC0ACoffsetR);
    createParam(DigDspRsmC0ACoffsetWString, asynParamInt32, &p_DigDspRsmC0ACoffsetW);
    createParam(DigDspRsmC0AForOffsetRString, asynParamInt32, &p_DigDspRsmC0AForOffsetR);
    createParam(DigDspRsmC0AForOffsetWString, asynParamInt32, &p_DigDspRsmC0AForOffsetW);
    createParam(DigDspRsmC0ARflOffsetRString, asynParamInt32, &p_DigDspRsmC0ARflOffsetR);
    createParam(DigDspRsmC0ARflOffsetWString, asynParamInt32, &p_DigDspRsmC0ARflOffsetW);
    createParam(DigDspRsmC0AmpLpBwRString, asynParamInt32, &p_DigDspRsmC0AmpLpBwR);
    createParam(DigDspRsmC0AmpLpBwWString, asynParamInt32, &p_DigDspRsmC0AmpLpBwW);
    createParam(DigDspRsmC0C4EdcoCplRString, asynParamInt32, &p_DigDspRsmC0C4EdcoCplR);
    createParam(DigDspRsmC0C4EdcoCplWString, asynParamInt32, &p_DigDspRsmC0C4EdcoCplW);
    createParam(DigDspRsmC0C4EdcoPhOffsetRString, asynParamInt32, &p_DigDspRsmC0C4EdcoPhOffsetR);
    createParam(DigDspRsmC0C4EdcoPhOffsetWString, asynParamInt32, &p_DigDspRsmC0C4EdcoPhOffsetW);
    createParam(DigDspRsmC0C4Efrq0CrsFqRString, asynParamInt32, &p_DigDspRsmC0C4Efrq0CrsFqR);
    createParam(DigDspRsmC0C4Efrq0CrsFqWString, asynParamInt32, &p_DigDspRsmC0C4Efrq0CrsFqW);
    createParam(DigDspRsmC0C4Efrq1CrsFqRString, asynParamInt32, &p_DigDspRsmC0C4Efrq1CrsFqR);
    createParam(DigDspRsmC0C4Efrq1CrsFqWString, asynParamInt32, &p_DigDspRsmC0C4Efrq1CrsFqW);
    createParam(DigDspRsmC0C4Efrq2CrsFqRString, asynParamInt32, &p_DigDspRsmC0C4Efrq2CrsFqR);
    createParam(DigDspRsmC0C4Efrq2CrsFqWString, asynParamInt32, &p_DigDspRsmC0C4Efrq2CrsFqW);
    createParam(DigDspRsmC0C4ElecDot0KOutRString, asynParamInt32, &p_DigDspRsmC0C4ElecDot0KOutR);
    createParam(DigDspRsmC0C4ElecDot0KOutWString, asynParamInt32, &p_DigDspRsmC0C4ElecDot0KOutW);
    createParam(DigDspRsmC0C4ElecDot1KOutRString, asynParamInt32, &p_DigDspRsmC0C4ElecDot1KOutR);
    createParam(DigDspRsmC0C4ElecDot1KOutWString, asynParamInt32, &p_DigDspRsmC0C4ElecDot1KOutW);
    createParam(DigDspRsmC0C4ElecDot2KOutRString, asynParamInt32, &p_DigDspRsmC0C4ElecDot2KOutR);
    createParam(DigDspRsmC0C4ElecDot2KOutWString, asynParamInt32, &p_DigDspRsmC0C4ElecDot2KOutW);
    createParam(DigDspRsmC0C4ElecModRString, asynParamInt32, &p_DigDspRsmC0C4ElecModR);
    createParam(DigDspRsmC0C4ElecModWString, asynParamInt32, &p_DigDspRsmC0C4ElecModW);
    createParam(DigDspRsmC0C4ElecOuterProd0KOutRString, asynParamInt32, &p_DigDspRsmC0C4ElecOuterProd0KOutR);
    createParam(DigDspRsmC0C4ElecOuterProd0KOutWString, asynParamInt32, &p_DigDspRsmC0C4ElecOuterProd0KOutW);
    createParam(DigDspRsmC0C4ElecOuterProd1KOutRString, asynParamInt32, &p_DigDspRsmC0C4ElecOuterProd1KOutR);
    createParam(DigDspRsmC0C4ElecOuterProd1KOutWString, asynParamInt32, &p_DigDspRsmC0C4ElecOuterProd1KOutW);
    createParam(DigDspRsmC0C4ElecOuterProd2KOutRString, asynParamInt32, &p_DigDspRsmC0C4ElecOuterProd2KOutR);
    createParam(DigDspRsmC0C4ElecOuterProd2KOutWString, asynParamInt32, &p_DigDspRsmC0C4ElecOuterProd2KOutW);
    createParam(DigDspRsmC0C4ElecPhStepRString, asynParamInt32, &p_DigDspRsmC0C4ElecPhStepR);
    createParam(DigDspRsmC0C4ElecPhStepWString, asynParamInt32, &p_DigDspRsmC0C4ElecPhStepW);
    createParam(DigDspRsmC0C4Emode0BeamCplRString, asynParamInt32, &p_DigDspRsmC0C4Emode0BeamCplR);
    createParam(DigDspRsmC0C4Emode0BeamCplWString, asynParamInt32, &p_DigDspRsmC0C4Emode0BeamCplW);
    createParam(DigDspRsmC0C4Emode0BwRString, asynParamInt32, &p_DigDspRsmC0C4Emode0BwR);
    createParam(DigDspRsmC0C4Emode0BwWString, asynParamInt32, &p_DigDspRsmC0C4Emode0BwW);
    createParam(DigDspRsmC0C4Emode0DrvCplRString, asynParamInt32, &p_DigDspRsmC0C4Emode0DrvCplR);
    createParam(DigDspRsmC0C4Emode0DrvCplWString, asynParamInt32, &p_DigDspRsmC0C4Emode0DrvCplW);
    createParam(DigDspRsmC0C4Emode1BeamCplRString, asynParamInt32, &p_DigDspRsmC0C4Emode1BeamCplR);
    createParam(DigDspRsmC0C4Emode1BeamCplWString, asynParamInt32, &p_DigDspRsmC0C4Emode1BeamCplW);
    createParam(DigDspRsmC0C4Emode1BwRString, asynParamInt32, &p_DigDspRsmC0C4Emode1BwR);
    createParam(DigDspRsmC0C4Emode1BwWString, asynParamInt32, &p_DigDspRsmC0C4Emode1BwW);
    createParam(DigDspRsmC0C4Emode1DrvCplRString, asynParamInt32, &p_DigDspRsmC0C4Emode1DrvCplR);
    createParam(DigDspRsmC0C4Emode1DrvCplWString, asynParamInt32, &p_DigDspRsmC0C4Emode1DrvCplW);
    createParam(DigDspRsmC0C4Emode2BeamCplRString, asynParamInt32, &p_DigDspRsmC0C4Emode2BeamCplR);
    createParam(DigDspRsmC0C4Emode2BeamCplWString, asynParamInt32, &p_DigDspRsmC0C4Emode2BeamCplW);
    createParam(DigDspRsmC0C4Emode2BwRString, asynParamInt32, &p_DigDspRsmC0C4Emode2BwR);
    createParam(DigDspRsmC0C4Emode2BwWString, asynParamInt32, &p_DigDspRsmC0C4Emode2BwW);
    createParam(DigDspRsmC0C4Emode2DrvCplRString, asynParamInt32, &p_DigDspRsmC0C4Emode2DrvCplR);
    createParam(DigDspRsmC0C4Emode2DrvCplWString, asynParamInt32, &p_DigDspRsmC0C4Emode2DrvCplW);
    createParam(DigDspRsmC0ComprSatCtlRString, asynParamInt32, &p_DigDspRsmC0ComprSatCtlR);
    createParam(DigDspRsmC0ComprSatCtlWString, asynParamInt32, &p_DigDspRsmC0ComprSatCtlW);
    createParam(DigDspRsmC0PiezoCplKOutRString, asynParamInt32, &p_DigDspRsmC0PiezoCplKOutR);
    createParam(DigDspRsmC0PiezoCplKOutWString, asynParamInt32, &p_DigDspRsmC0PiezoCplKOutW);
    createParam(DigDspRsmC0PrngIvaRString, asynParamInt32, &p_DigDspRsmC0PrngIvaR);
    createParam(DigDspRsmC0PrngIvaWString, asynParamInt32, &p_DigDspRsmC0PrngIvaW);
    createParam(DigDspRsmC0PrngIvbRString, asynParamInt32, &p_DigDspRsmC0PrngIvbR);
    createParam(DigDspRsmC0PrngIvbWString, asynParamInt32, &p_DigDspRsmC0PrngIvbW);
    createParam(DigDspRsmC0PrngRndRunRString, asynParamInt32, &p_DigDspRsmC0PrngRndRunR);
    createParam(DigDspRsmC0PrngRndRunWString, asynParamInt32, &p_DigDspRsmC0PrngRndRunW);
    createParam(DigDspRsmC1ACoffsetRString, asynParamInt32, &p_DigDspRsmC1ACoffsetR);
    createParam(DigDspRsmC1ACoffsetWString, asynParamInt32, &p_DigDspRsmC1ACoffsetW);
    createParam(DigDspRsmC1AForOffsetRString, asynParamInt32, &p_DigDspRsmC1AForOffsetR);
    createParam(DigDspRsmC1AForOffsetWString, asynParamInt32, &p_DigDspRsmC1AForOffsetW);
    createParam(DigDspRsmC1ARflOffsetRString, asynParamInt32, &p_DigDspRsmC1ARflOffsetR);
    createParam(DigDspRsmC1ARflOffsetWString, asynParamInt32, &p_DigDspRsmC1ARflOffsetW);
    createParam(DigDspRsmC1AmpLpBwRString, asynParamInt32, &p_DigDspRsmC1AmpLpBwR);
    createParam(DigDspRsmC1AmpLpBwWString, asynParamInt32, &p_DigDspRsmC1AmpLpBwW);
    createParam(DigDspRsmC1C4EdcoCplRString, asynParamInt32, &p_DigDspRsmC1C4EdcoCplR);
    createParam(DigDspRsmC1C4EdcoCplWString, asynParamInt32, &p_DigDspRsmC1C4EdcoCplW);
    createParam(DigDspRsmC1C4EdcoPhOffsetRString, asynParamInt32, &p_DigDspRsmC1C4EdcoPhOffsetR);
    createParam(DigDspRsmC1C4EdcoPhOffsetWString, asynParamInt32, &p_DigDspRsmC1C4EdcoPhOffsetW);
    createParam(DigDspRsmC1C4Efrq0CrsFqRString, asynParamInt32, &p_DigDspRsmC1C4Efrq0CrsFqR);
    createParam(DigDspRsmC1C4Efrq0CrsFqWString, asynParamInt32, &p_DigDspRsmC1C4Efrq0CrsFqW);
    createParam(DigDspRsmC1C4Efrq1CrsFqRString, asynParamInt32, &p_DigDspRsmC1C4Efrq1CrsFqR);
    createParam(DigDspRsmC1C4Efrq1CrsFqWString, asynParamInt32, &p_DigDspRsmC1C4Efrq1CrsFqW);
    createParam(DigDspRsmC1C4Efrq2CrsFqRString, asynParamInt32, &p_DigDspRsmC1C4Efrq2CrsFqR);
    createParam(DigDspRsmC1C4Efrq2CrsFqWString, asynParamInt32, &p_DigDspRsmC1C4Efrq2CrsFqW);
    createParam(DigDspRsmC1C4ElecDot0KOutRString, asynParamInt32, &p_DigDspRsmC1C4ElecDot0KOutR);
    createParam(DigDspRsmC1C4ElecDot0KOutWString, asynParamInt32, &p_DigDspRsmC1C4ElecDot0KOutW);
    createParam(DigDspRsmC1C4ElecDot1KOutRString, asynParamInt32, &p_DigDspRsmC1C4ElecDot1KOutR);
    createParam(DigDspRsmC1C4ElecDot1KOutWString, asynParamInt32, &p_DigDspRsmC1C4ElecDot1KOutW);
    createParam(DigDspRsmC1C4ElecDot2KOutRString, asynParamInt32, &p_DigDspRsmC1C4ElecDot2KOutR);
    createParam(DigDspRsmC1C4ElecDot2KOutWString, asynParamInt32, &p_DigDspRsmC1C4ElecDot2KOutW);
    createParam(DigDspRsmC1C4ElecModRString, asynParamInt32, &p_DigDspRsmC1C4ElecModR);
    createParam(DigDspRsmC1C4ElecModWString, asynParamInt32, &p_DigDspRsmC1C4ElecModW);
    createParam(DigDspRsmC1C4ElecOuterProd0KOutRString, asynParamInt32, &p_DigDspRsmC1C4ElecOuterProd0KOutR);
    createParam(DigDspRsmC1C4ElecOuterProd0KOutWString, asynParamInt32, &p_DigDspRsmC1C4ElecOuterProd0KOutW);
    createParam(DigDspRsmC1C4ElecOuterProd1KOutRString, asynParamInt32, &p_DigDspRsmC1C4ElecOuterProd1KOutR);
    createParam(DigDspRsmC1C4ElecOuterProd1KOutWString, asynParamInt32, &p_DigDspRsmC1C4ElecOuterProd1KOutW);
    createParam(DigDspRsmC1C4ElecOuterProd2KOutRString, asynParamInt32, &p_DigDspRsmC1C4ElecOuterProd2KOutR);
    createParam(DigDspRsmC1C4ElecOuterProd2KOutWString, asynParamInt32, &p_DigDspRsmC1C4ElecOuterProd2KOutW);
    createParam(DigDspRsmC1C4ElecPhStepRString, asynParamInt32, &p_DigDspRsmC1C4ElecPhStepR);
    createParam(DigDspRsmC1C4ElecPhStepWString, asynParamInt32, &p_DigDspRsmC1C4ElecPhStepW);
    createParam(DigDspRsmC1C4Emode0BeamCplRString, asynParamInt32, &p_DigDspRsmC1C4Emode0BeamCplR);
    createParam(DigDspRsmC1C4Emode0BeamCplWString, asynParamInt32, &p_DigDspRsmC1C4Emode0BeamCplW);
    createParam(DigDspRsmC1C4Emode0BwRString, asynParamInt32, &p_DigDspRsmC1C4Emode0BwR);
    createParam(DigDspRsmC1C4Emode0BwWString, asynParamInt32, &p_DigDspRsmC1C4Emode0BwW);
    createParam(DigDspRsmC1C4Emode0DrvCplRString, asynParamInt32, &p_DigDspRsmC1C4Emode0DrvCplR);
    createParam(DigDspRsmC1C4Emode0DrvCplWString, asynParamInt32, &p_DigDspRsmC1C4Emode0DrvCplW);
    createParam(DigDspRsmC1C4Emode1BeamCplRString, asynParamInt32, &p_DigDspRsmC1C4Emode1BeamCplR);
    createParam(DigDspRsmC1C4Emode1BeamCplWString, asynParamInt32, &p_DigDspRsmC1C4Emode1BeamCplW);
    createParam(DigDspRsmC1C4Emode1BwRString, asynParamInt32, &p_DigDspRsmC1C4Emode1BwR);
    createParam(DigDspRsmC1C4Emode1BwWString, asynParamInt32, &p_DigDspRsmC1C4Emode1BwW);
    createParam(DigDspRsmC1C4Emode1DrvCplRString, asynParamInt32, &p_DigDspRsmC1C4Emode1DrvCplR);
    createParam(DigDspRsmC1C4Emode1DrvCplWString, asynParamInt32, &p_DigDspRsmC1C4Emode1DrvCplW);
    createParam(DigDspRsmC1C4Emode2BeamCplRString, asynParamInt32, &p_DigDspRsmC1C4Emode2BeamCplR);
    createParam(DigDspRsmC1C4Emode2BeamCplWString, asynParamInt32, &p_DigDspRsmC1C4Emode2BeamCplW);
    createParam(DigDspRsmC1C4Emode2BwRString, asynParamInt32, &p_DigDspRsmC1C4Emode2BwR);
    createParam(DigDspRsmC1C4Emode2BwWString, asynParamInt32, &p_DigDspRsmC1C4Emode2BwW);
    createParam(DigDspRsmC1C4Emode2DrvCplRString, asynParamInt32, &p_DigDspRsmC1C4Emode2DrvCplR);
    createParam(DigDspRsmC1C4Emode2DrvCplWString, asynParamInt32, &p_DigDspRsmC1C4Emode2DrvCplW);
    createParam(DigDspRsmC1ComprSatCtlRString, asynParamInt32, &p_DigDspRsmC1ComprSatCtlR);
    createParam(DigDspRsmC1ComprSatCtlWString, asynParamInt32, &p_DigDspRsmC1ComprSatCtlW);
    createParam(DigDspRsmC1PiezoCplKOutRString, asynParamInt32, &p_DigDspRsmC1PiezoCplKOutR);
    createParam(DigDspRsmC1PiezoCplKOutWString, asynParamInt32, &p_DigDspRsmC1PiezoCplKOutW);
    createParam(DigDspRsmC1PrngIvaRString, asynParamInt32, &p_DigDspRsmC1PrngIvaR);
    createParam(DigDspRsmC1PrngIvaWString, asynParamInt32, &p_DigDspRsmC1PrngIvaW);
    createParam(DigDspRsmC1PrngIvbRString, asynParamInt32, &p_DigDspRsmC1PrngIvbR);
    createParam(DigDspRsmC1PrngIvbWString, asynParamInt32, &p_DigDspRsmC1PrngIvbW);
    createParam(DigDspRsmC1PrngRndRunRString, asynParamInt32, &p_DigDspRsmC1PrngRndRunR);
    createParam(DigDspRsmC1PrngRndRunWString, asynParamInt32, &p_DigDspRsmC1PrngRndRunW);
    createParam(DigDspRsmC4MechNoiseCplKOutRString, asynParamInt32, &p_DigDspRsmC4MechNoiseCplKOutR);
    createParam(DigDspRsmC4MechNoiseCplKOutWString, asynParamInt32, &p_DigDspRsmC4MechNoiseCplKOutW);
    createParam(DigDspRsmC4MechPrngIvaRString, asynParamInt32, &p_DigDspRsmC4MechPrngIvaR);
    createParam(DigDspRsmC4MechPrngIvaWString, asynParamInt32, &p_DigDspRsmC4MechPrngIvaW);
    createParam(DigDspRsmC4MechPrngIvbRString, asynParamInt32, &p_DigDspRsmC4MechPrngIvbR);
    createParam(DigDspRsmC4MechPrngIvbWString, asynParamInt32, &p_DigDspRsmC4MechPrngIvbW);
    createParam(DigDspRsmC4MechPrngRndRunRString, asynParamInt32, &p_DigDspRsmC4MechPrngRndRunR);
    createParam(DigDspRsmC4MechPrngRndRunWString, asynParamInt32, &p_DigDspRsmC4MechPrngRndRunW);
    createParam(DigDspRsmC4MechResnrPropConstRString, asynParamInt32, &p_DigDspRsmC4MechResnrPropConstR);
    createParam(DigDspRsmC4MechResnrPropConstWString, asynParamInt32, &p_DigDspRsmC4MechResnrPropConstW);
    createParam(DigDspRsmDacIqPhRString, asynParamInt32, &p_DigDspRsmDacIqPhR);
    createParam(DigDspRsmDacIqPhWString, asynParamInt32, &p_DigDspRsmDacIqPhW);
    createParam(DigDspRsmSh0DspChanKeepRString, asynParamInt32, &p_DigDspRsmSh0DspChanKeepR);
    createParam(DigDspRsmSh0DspChanKeepWString, asynParamInt32, &p_DigDspRsmSh0DspChanKeepW);
    createParam(DigDspRsmSh0DspFdbkCrsScaleRString, asynParamInt32, &p_DigDspRsmSh0DspFdbkCrsScaleR);
    createParam(DigDspRsmSh0DspFdbkCrsScaleWString, asynParamInt32, &p_DigDspRsmSh0DspFdbkCrsScaleW);
    createParam(DigDspRsmSh0DspFdbkMpProcCoeffRString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcCoeffR);
    createParam(DigDspRsmSh0DspFdbkMpProcCoeffWString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcCoeffW);
    createParam(DigDspRsmSh0DspFdbkMpProcLimRString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcLimR);
    createParam(DigDspRsmSh0DspFdbkMpProcLimWString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcLimW);
    createParam(DigDspRsmSh0DspFdbkMpProcPhOffsetRString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcPhOffsetR);
    createParam(DigDspRsmSh0DspFdbkMpProcPhOffsetWString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcPhOffsetW);
    createParam(DigDspRsmSh0DspFdbkMpProcSelEnRString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcSelEnR);
    createParam(DigDspRsmSh0DspFdbkMpProcSelEnWString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcSelEnW);
    createParam(DigDspRsmSh0DspFdbkMpProcSelThreshRString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcSelThreshR);
    createParam(DigDspRsmSh0DspFdbkMpProcSelThreshWString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcSelThreshW);
    createParam(DigDspRsmSh0DspFdbkMpProcSetmpRString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcSetmpR);
    createParam(DigDspRsmSh0DspFdbkMpProcSetmpWString, asynParamInt32, &p_DigDspRsmSh0DspFdbkMpProcSetmpW);
    createParam(DigDspRsmSh0DspLpNotchLp1AKxRString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1AKxR);
    createParam(DigDspRsmSh0DspLpNotchLp1AKxWString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1AKxW);
    createParam(DigDspRsmSh0DspLpNotchLp1AKyRString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1AKyR);
    createParam(DigDspRsmSh0DspLpNotchLp1AKyWString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1AKyW);
    createParam(DigDspRsmSh0DspLpNotchLp1BKxRString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1BKxR);
    createParam(DigDspRsmSh0DspLpNotchLp1BKxWString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1BKxW);
    createParam(DigDspRsmSh0DspLpNotchLp1BKyRString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1BKyR);
    createParam(DigDspRsmSh0DspLpNotchLp1BKyWString, asynParamInt32, &p_DigDspRsmSh0DspLpNotchLp1BKyW);
    createParam(DigDspRsmSh0DspModRString, asynParamInt32, &p_DigDspRsmSh0DspModR);
    createParam(DigDspRsmSh0DspModWString, asynParamInt32, &p_DigDspRsmSh0DspModW);
    createParam(DigDspRsmSh0DspPhStepRString, asynParamInt32, &p_DigDspRsmSh0DspPhStepR);
    createParam(DigDspRsmSh0DspPhStepWString, asynParamInt32, &p_DigDspRsmSh0DspPhStepW);
    createParam(DigDspRsmSh0DspPiezoPiezoDcRString, asynParamInt32, &p_DigDspRsmSh0DspPiezoPiezoDcR);
    createParam(DigDspRsmSh0DspPiezoPiezoDcWString, asynParamInt32, &p_DigDspRsmSh0DspPiezoPiezoDcW);
    createParam(DigDspRsmSh0DspTagRString, asynParamInt32, &p_DigDspRsmSh0DspTagR);
    createParam(DigDspRsmSh0DspTagWString, asynParamInt32, &p_DigDspRsmSh0DspTagW);
    createParam(DigDspRsmSh0DspUseFiberIqRString, asynParamInt32, &p_DigDspRsmSh0DspUseFiberIqR);
    createParam(DigDspRsmSh0DspUseFiberIqWString, asynParamInt32, &p_DigDspRsmSh0DspUseFiberIqW);
    createParam(DigDspRsmSh0DspWvSampPerRString, asynParamInt32, &p_DigDspRsmSh0DspWvSampPerR);
    createParam(DigDspRsmSh0DspWvSampPerWString, asynParamInt32, &p_DigDspRsmSh0DspWvSampPerW);
    createParam(DigDspRsmSh0DspWvShiftRString, asynParamInt32, &p_DigDspRsmSh0DspWvShiftR);
    createParam(DigDspRsmSh0DspWvShiftWString, asynParamInt32, &p_DigDspRsmSh0DspWvShiftW);
    createParam(DigDspRsmSh1DspChanKeepRString, asynParamInt32, &p_DigDspRsmSh1DspChanKeepR);
    createParam(DigDspRsmSh1DspChanKeepWString, asynParamInt32, &p_DigDspRsmSh1DspChanKeepW);
    createParam(DigDspRsmSh1DspFdbkCrsScaleRString, asynParamInt32, &p_DigDspRsmSh1DspFdbkCrsScaleR);
    createParam(DigDspRsmSh1DspFdbkCrsScaleWString, asynParamInt32, &p_DigDspRsmSh1DspFdbkCrsScaleW);
    createParam(DigDspRsmSh1DspFdbkMpProcCoeffRString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcCoeffR);
    createParam(DigDspRsmSh1DspFdbkMpProcCoeffWString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcCoeffW);
    createParam(DigDspRsmSh1DspFdbkMpProcLimRString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcLimR);
    createParam(DigDspRsmSh1DspFdbkMpProcLimWString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcLimW);
    createParam(DigDspRsmSh1DspFdbkMpProcPhOffsetRString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcPhOffsetR);
    createParam(DigDspRsmSh1DspFdbkMpProcPhOffsetWString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcPhOffsetW);
    createParam(DigDspRsmSh1DspFdbkMpProcSelEnRString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcSelEnR);
    createParam(DigDspRsmSh1DspFdbkMpProcSelEnWString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcSelEnW);
    createParam(DigDspRsmSh1DspFdbkMpProcSelThreshRString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcSelThreshR);
    createParam(DigDspRsmSh1DspFdbkMpProcSelThreshWString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcSelThreshW);
    createParam(DigDspRsmSh1DspFdbkMpProcSetmpRString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcSetmpR);
    createParam(DigDspRsmSh1DspFdbkMpProcSetmpWString, asynParamInt32, &p_DigDspRsmSh1DspFdbkMpProcSetmpW);
    createParam(DigDspRsmSh1DspLpNotchLp1AKxRString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1AKxR);
    createParam(DigDspRsmSh1DspLpNotchLp1AKxWString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1AKxW);
    createParam(DigDspRsmSh1DspLpNotchLp1AKyRString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1AKyR);
    createParam(DigDspRsmSh1DspLpNotchLp1AKyWString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1AKyW);
    createParam(DigDspRsmSh1DspLpNotchLp1BKxRString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1BKxR);
    createParam(DigDspRsmSh1DspLpNotchLp1BKxWString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1BKxW);
    createParam(DigDspRsmSh1DspLpNotchLp1BKyRString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1BKyR);
    createParam(DigDspRsmSh1DspLpNotchLp1BKyWString, asynParamInt32, &p_DigDspRsmSh1DspLpNotchLp1BKyW);
    createParam(DigDspRsmSh1DspModRString, asynParamInt32, &p_DigDspRsmSh1DspModR);
    createParam(DigDspRsmSh1DspModWString, asynParamInt32, &p_DigDspRsmSh1DspModW);
    createParam(DigDspRsmSh1DspPhStepRString, asynParamInt32, &p_DigDspRsmSh1DspPhStepR);
    createParam(DigDspRsmSh1DspPhStepWString, asynParamInt32, &p_DigDspRsmSh1DspPhStepW);
    createParam(DigDspRsmSh1DspPiezoPiezoDcRString, asynParamInt32, &p_DigDspRsmSh1DspPiezoPiezoDcR);
    createParam(DigDspRsmSh1DspPiezoPiezoDcWString, asynParamInt32, &p_DigDspRsmSh1DspPiezoPiezoDcW);
    createParam(DigDspRsmSh1DspTagRString, asynParamInt32, &p_DigDspRsmSh1DspTagR);
    createParam(DigDspRsmSh1DspTagWString, asynParamInt32, &p_DigDspRsmSh1DspTagW);
    createParam(DigDspRsmSh1DspUseFiberIqRString, asynParamInt32, &p_DigDspRsmSh1DspUseFiberIqR);
    createParam(DigDspRsmSh1DspUseFiberIqWString, asynParamInt32, &p_DigDspRsmSh1DspUseFiberIqW);
    createParam(DigDspRsmSh1DspWvSampPerRString, asynParamInt32, &p_DigDspRsmSh1DspWvSampPerR);
    createParam(DigDspRsmSh1DspWvSampPerWString, asynParamInt32, &p_DigDspRsmSh1DspWvSampPerW);
    createParam(DigDspRsmSh1DspWvShiftRString, asynParamInt32, &p_DigDspRsmSh1DspWvShiftR);
    createParam(DigDspRsmSh1DspWvShiftWString, asynParamInt32, &p_DigDspRsmSh1DspWvShiftW);
    createParam(DigDspSsaStimAmpstepRString, asynParamInt32, &p_DigDspSsaStimAmpstepR);
    createParam(DigDspSsaStimAmpstepWString, asynParamInt32, &p_DigDspSsaStimAmpstepW);
    createParam(DigDspSsaStimEnRString, asynParamInt32, &p_DigDspSsaStimEnR);
    createParam(DigDspSsaStimEnWString, asynParamInt32, &p_DigDspSsaStimEnW);
    createParam(DigDspSsaStimGPeriodRString, asynParamInt32, &p_DigDspSsaStimGPeriodR);
    createParam(DigDspSsaStimGPeriodWString, asynParamInt32, &p_DigDspSsaStimGPeriodW);
    createParam(DigDspSsaStimPertstepRString, asynParamInt32, &p_DigDspSsaStimPertstepR);
    createParam(DigDspSsaStimPertstepWString, asynParamInt32, &p_DigDspSsaStimPertstepW);
    createParam(DigDspTraceKeepRString, asynParamInt32, &p_DigDspTraceKeepR);
    createParam(DigDspTraceKeepWString, asynParamInt32, &p_DigDspTraceKeepW);
    createParam(DigDspTraceResetWeRString, asynParamInt32, &p_DigDspTraceResetWeR);
    createParam(DigDspTraceResetWeWString, asynParamInt32, &p_DigDspTraceResetWeW);
    createParam(DigDspTrigInternalRString, asynParamInt32, &p_DigDspTrigInternalR);
    createParam(DigDspTrigInternalWString, asynParamInt32, &p_DigDspTrigInternalW);
    createParam(DigDspTrigMdRString, asynParamInt32, &p_DigDspTrigMdR);
    createParam(DigDspTrigMdWString, asynParamInt32, &p_DigDspTrigMdW);
    createParam(DigDspWv0SrcRString, asynParamInt32, &p_DigDspWv0SrcR);
    createParam(DigDspWv0SrcWString, asynParamInt32, &p_DigDspWv0SrcW);
    createParam(DigDspWv1SrcRString, asynParamInt32, &p_DigDspWv1SrcR);
    createParam(DigDspWv1SrcWString, asynParamInt32, &p_DigDspWv1SrcW);
    createParam(DomainJumpRealignRString, asynParamInt32, &p_DomainJumpRealignR);
    createParam(DomainJumpRealignWString, asynParamInt32, &p_DomainJumpRealignW);
    createParam(FfffffffRString, asynParamInt32, &p_FfffffffR);
    createParam(Fquency4XoutRString, asynParamInt32, &p_Fquency4XoutR);
    createParam(FquencyAdcRString, asynParamInt32, &p_FquencyAdcR);
    createParam(FquencyClkout3RString, asynParamInt32, &p_FquencyClkout3R);
    createParam(FquencyDcoRString, asynParamInt32, &p_FquencyDcoR);
    createParam(FquencyGtxRxRString, asynParamInt32, &p_FquencyGtxRxR);
    createParam(FquencyGtxTxRString, asynParamInt32, &p_FquencyGtxTxR);
    createParam(H0D0A0D0ARString, asynParamInt32, &p_H0D0A0D0AR);
    createParam(HistDoutRString, asynParamInt32, &p_HistDoutR);
    createParam(HistStatusRString, asynParamInt32, &p_HistStatusR);
    createParam(IccCfgRString, asynParamInt32, &p_IccCfgR);
    createParam(IccCfgWString, asynParamInt32, &p_IccCfgW);
    createParam(IdelayBaseRString, asynParamInt32, &p_IdelayBaseR);
    createParam(IdelayValueOutU2Bits19To0RString, asynParamInt32, &p_IdelayValueOutU2Bits19To0R);
    createParam(IdelayValueOutU2Bits39To20RString, asynParamInt32, &p_IdelayValueOutU2Bits39To20R);
    createParam(IdelayValueOutU3Bits19To0RString, asynParamInt32, &p_IdelayValueOutU3Bits19To0R);
    createParam(IdelayValueOutU3Bits39To20RString, asynParamInt32, &p_IdelayValueOutU3Bits39To20R);
    createParam(LlspiResultRString, asynParamInt32, &p_LlspiResultR);
    createParam(LlspiStatusRString, asynParamInt32, &p_LlspiStatusR);
    createParam(OWoRString, asynParamInt32, &p_OWoR);
    createParam(PhxDoutRString, asynParamInt32, &p_PhxDoutR);
    createParam(PhxStatusRString, asynParamInt32, &p_PhxStatusR);
    createParam(QsfpBufRString, asynParamInt32, &p_QsfpBufR);
    createParam(QsfpI2CRegRString, asynParamInt32, &p_QsfpI2CRegR);
    createParam(QsfpI2CRegWString, asynParamInt32, &p_QsfpI2CRegW);
    createParam(RldRString, asynParamInt32, &p_RldR);
    createParam(ScannerResultRString, asynParamInt32, &p_ScannerResultR);
    createParam(SfpAddressSetRString, asynParamInt32, &p_SfpAddressSetR);
    createParam(SfpAddressSetWString, asynParamInt32, &p_SfpAddressSetW);
    createParam(SlowChainOutRString, asynParamInt32, &p_SlowChainOutR);
    createParam(TagNowRString, asynParamInt32, &p_TagNowR);
    createParam(TagNowWString, asynParamInt32, &p_TagNowW);
    createParam(TraceIBufRString, asynParamInt32, &p_TraceIBufR);
    createParam(TraceIqBufRString, asynParamInt32, &p_TraceIqBufR);
    createParam(TraceQBufRString, asynParamInt32, &p_TraceQBufR);
    createParam(TraceStatus1RString, asynParamInt32, &p_TraceStatus1R);
    createParam(TraceStatus2RString, asynParamInt32, &p_TraceStatus2R);
    createParam(Wv0OutRString, asynParamInt32, &p_Wv0OutR);
    createParam(Wv1OutRString, asynParamInt32, &p_Wv1OutR);
    createParam(WvformsAvailableRString, asynParamInt32, &p_WvformsAvailableR);

    createParam(WaveformI16BitString, asynParamInt16Array, &p_WaveformI16Bit);
    createParam(WaveformQ16BitString, asynParamInt16Array, &p_WaveformQ16Bit);
    createParam(WaveformI22BitString, asynParamInt32Array, &p_WaveformI22Bit);
    createParam(WaveformQ22BitString, asynParamInt32Array, &p_WaveformQ22Bit);
    createParam(IQNActiveString, asynParamInt32, &p_IQNActive);
    createParam(IQBitWidthString, asynParamInt32, &p_IQBitWidth);
    createParam(IQ16BitNELMString, asynParamInt32, &p_IQ16BitNELM);
    createParam(IQ22BitNELMString, asynParamInt32, &p_IQ22BitNELM);

    PolledRegMsgSize_ = readRegCount + (readRegCount / 175) + 1;
	// A canned request to read all registers
    // NOTE: To avoid side effects, any registers with U or spi in their name have been
    // manually replaced with H0D0A0D0ARAdr
    pPolledRegMsg_ = new FpgaReg[PolledRegMsgSize_]
	{
			{ 0, 0 },
			{ flagReadMask | HellRAdr, blankData },
			{ flagReadMask | OWoRAdr, blankData },
			{ flagReadMask | RldRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | FfffffffRAdr, blankData },
			{ flagReadMask | FquencyAdcRAdr, blankData },
			{ flagReadMask | Fquency4XoutRAdr, blankData },
			{ flagReadMask | FquencyClkout3RAdr, blankData },
			{ flagReadMask | FquencyDcoRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | Wv0OutRAdr, blankData },
			{ flagReadMask | Wv1OutRAdr, blankData },
			{ flagReadMask | AdcTestWv1OutRAdr, blankData },
			{ flagReadMask | AdcTestWv2OutRAdr, blankData },
			{ flagReadMask | AdcTestWv3OutRAdr, blankData },
			{ flagReadMask | AdcTestWv4OutRAdr, blankData },
			{ flagReadMask | CtraceRunningRAdr, blankData },
			{ flagReadMask | FquencyGtxTxRAdr, blankData },
			{ flagReadMask | FquencyGtxRxRAdr, blankData },
			{ flagReadMask | HistStatusRAdr, blankData },
			{ flagReadMask | PhxStatusRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | CrcErrorsRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | AdcTestTrigCntRAdr, blankData },
			{ flagReadMask | WvformsAvailableRAdr, blankData },
			{ flagReadMask | BanyanStatusRAdr, blankData },
			{ flagReadMask | SlowChainOutRAdr, blankData },
			{ flagReadMask | TraceStatus1RAdr, blankData },
			{ flagReadMask | TraceStatus2RAdr, blankData },
			{ flagReadMask | IdelayBaseRAdr, blankData },
			{ flagReadMask | HistDoutRAdr, blankData },
			{ flagReadMask | PhxDoutRAdr, blankData },
			{ flagReadMask | BanyanBufRAdr, blankData },
			{ flagReadMask | ScannerResultRAdr, blankData },
			{ flagReadMask | TraceIqBufRAdr, blankData },
			{ flagReadMask | TraceIBufRAdr, blankData },
			{ flagReadMask | TraceQBufRAdr, blankData },
			{ flagReadMask | QsfpBufRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechNoiseCplKOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechResnrPropConstRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecDot0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecDot1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecDot2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecOuterProd0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecOuterProd1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecOuterProd2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PiezoCplKOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecDot0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecDot1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecDot2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecOuterProd0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecOuterProd1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecOuterProd2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PiezoCplKOutRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcCoeffRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcLimRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcSetmpRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcCoeffRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcLimRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcSetmpRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4EdcoCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4EdcoPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4EdcoCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4EdcoPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1AKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1AKyRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1BKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1BKyRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1AKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1AKyRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1BKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1BKyRAdr, blankData },
			{ flagReadMask | AdcMmcmRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | DigCfgBanyanMaskRAdr, blankData },
			{ flagReadMask | DigCfgBitslipRAdr, blankData },
			{ flagReadMask | DigCfgIdelayctrlResetRRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | DigCfgMmcmResetRRAdr, blankData },
			{ flagReadMask | DigCfgPeriphConfigRAdr, blankData },
			{ flagReadMask | DigCfgPhxTrigRAdr, blankData },
			{ flagReadMask | DigCfgRawadcTrigRAdr, blankData },
			{ flagReadMask | DigCfgScanTriggerWeRAdr, blankData },
			{ flagReadMask | DigCfgScannerDebugRAdr, blankData },
			{ flagReadMask | DigCfgSyncAd7794CsetRAdr, blankData },
			{ flagReadMask | DigCfgSyncTps62210CsetRAdr, blankData },
			{ flagReadMask | DigDspAdcTestMdRAdr, blankData },
			{ flagReadMask | DigDspAdcTestResetRAdr, blankData },
			{ flagReadMask | DigDspAmplitudeRAdr, blankData },
			{ flagReadMask | DigDspAverageLenRAdr, blankData },
			{ flagReadMask | DigDspBufTrigRAdr, blankData },
			{ flagReadMask | DigDspCicPeriodRAdr, blankData },
			{ flagReadMask | DigDspCicShiftRAdr, blankData },
			{ flagReadMask | DigDspCircleBufFlipRAdr, blankData },
			{ flagReadMask | DigDspDacDdsResetRAdr, blankData },
			{ flagReadMask | DigDspDacMdRAdr, blankData },
			{ flagReadMask | DigDspDdsaModRAdr, blankData },
			{ flagReadMask | DigDspDdsaPhstepHRAdr, blankData },
			{ flagReadMask | DigDspDdsaPhstepLRAdr, blankData },
			{ flagReadMask | DigDspHistCountWStrobeRAdr, blankData },
			{ flagReadMask | DigDspLlrfDspDacEnRAdr, blankData },
			{ flagReadMask | DigDspLoAmpRAdr, blankData },
			{ flagReadMask | DigDspModRAdr, blankData },
			{ flagReadMask | DigDspPhStepHRAdr, blankData },
			{ flagReadMask | DigDspPhStepLRAdr, blankData },
			{ flagReadMask | DigDspPrcDspCselRAdr, blankData },
			{ flagReadMask | DigDspPrcDspPrlCfgRAdr, blankData },
			{ flagReadMask | DigDspPrcDspPrlGainRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam0ModRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam0PhInitRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam0PhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam1ModRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam1PhInitRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam1PhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechPrngIvaRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechPrngIvbRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechPrngRndRunRAdr, blankData },
			{ flagReadMask | DigDspRsmC0ACoffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC0AForOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC0ARflOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC0AmpLpBwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Efrq0CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Efrq1CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Efrq2CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode0BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode0BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode0DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode1BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode1BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode1DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode2BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode2BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode2DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecModRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmC0ComprSatCtlRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PrngIvaRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PrngIvbRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PrngRndRunRAdr, blankData },
			{ flagReadMask | DigDspRsmC1ACoffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1AForOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1ARflOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1AmpLpBwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Efrq0CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Efrq1CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Efrq2CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode0BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode0BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode0DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode1BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode1BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode1DrvCplRAdr, blankData },
		{ 0, 0 },
			{ flagReadMask | DigDspRsmC1C4Emode2BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode2BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode2DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecModRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmC1ComprSatCtlRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PrngIvaRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PrngIvbRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PrngRndRunRAdr, blankData },
			{ flagReadMask | DigDspRsmDacIqPhRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspChanKeepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkCrsScaleRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcSelEnRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcSelThreshRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspModRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspPiezoPiezoDcRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspTagRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspUseFiberIqRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspWvSampPerRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspWvShiftRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspChanKeepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkCrsScaleRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcSelEnRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcSelThreshRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspModRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspPiezoPiezoDcRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspTagRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspUseFiberIqRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspWvSampPerRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspWvShiftRAdr, blankData },
			{ flagReadMask | DigDspRewindRAdr, blankData },
			{ flagReadMask | DigDspSsaStimAmpstepRAdr, blankData },
			{ flagReadMask | DigDspSsaStimEnRAdr, blankData },
			{ flagReadMask | DigDspSsaStimGPeriodRAdr, blankData },
			{ flagReadMask | DigDspSsaStimPertstepRAdr, blankData },
			{ flagReadMask | DigDspTraceKeepRAdr, blankData },
			{ flagReadMask | DigDspTraceResetWeRAdr, blankData },
			{ flagReadMask | DigDspTrigInternalRAdr, blankData },
			{ flagReadMask | DigDspTrigMdRAdr, blankData },
			{ flagReadMask | DigDspWv0SrcRAdr, blankData },
			{ flagReadMask | DigDspWv1SrcRAdr, blankData },
			{ flagReadMask | DomainJumpRealignRAdr, blankData },
			{ flagReadMask | IccCfgRAdr, blankData },
			{ flagReadMask | QsfpI2CRegRAdr, blankData },
			{ flagReadMask | SfpAddressSetRAdr, blankData },
			{ flagReadMask | TagNowRAdr, blankData },
	};

    printf(" polled register msg size is %d.\n", PolledRegMsgSize_);
	htonFpgaRegArray(pPolledRegMsg_, PolledRegMsgSize_);

    epicsThreadSleep(defaultPollPeriod);
    printf("%s created %ld parameters.\n",__PRETTY_FUNCTION__,NUM_SCLLRFPRC_PARAMS);

	reqWaveEventId_ = epicsEventMustCreate(epicsEventEmpty);
	startWaveformRequester();

    epicsThreadSleep(defaultPollPeriod);
    wakeupPoller();
    wakeupReader();

}

scllrfPRC::~scllrfPRC()
{
	isShuttingDown_ = true;
	epicsThreadSleep(0.1); // Allow threads to run and exit
	epicsEventSignal(reqWaveEventId_);
	wakeupPoller();
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller(); // call this twice in case the poller was never set to run
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupReader();
	pasynOctetSyncIO->disconnect(pOctetAsynUser_);
	pasynCommonSyncIO->disconnectDevice(pCommonAsynUser_);
	pasynCommonSyncIO->disconnect(pCommonAsynUser_);
}

/** Called when you have the asyn parameter name and want the corresponding
 * register address.
  * \param[in] function From pAsynUser->reason, corresponding to a registered parameter.
  * \param[in] pToFpga Pointer to the {Address, Data} structure where the register address will be written
  * \param[in] nElements Number of elements to read. */
asynStatus scllrfPRC::functionToRegister(const int function, FpgaReg *pToFpga)
{
	asynStatus status = asynSuccess;

    if( function == p_HellR )
    {
		pToFpga->addr = HellRAdr|flagReadMask;
    }
    else
    if( function == p_U15SdioAsSdoR )
    {
		pToFpga->addr = U15SdioAsSdoRAdr|flagReadMask;
    }
    else
    if( function == p_U15SdoAddrR )
    {
		pToFpga->addr = U15SdoAddrRAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiReadyR )
    {
		pToFpga->addr = U15SpiReadyRAdr|flagReadMask;
    }
    else
    if( function == p_U18SdioAsSdoR )
    {
		pToFpga->addr = U18SdioAsSdoRAdr|flagReadMask;
    }
    else
    if( function == p_U18SdoAddrR )
    {
		pToFpga->addr = U18SdoAddrRAdr|flagReadMask;
    }
    else
    if( function == p_U18SpiReadyR )
    {
		pToFpga->addr = U18SpiReadyRAdr|flagReadMask;
    }
    else
    if( function == p_U2Doutbits31To0R )
    {
		pToFpga->addr = U2Doutbits31To0RAdr|flagReadMask;
    }
    else
    if( function == p_U2Doutbits63To32R )
    {
		pToFpga->addr = U2Doutbits63To32RAdr|flagReadMask;
    }
    else
    if( function == p_U3Doutbits31To0R )
    {
		pToFpga->addr = U3Doutbits31To0RAdr|flagReadMask;
    }
    else
    if( function == p_U3Doutbits63To32R )
    {
		pToFpga->addr = U3Doutbits63To32RAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiRdbkR )
    {
		pToFpga->addr = U15SpiRdbkRAdr|flagReadMask;
    }
    else
    if( function == p_U18SpiRdbkR )
    {
		pToFpga->addr = U18SpiRdbkRAdr|flagReadMask;
    }
    else
    if( function == p_AdcMmcmR )
    {
		pToFpga->addr = AdcMmcmRAdr|flagReadMask;
    }
    else
    if( function == p_AdcMmcmW )
    {
		pToFpga->addr = AdcMmcmWAdr;
    }
    else
    if( function == p_AdcTestTrigCntR )
    {
		pToFpga->addr = AdcTestTrigCntRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWv1OutR )
    {
		pToFpga->addr = AdcTestWv1OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWv2OutR )
    {
		pToFpga->addr = AdcTestWv2OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWv3OutR )
    {
		pToFpga->addr = AdcTestWv3OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWv4OutR )
    {
		pToFpga->addr = AdcTestWv4OutRAdr|flagReadMask;
    }
    else
    if( function == p_BanyanBufR )
    {
		pToFpga->addr = BanyanBufRAdr|flagReadMask;
    }
    else
    if( function == p_BanyanStatusR )
    {
		pToFpga->addr = BanyanStatusRAdr|flagReadMask;
    }
    else
    if( function == p_ClkPhDiffOutU2R )
    {
		pToFpga->addr = ClkPhDiffOutU2RAdr|flagReadMask;
    }
    else
    if( function == p_ClkPhDiffOutU3R )
    {
		pToFpga->addr = ClkPhDiffOutU3RAdr|flagReadMask;
    }
    else
    if( function == p_CrcErrorsR )
    {
		pToFpga->addr = CrcErrorsRAdr|flagReadMask;
    }
    else
    if( function == p_CtraceRunningR )
    {
		pToFpga->addr = CtraceRunningRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU15SpiDataAddrRR )
    {
		pToFpga->addr = DigCfgU15SpiDataAddrRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU15SpiDataAddrRW )
    {
		pToFpga->addr = DigCfgU15SpiDataAddrRWAdr;
    }
    else
    if( function == p_DigCfgU15SpiReadAndStartRR )
    {
		pToFpga->addr = DigCfgU15SpiReadAndStartRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU15SpiReadAndStartRW )
    {
		pToFpga->addr = DigCfgU15SpiReadAndStartRWAdr;
    }
    else
    if( function == p_DigCfgU18SpiDataAddrRR )
    {
		pToFpga->addr = DigCfgU18SpiDataAddrRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU18SpiDataAddrRW )
    {
		pToFpga->addr = DigCfgU18SpiDataAddrRWAdr;
    }
    else
    if( function == p_DigCfgU18SpiReadAndStartRR )
    {
		pToFpga->addr = DigCfgU18SpiReadAndStartRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU18SpiReadAndStartRW )
    {
		pToFpga->addr = DigCfgU18SpiReadAndStartRWAdr;
    }
    else
    if( function == p_DigCfgU2ClkResetRR )
    {
		pToFpga->addr = DigCfgU2ClkResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU2ClkResetRW )
    {
		pToFpga->addr = DigCfgU2ClkResetRWAdr;
    }
    else
    if( function == p_DigCfgU2IserdesResetRR )
    {
		pToFpga->addr = DigCfgU2IserdesResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU2IserdesResetRW )
    {
		pToFpga->addr = DigCfgU2IserdesResetRWAdr;
    }
    else
    if( function == p_DigCfgU3ClkResetRR )
    {
		pToFpga->addr = DigCfgU3ClkResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU3ClkResetRW )
    {
		pToFpga->addr = DigCfgU3ClkResetRWAdr;
    }
    else
    if( function == p_DigCfgU3IserdesResetRR )
    {
		pToFpga->addr = DigCfgU3IserdesResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU3IserdesResetRW )
    {
		pToFpga->addr = DigCfgU3IserdesResetRWAdr;
    }
    else
    if( function == p_DigCfgU4ResetRR )
    {
		pToFpga->addr = DigCfgU4ResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgU4ResetRW )
    {
		pToFpga->addr = DigCfgU4ResetRWAdr;
    }
    else
    if( function == p_DigCfgBanyanMaskR )
    {
		pToFpga->addr = DigCfgBanyanMaskRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgBanyanMaskW )
    {
		pToFpga->addr = DigCfgBanyanMaskWAdr;
    }
    else
    if( function == p_DigCfgBitslipR )
    {
		pToFpga->addr = DigCfgBitslipRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgBitslipW )
    {
		pToFpga->addr = DigCfgBitslipWAdr;
    }
    else
    if( function == p_DigCfgIdelayctrlResetRR )
    {
		pToFpga->addr = DigCfgIdelayctrlResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgIdelayctrlResetRW )
    {
		pToFpga->addr = DigCfgIdelayctrlResetRWAdr;
    }
    else
    if( function == p_DigCfgLlspiWeR )
    {
		pToFpga->addr = DigCfgLlspiWeRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgLlspiWeW )
    {
		pToFpga->addr = DigCfgLlspiWeWAdr;
    }
    else
    if( function == p_DigCfgMmcmResetRR )
    {
		pToFpga->addr = DigCfgMmcmResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgMmcmResetRW )
    {
		pToFpga->addr = DigCfgMmcmResetRWAdr;
    }
    else
    if( function == p_DigCfgPeriphConfigR )
    {
		pToFpga->addr = DigCfgPeriphConfigRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgPeriphConfigW )
    {
		pToFpga->addr = DigCfgPeriphConfigWAdr;
    }
    else
    if( function == p_DigCfgPhxTrigR )
    {
		pToFpga->addr = DigCfgPhxTrigRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgPhxTrigW )
    {
		pToFpga->addr = DigCfgPhxTrigWAdr;
    }
    else
    if( function == p_DigCfgRawadcTrigR )
    {
		pToFpga->addr = DigCfgRawadcTrigRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgRawadcTrigW )
    {
		pToFpga->addr = DigCfgRawadcTrigWAdr;
    }
    else
    if( function == p_DigCfgScanTriggerWeR )
    {
		pToFpga->addr = DigCfgScanTriggerWeRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgScanTriggerWeW )
    {
		pToFpga->addr = DigCfgScanTriggerWeWAdr;
    }
    else
    if( function == p_DigCfgScannerDebugR )
    {
		pToFpga->addr = DigCfgScannerDebugRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgScannerDebugW )
    {
		pToFpga->addr = DigCfgScannerDebugWAdr;
    }
    else
    if( function == p_DigCfgSyncAd7794CsetR )
    {
		pToFpga->addr = DigCfgSyncAd7794CsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgSyncAd7794CsetW )
    {
		pToFpga->addr = DigCfgSyncAd7794CsetWAdr;
    }
    else
    if( function == p_DigCfgSyncTps62210CsetR )
    {
		pToFpga->addr = DigCfgSyncTps62210CsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigCfgSyncTps62210CsetW )
    {
		pToFpga->addr = DigCfgSyncTps62210CsetWAdr;
    }
    else
    if( function == p_DigDspAdcTestMdR )
    {
		pToFpga->addr = DigDspAdcTestMdRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAdcTestMdW )
    {
		pToFpga->addr = DigDspAdcTestMdWAdr;
    }
    else
    if( function == p_DigDspAdcTestResetR )
    {
		pToFpga->addr = DigDspAdcTestResetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAdcTestResetW )
    {
		pToFpga->addr = DigDspAdcTestResetWAdr;
    }
    else
    if( function == p_DigDspAmplitudeR )
    {
		pToFpga->addr = DigDspAmplitudeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAmplitudeW )
    {
		pToFpga->addr = DigDspAmplitudeWAdr;
    }
    else
    if( function == p_DigDspAverageLenR )
    {
		pToFpga->addr = DigDspAverageLenRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAverageLenW )
    {
		pToFpga->addr = DigDspAverageLenWAdr;
    }
    else
    if( function == p_DigDspBufTrigR )
    {
		pToFpga->addr = DigDspBufTrigRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspBufTrigW )
    {
		pToFpga->addr = DigDspBufTrigWAdr;
    }
    else
    if( function == p_DigDspCicPeriodR )
    {
		pToFpga->addr = DigDspCicPeriodRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspCicPeriodW )
    {
		pToFpga->addr = DigDspCicPeriodWAdr;
    }
    else
    if( function == p_DigDspCicShiftR )
    {
		pToFpga->addr = DigDspCicShiftRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspCicShiftW )
    {
		pToFpga->addr = DigDspCicShiftWAdr;
    }
    else
    if( function == p_DigDspCircleBufFlipR )
    {
		pToFpga->addr = DigDspCircleBufFlipRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspCircleBufFlipW )
    {
		pToFpga->addr = DigDspCircleBufFlipWAdr;
    }
    else
    if( function == p_DigDspDacDdsResetR )
    {
		pToFpga->addr = DigDspDacDdsResetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDacDdsResetW )
    {
		pToFpga->addr = DigDspDacDdsResetWAdr;
    }
    else
    if( function == p_DigDspDacMdR )
    {
		pToFpga->addr = DigDspDacMdRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDacMdW )
    {
		pToFpga->addr = DigDspDacMdWAdr;
    }
    else
    if( function == p_DigDspDdsaModR )
    {
		pToFpga->addr = DigDspDdsaModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDdsaModW )
    {
		pToFpga->addr = DigDspDdsaModWAdr;
    }
    else
    if( function == p_DigDspDdsaPhstepHR )
    {
		pToFpga->addr = DigDspDdsaPhstepHRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDdsaPhstepHW )
    {
		pToFpga->addr = DigDspDdsaPhstepHWAdr;
    }
    else
    if( function == p_DigDspDdsaPhstepLR )
    {
		pToFpga->addr = DigDspDdsaPhstepLRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDdsaPhstepLW )
    {
		pToFpga->addr = DigDspDdsaPhstepLWAdr;
    }
    else
    if( function == p_DigDspHistCountWStrobeR )
    {
		pToFpga->addr = DigDspHistCountWStrobeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspHistCountWStrobeW )
    {
		pToFpga->addr = DigDspHistCountWStrobeWAdr;
    }
    else
    if( function == p_DigDspLlrfDspDacEnR )
    {
		pToFpga->addr = DigDspLlrfDspDacEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspLlrfDspDacEnW )
    {
		pToFpga->addr = DigDspLlrfDspDacEnWAdr;
    }
    else
    if( function == p_DigDspLoAmpR )
    {
		pToFpga->addr = DigDspLoAmpRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspLoAmpW )
    {
		pToFpga->addr = DigDspLoAmpWAdr;
    }
    else
    if( function == p_DigDspModR )
    {
		pToFpga->addr = DigDspModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspModW )
    {
		pToFpga->addr = DigDspModWAdr;
    }
    else
    if( function == p_DigDspPhStepHR )
    {
		pToFpga->addr = DigDspPhStepHRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPhStepHW )
    {
		pToFpga->addr = DigDspPhStepHWAdr;
    }
    else
    if( function == p_DigDspPhStepLR )
    {
		pToFpga->addr = DigDspPhStepLRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPhStepLW )
    {
		pToFpga->addr = DigDspPhStepLWAdr;
    }
    else
    if( function == p_DigDspPrcDspCselR )
    {
		pToFpga->addr = DigDspPrcDspCselRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPrcDspCselW )
    {
		pToFpga->addr = DigDspPrcDspCselWAdr;
    }
    else
    if( function == p_DigDspPrcDspPrlCfgR )
    {
		pToFpga->addr = DigDspPrcDspPrlCfgRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPrcDspPrlCfgW )
    {
		pToFpga->addr = DigDspPrcDspPrlCfgWAdr;
    }
    else
    if( function == p_DigDspPrcDspPrlGainR )
    {
		pToFpga->addr = DigDspPrcDspPrlGainRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPrcDspPrlGainW )
    {
		pToFpga->addr = DigDspPrcDspPrlGainWAdr;
    }
    else
    if( function == p_DigDspRewindR )
    {
		pToFpga->addr = DigDspRewindRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRewindW )
    {
		pToFpga->addr = DigDspRewindWAdr;
    }
    else
    if( function == p_DigDspRsmBeam0ModR )
    {
		pToFpga->addr = DigDspRsmBeam0ModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmBeam0ModW )
    {
		pToFpga->addr = DigDspRsmBeam0ModWAdr;
    }
    else
    if( function == p_DigDspRsmBeam0PhInitR )
    {
		pToFpga->addr = DigDspRsmBeam0PhInitRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmBeam0PhInitW )
    {
		pToFpga->addr = DigDspRsmBeam0PhInitWAdr;
    }
    else
    if( function == p_DigDspRsmBeam0PhStepR )
    {
		pToFpga->addr = DigDspRsmBeam0PhStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmBeam0PhStepW )
    {
		pToFpga->addr = DigDspRsmBeam0PhStepWAdr;
    }
    else
    if( function == p_DigDspRsmBeam1ModR )
    {
		pToFpga->addr = DigDspRsmBeam1ModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmBeam1ModW )
    {
		pToFpga->addr = DigDspRsmBeam1ModWAdr;
    }
    else
    if( function == p_DigDspRsmBeam1PhInitR )
    {
		pToFpga->addr = DigDspRsmBeam1PhInitRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmBeam1PhInitW )
    {
		pToFpga->addr = DigDspRsmBeam1PhInitWAdr;
    }
    else
    if( function == p_DigDspRsmBeam1PhStepR )
    {
		pToFpga->addr = DigDspRsmBeam1PhStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmBeam1PhStepW )
    {
		pToFpga->addr = DigDspRsmBeam1PhStepWAdr;
    }
    else
    if( function == p_DigDspRsmC0ACoffsetR )
    {
		pToFpga->addr = DigDspRsmC0ACoffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0ACoffsetW )
    {
		pToFpga->addr = DigDspRsmC0ACoffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC0AForOffsetR )
    {
		pToFpga->addr = DigDspRsmC0AForOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0AForOffsetW )
    {
		pToFpga->addr = DigDspRsmC0AForOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC0ARflOffsetR )
    {
		pToFpga->addr = DigDspRsmC0ARflOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0ARflOffsetW )
    {
		pToFpga->addr = DigDspRsmC0ARflOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC0AmpLpBwR )
    {
		pToFpga->addr = DigDspRsmC0AmpLpBwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0AmpLpBwW )
    {
		pToFpga->addr = DigDspRsmC0AmpLpBwWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4EdcoCplR )
    {
		pToFpga->addr = DigDspRsmC0C4EdcoCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4EdcoCplW )
    {
		pToFpga->addr = DigDspRsmC0C4EdcoCplWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4EdcoPhOffsetR )
    {
		pToFpga->addr = DigDspRsmC0C4EdcoPhOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4EdcoPhOffsetW )
    {
		pToFpga->addr = DigDspRsmC0C4EdcoPhOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Efrq0CrsFqR )
    {
		pToFpga->addr = DigDspRsmC0C4Efrq0CrsFqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Efrq0CrsFqW )
    {
		pToFpga->addr = DigDspRsmC0C4Efrq0CrsFqWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Efrq1CrsFqR )
    {
		pToFpga->addr = DigDspRsmC0C4Efrq1CrsFqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Efrq1CrsFqW )
    {
		pToFpga->addr = DigDspRsmC0C4Efrq1CrsFqWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Efrq2CrsFqR )
    {
		pToFpga->addr = DigDspRsmC0C4Efrq2CrsFqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Efrq2CrsFqW )
    {
		pToFpga->addr = DigDspRsmC0C4Efrq2CrsFqWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecDot0KOutR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecDot0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecDot0KOutW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecDot0KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecDot1KOutR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecDot1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecDot1KOutW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecDot1KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecDot2KOutR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecDot2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecDot2KOutW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecDot2KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecModR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecModW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecModWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecOuterProd0KOutR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecOuterProd0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecOuterProd0KOutW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecOuterProd0KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecOuterProd1KOutR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecOuterProd1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecOuterProd1KOutW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecOuterProd1KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecOuterProd2KOutR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecOuterProd2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecOuterProd2KOutW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecOuterProd2KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4ElecPhStepR )
    {
		pToFpga->addr = DigDspRsmC0C4ElecPhStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4ElecPhStepW )
    {
		pToFpga->addr = DigDspRsmC0C4ElecPhStepWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode0BeamCplR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode0BeamCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode0BeamCplW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode0BeamCplWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode0BwR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode0BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode0BwW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode0BwWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode0DrvCplR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode0DrvCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode0DrvCplW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode0DrvCplWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode1BeamCplR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode1BeamCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode1BeamCplW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode1BeamCplWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode1BwR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode1BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode1BwW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode1BwWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode1DrvCplR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode1DrvCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode1DrvCplW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode1DrvCplWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode2BeamCplR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode2BeamCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode2BeamCplW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode2BeamCplWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode2BwR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode2BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode2BwW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode2BwWAdr;
    }
    else
    if( function == p_DigDspRsmC0C4Emode2DrvCplR )
    {
		pToFpga->addr = DigDspRsmC0C4Emode2DrvCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0C4Emode2DrvCplW )
    {
		pToFpga->addr = DigDspRsmC0C4Emode2DrvCplWAdr;
    }
    else
    if( function == p_DigDspRsmC0ComprSatCtlR )
    {
		pToFpga->addr = DigDspRsmC0ComprSatCtlRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0ComprSatCtlW )
    {
		pToFpga->addr = DigDspRsmC0ComprSatCtlWAdr;
    }
    else
    if( function == p_DigDspRsmC0PiezoCplKOutR )
    {
		pToFpga->addr = DigDspRsmC0PiezoCplKOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0PiezoCplKOutW )
    {
		pToFpga->addr = DigDspRsmC0PiezoCplKOutWAdr;
    }
    else
    if( function == p_DigDspRsmC0PrngIvaR )
    {
		pToFpga->addr = DigDspRsmC0PrngIvaRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0PrngIvaW )
    {
		pToFpga->addr = DigDspRsmC0PrngIvaWAdr;
    }
    else
    if( function == p_DigDspRsmC0PrngIvbR )
    {
		pToFpga->addr = DigDspRsmC0PrngIvbRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0PrngIvbW )
    {
		pToFpga->addr = DigDspRsmC0PrngIvbWAdr;
    }
    else
    if( function == p_DigDspRsmC0PrngRndRunR )
    {
		pToFpga->addr = DigDspRsmC0PrngRndRunRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC0PrngRndRunW )
    {
		pToFpga->addr = DigDspRsmC0PrngRndRunWAdr;
    }
    else
    if( function == p_DigDspRsmC1ACoffsetR )
    {
		pToFpga->addr = DigDspRsmC1ACoffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1ACoffsetW )
    {
		pToFpga->addr = DigDspRsmC1ACoffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC1AForOffsetR )
    {
		pToFpga->addr = DigDspRsmC1AForOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1AForOffsetW )
    {
		pToFpga->addr = DigDspRsmC1AForOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC1ARflOffsetR )
    {
		pToFpga->addr = DigDspRsmC1ARflOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1ARflOffsetW )
    {
		pToFpga->addr = DigDspRsmC1ARflOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC1AmpLpBwR )
    {
		pToFpga->addr = DigDspRsmC1AmpLpBwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1AmpLpBwW )
    {
		pToFpga->addr = DigDspRsmC1AmpLpBwWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4EdcoCplR )
    {
		pToFpga->addr = DigDspRsmC1C4EdcoCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4EdcoCplW )
    {
		pToFpga->addr = DigDspRsmC1C4EdcoCplWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4EdcoPhOffsetR )
    {
		pToFpga->addr = DigDspRsmC1C4EdcoPhOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4EdcoPhOffsetW )
    {
		pToFpga->addr = DigDspRsmC1C4EdcoPhOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Efrq0CrsFqR )
    {
		pToFpga->addr = DigDspRsmC1C4Efrq0CrsFqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Efrq0CrsFqW )
    {
		pToFpga->addr = DigDspRsmC1C4Efrq0CrsFqWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Efrq1CrsFqR )
    {
		pToFpga->addr = DigDspRsmC1C4Efrq1CrsFqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Efrq1CrsFqW )
    {
		pToFpga->addr = DigDspRsmC1C4Efrq1CrsFqWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Efrq2CrsFqR )
    {
		pToFpga->addr = DigDspRsmC1C4Efrq2CrsFqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Efrq2CrsFqW )
    {
		pToFpga->addr = DigDspRsmC1C4Efrq2CrsFqWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecDot0KOutR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecDot0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecDot0KOutW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecDot0KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecDot1KOutR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecDot1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecDot1KOutW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecDot1KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecDot2KOutR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecDot2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecDot2KOutW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecDot2KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecModR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecModW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecModWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecOuterProd0KOutR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecOuterProd0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecOuterProd0KOutW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecOuterProd0KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecOuterProd1KOutR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecOuterProd1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecOuterProd1KOutW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecOuterProd1KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecOuterProd2KOutR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecOuterProd2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecOuterProd2KOutW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecOuterProd2KOutWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4ElecPhStepR )
    {
		pToFpga->addr = DigDspRsmC1C4ElecPhStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4ElecPhStepW )
    {
		pToFpga->addr = DigDspRsmC1C4ElecPhStepWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode0BeamCplR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode0BeamCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode0BeamCplW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode0BeamCplWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode0BwR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode0BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode0BwW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode0BwWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode0DrvCplR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode0DrvCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode0DrvCplW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode0DrvCplWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode1BeamCplR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode1BeamCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode1BeamCplW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode1BeamCplWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode1BwR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode1BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode1BwW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode1BwWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode1DrvCplR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode1DrvCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode1DrvCplW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode1DrvCplWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode2BeamCplR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode2BeamCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode2BeamCplW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode2BeamCplWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode2BwR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode2BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode2BwW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode2BwWAdr;
    }
    else
    if( function == p_DigDspRsmC1C4Emode2DrvCplR )
    {
		pToFpga->addr = DigDspRsmC1C4Emode2DrvCplRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1C4Emode2DrvCplW )
    {
		pToFpga->addr = DigDspRsmC1C4Emode2DrvCplWAdr;
    }
    else
    if( function == p_DigDspRsmC1ComprSatCtlR )
    {
		pToFpga->addr = DigDspRsmC1ComprSatCtlRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1ComprSatCtlW )
    {
		pToFpga->addr = DigDspRsmC1ComprSatCtlWAdr;
    }
    else
    if( function == p_DigDspRsmC1PiezoCplKOutR )
    {
		pToFpga->addr = DigDspRsmC1PiezoCplKOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1PiezoCplKOutW )
    {
		pToFpga->addr = DigDspRsmC1PiezoCplKOutWAdr;
    }
    else
    if( function == p_DigDspRsmC1PrngIvaR )
    {
		pToFpga->addr = DigDspRsmC1PrngIvaRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1PrngIvaW )
    {
		pToFpga->addr = DigDspRsmC1PrngIvaWAdr;
    }
    else
    if( function == p_DigDspRsmC1PrngIvbR )
    {
		pToFpga->addr = DigDspRsmC1PrngIvbRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1PrngIvbW )
    {
		pToFpga->addr = DigDspRsmC1PrngIvbWAdr;
    }
    else
    if( function == p_DigDspRsmC1PrngRndRunR )
    {
		pToFpga->addr = DigDspRsmC1PrngRndRunRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC1PrngRndRunW )
    {
		pToFpga->addr = DigDspRsmC1PrngRndRunWAdr;
    }
    else
    if( function == p_DigDspRsmC4MechNoiseCplKOutR )
    {
		pToFpga->addr = DigDspRsmC4MechNoiseCplKOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC4MechNoiseCplKOutW )
    {
		pToFpga->addr = DigDspRsmC4MechNoiseCplKOutWAdr;
    }
    else
    if( function == p_DigDspRsmC4MechPrngIvaR )
    {
		pToFpga->addr = DigDspRsmC4MechPrngIvaRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC4MechPrngIvaW )
    {
		pToFpga->addr = DigDspRsmC4MechPrngIvaWAdr;
    }
    else
    if( function == p_DigDspRsmC4MechPrngIvbR )
    {
		pToFpga->addr = DigDspRsmC4MechPrngIvbRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC4MechPrngIvbW )
    {
		pToFpga->addr = DigDspRsmC4MechPrngIvbWAdr;
    }
    else
    if( function == p_DigDspRsmC4MechPrngRndRunR )
    {
		pToFpga->addr = DigDspRsmC4MechPrngRndRunRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC4MechPrngRndRunW )
    {
		pToFpga->addr = DigDspRsmC4MechPrngRndRunWAdr;
    }
    else
    if( function == p_DigDspRsmC4MechResnrPropConstR )
    {
		pToFpga->addr = DigDspRsmC4MechResnrPropConstRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmC4MechResnrPropConstW )
    {
		pToFpga->addr = DigDspRsmC4MechResnrPropConstWAdr;
    }
    else
    if( function == p_DigDspRsmDacIqPhR )
    {
		pToFpga->addr = DigDspRsmDacIqPhRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmDacIqPhW )
    {
		pToFpga->addr = DigDspRsmDacIqPhWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspChanKeepR )
    {
		pToFpga->addr = DigDspRsmSh0DspChanKeepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspChanKeepW )
    {
		pToFpga->addr = DigDspRsmSh0DspChanKeepWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkCrsScaleR )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkCrsScaleRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkCrsScaleW )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkCrsScaleWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcCoeffR )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcCoeffRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcCoeffW )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcCoeffWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcLimR )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcLimRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcLimW )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcLimWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcPhOffsetR )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcPhOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcPhOffsetW )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcPhOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcSelEnR )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcSelEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcSelEnW )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcSelEnWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcSelThreshR )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcSelThreshRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcSelThreshW )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcSelThreshWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcSetmpR )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcSetmpRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspFdbkMpProcSetmpW )
    {
		pToFpga->addr = DigDspRsmSh0DspFdbkMpProcSetmpWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1AKxR )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1AKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1AKxW )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1AKxWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1AKyR )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1AKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1AKyW )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1AKyWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1BKxR )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1BKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1BKxW )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1BKxWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1BKyR )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1BKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspLpNotchLp1BKyW )
    {
		pToFpga->addr = DigDspRsmSh0DspLpNotchLp1BKyWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspModR )
    {
		pToFpga->addr = DigDspRsmSh0DspModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspModW )
    {
		pToFpga->addr = DigDspRsmSh0DspModWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspPhStepR )
    {
		pToFpga->addr = DigDspRsmSh0DspPhStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspPhStepW )
    {
		pToFpga->addr = DigDspRsmSh0DspPhStepWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspPiezoPiezoDcR )
    {
		pToFpga->addr = DigDspRsmSh0DspPiezoPiezoDcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspPiezoPiezoDcW )
    {
		pToFpga->addr = DigDspRsmSh0DspPiezoPiezoDcWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspTagR )
    {
		pToFpga->addr = DigDspRsmSh0DspTagRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspTagW )
    {
		pToFpga->addr = DigDspRsmSh0DspTagWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspUseFiberIqR )
    {
		pToFpga->addr = DigDspRsmSh0DspUseFiberIqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspUseFiberIqW )
    {
		pToFpga->addr = DigDspRsmSh0DspUseFiberIqWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspWvSampPerR )
    {
		pToFpga->addr = DigDspRsmSh0DspWvSampPerRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspWvSampPerW )
    {
		pToFpga->addr = DigDspRsmSh0DspWvSampPerWAdr;
    }
    else
    if( function == p_DigDspRsmSh0DspWvShiftR )
    {
		pToFpga->addr = DigDspRsmSh0DspWvShiftRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh0DspWvShiftW )
    {
		pToFpga->addr = DigDspRsmSh0DspWvShiftWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspChanKeepR )
    {
		pToFpga->addr = DigDspRsmSh1DspChanKeepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspChanKeepW )
    {
		pToFpga->addr = DigDspRsmSh1DspChanKeepWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkCrsScaleR )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkCrsScaleRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkCrsScaleW )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkCrsScaleWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcCoeffR )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcCoeffRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcCoeffW )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcCoeffWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcLimR )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcLimRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcLimW )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcLimWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcPhOffsetR )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcPhOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcPhOffsetW )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcPhOffsetWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcSelEnR )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcSelEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcSelEnW )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcSelEnWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcSelThreshR )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcSelThreshRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcSelThreshW )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcSelThreshWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcSetmpR )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcSetmpRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspFdbkMpProcSetmpW )
    {
		pToFpga->addr = DigDspRsmSh1DspFdbkMpProcSetmpWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1AKxR )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1AKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1AKxW )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1AKxWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1AKyR )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1AKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1AKyW )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1AKyWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1BKxR )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1BKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1BKxW )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1BKxWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1BKyR )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1BKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspLpNotchLp1BKyW )
    {
		pToFpga->addr = DigDspRsmSh1DspLpNotchLp1BKyWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspModR )
    {
		pToFpga->addr = DigDspRsmSh1DspModRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspModW )
    {
		pToFpga->addr = DigDspRsmSh1DspModWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspPhStepR )
    {
		pToFpga->addr = DigDspRsmSh1DspPhStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspPhStepW )
    {
		pToFpga->addr = DigDspRsmSh1DspPhStepWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspPiezoPiezoDcR )
    {
		pToFpga->addr = DigDspRsmSh1DspPiezoPiezoDcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspPiezoPiezoDcW )
    {
		pToFpga->addr = DigDspRsmSh1DspPiezoPiezoDcWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspTagR )
    {
		pToFpga->addr = DigDspRsmSh1DspTagRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspTagW )
    {
		pToFpga->addr = DigDspRsmSh1DspTagWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspUseFiberIqR )
    {
		pToFpga->addr = DigDspRsmSh1DspUseFiberIqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspUseFiberIqW )
    {
		pToFpga->addr = DigDspRsmSh1DspUseFiberIqWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspWvSampPerR )
    {
		pToFpga->addr = DigDspRsmSh1DspWvSampPerRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspWvSampPerW )
    {
		pToFpga->addr = DigDspRsmSh1DspWvSampPerWAdr;
    }
    else
    if( function == p_DigDspRsmSh1DspWvShiftR )
    {
		pToFpga->addr = DigDspRsmSh1DspWvShiftRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRsmSh1DspWvShiftW )
    {
		pToFpga->addr = DigDspRsmSh1DspWvShiftWAdr;
    }
    else
    if( function == p_DigDspSsaStimAmpstepR )
    {
		pToFpga->addr = DigDspSsaStimAmpstepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimAmpstepW )
    {
		pToFpga->addr = DigDspSsaStimAmpstepWAdr;
    }
    else
    if( function == p_DigDspSsaStimEnR )
    {
		pToFpga->addr = DigDspSsaStimEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimEnW )
    {
		pToFpga->addr = DigDspSsaStimEnWAdr;
    }
    else
    if( function == p_DigDspSsaStimGPeriodR )
    {
		pToFpga->addr = DigDspSsaStimGPeriodRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimGPeriodW )
    {
		pToFpga->addr = DigDspSsaStimGPeriodWAdr;
    }
    else
    if( function == p_DigDspSsaStimPertstepR )
    {
		pToFpga->addr = DigDspSsaStimPertstepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimPertstepW )
    {
		pToFpga->addr = DigDspSsaStimPertstepWAdr;
    }
    else
    if( function == p_DigDspTraceKeepR )
    {
		pToFpga->addr = DigDspTraceKeepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTraceKeepW )
    {
		pToFpga->addr = DigDspTraceKeepWAdr;
    }
    else
    if( function == p_DigDspTraceResetWeR )
    {
		pToFpga->addr = DigDspTraceResetWeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTraceResetWeW )
    {
		pToFpga->addr = DigDspTraceResetWeWAdr;
    }
    else
    if( function == p_DigDspTrigInternalR )
    {
		pToFpga->addr = DigDspTrigInternalRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTrigInternalW )
    {
		pToFpga->addr = DigDspTrigInternalWAdr;
    }
    else
    if( function == p_DigDspTrigMdR )
    {
		pToFpga->addr = DigDspTrigMdRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTrigMdW )
    {
		pToFpga->addr = DigDspTrigMdWAdr;
    }
    else
    if( function == p_DigDspWv0SrcR )
    {
		pToFpga->addr = DigDspWv0SrcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspWv0SrcW )
    {
		pToFpga->addr = DigDspWv0SrcWAdr;
    }
    else
    if( function == p_DigDspWv1SrcR )
    {
		pToFpga->addr = DigDspWv1SrcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspWv1SrcW )
    {
		pToFpga->addr = DigDspWv1SrcWAdr;
    }
    else
    if( function == p_DomainJumpRealignR )
    {
		pToFpga->addr = DomainJumpRealignRAdr|flagReadMask;
    }
    else
    if( function == p_DomainJumpRealignW )
    {
		pToFpga->addr = DomainJumpRealignWAdr;
    }
    else
    if( function == p_FfffffffR )
    {
		pToFpga->addr = FfffffffRAdr|flagReadMask;
    }
    else
    if( function == p_Fquency4XoutR )
    {
		pToFpga->addr = Fquency4XoutRAdr|flagReadMask;
    }
    else
    if( function == p_FquencyAdcR )
    {
		pToFpga->addr = FquencyAdcRAdr|flagReadMask;
    }
    else
    if( function == p_FquencyClkout3R )
    {
		pToFpga->addr = FquencyClkout3RAdr|flagReadMask;
    }
    else
    if( function == p_FquencyDcoR )
    {
		pToFpga->addr = FquencyDcoRAdr|flagReadMask;
    }
    else
    if( function == p_FquencyGtxRxR )
    {
		pToFpga->addr = FquencyGtxRxRAdr|flagReadMask;
    }
    else
    if( function == p_FquencyGtxTxR )
    {
		pToFpga->addr = FquencyGtxTxRAdr|flagReadMask;
    }
    else
    if( function == p_H0D0A0D0AR )
    {
		pToFpga->addr = H0D0A0D0ARAdr|flagReadMask;
    }
    else
    if( function == p_HistDoutR )
    {
		pToFpga->addr = HistDoutRAdr|flagReadMask;
    }
    else
    if( function == p_HistStatusR )
    {
		pToFpga->addr = HistStatusRAdr|flagReadMask;
    }
    else
    if( function == p_IccCfgR )
    {
		pToFpga->addr = IccCfgRAdr|flagReadMask;
    }
    else
    if( function == p_IccCfgW )
    {
		pToFpga->addr = IccCfgWAdr;
    }
    else
    if( function == p_IdelayBaseR )
    {
		pToFpga->addr = IdelayBaseRAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU2Bits19To0R )
    {
		pToFpga->addr = IdelayValueOutU2Bits19To0RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU2Bits39To20R )
    {
		pToFpga->addr = IdelayValueOutU2Bits39To20RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU3Bits19To0R )
    {
		pToFpga->addr = IdelayValueOutU3Bits19To0RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU3Bits39To20R )
    {
		pToFpga->addr = IdelayValueOutU3Bits39To20RAdr|flagReadMask;
    }
    else
    if( function == p_LlspiResultR )
    {
		pToFpga->addr = LlspiResultRAdr|flagReadMask;
    }
    else
    if( function == p_LlspiStatusR )
    {
		pToFpga->addr = LlspiStatusRAdr|flagReadMask;
    }
    else
    if( function == p_OWoR )
    {
		pToFpga->addr = OWoRAdr|flagReadMask;
    }
    else
    if( function == p_PhxDoutR )
    {
		pToFpga->addr = PhxDoutRAdr|flagReadMask;
    }
    else
    if( function == p_PhxStatusR )
    {
		pToFpga->addr = PhxStatusRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpBufR )
    {
		pToFpga->addr = QsfpBufRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpI2CRegR )
    {
		pToFpga->addr = QsfpI2CRegRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpI2CRegW )
    {
		pToFpga->addr = QsfpI2CRegWAdr;
    }
    else
    if( function == p_RldR )
    {
		pToFpga->addr = RldRAdr|flagReadMask;
    }
    else
    if( function == p_ScannerResultR )
    {
		pToFpga->addr = ScannerResultRAdr|flagReadMask;
    }
    else
    if( function == p_SfpAddressSetR )
    {
		pToFpga->addr = SfpAddressSetRAdr|flagReadMask;
    }
    else
    if( function == p_SfpAddressSetW )
    {
		pToFpga->addr = SfpAddressSetWAdr;
    }
    else
    if( function == p_SlowChainOutR )
    {
		pToFpga->addr = SlowChainOutRAdr|flagReadMask;
    }
    else
    if( function == p_TagNowR )
    {
		pToFpga->addr = TagNowRAdr|flagReadMask;
    }
    else
    if( function == p_TagNowW )
    {
		pToFpga->addr = TagNowWAdr;
    }
    else
    if( function == p_TraceIBufR )
    {
		pToFpga->addr = TraceIBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceIqBufR )
    {
		pToFpga->addr = TraceIqBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceQBufR )
    {
		pToFpga->addr = TraceQBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceStatus1R )
    {
		pToFpga->addr = TraceStatus1RAdr|flagReadMask;
    }
    else
    if( function == p_TraceStatus2R )
    {
		pToFpga->addr = TraceStatus2RAdr|flagReadMask;
    }
    else
    if( function == p_Wv0OutR )
    {
		pToFpga->addr = Wv0OutRAdr|flagReadMask;
    }
    else
    if( function == p_Wv1OutR )
    {
		pToFpga->addr = Wv1OutRAdr|flagReadMask;
    }
    else
    if( function == p_WvformsAvailableR )
    {
		pToFpga->addr = WvformsAvailableRAdr|flagReadMask;
    }
    else
    	status = asynError;

    return status;
}


/** Called when asyn clients call pasynInt32->read().
 * \param[in] pasynUser pasynUser structure that encodes the reason and address.
 * \param[in] value Pointer to the value to read. */
asynStatus scllrfPRC::writeInt32(asynUser *pasynUser, epicsInt32 value)
{
	int function = pasynUser->reason;
//	int addr = 0;
	asynStatus status = asynSuccess;
    const char *paramName;
//    FpgaReg regSendBuf[2];

	epicsTimeStamp timeStamp; getTimeStamp(&timeStamp);

    /* Set the parameter in the parameter library. */
    status = (asynStatus) setIntegerParam(function, value);

    /* Fetch the parameter string name for possible use in debugging */
    getParamName(function, &paramName);
    asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "--> %s: function=%d, %s, set to %d\n",
			__PRETTY_FUNCTION__, function, paramName, value);

    if (function == p_IQBitWidth)
    {
    	wavBitWidth_ = (scllrfPRC::WavBitWidth) value;
    }

    scllrfAsynPortDriver::writeInt32(pasynUser, value);

	/* Do callbacks so higher layers see any changes */
	status = (asynStatus) callParamCallbacks();

    if (status)
        epicsSnprintf(pasynUser->errorMessage, pasynUser->errorMessageSize,
                  "%s: status=%d, function=%d, name=%s, value=%d",
				  __PRETTY_FUNCTION__, status, function, paramName, value);
    else
        asynPrint(pasynUser, ASYN_TRACEIO_DRIVER,
              "<-- %s: function=%d, name=%s, value=%d\n",
			  __PRETTY_FUNCTION__, function, paramName, value);
    return status;
}

/** Called when asyn clients call pasynInt32Array->write().
  * The base class implementation simply prints an error message.
  * Derived classes may reimplement this function if required.
  * \param[in] pasynUser pasynUser structure that encodes the reason and address.
  * \param[in] value Pointer to the array to write.
  * \param[in] nElements Number of elements to write. */
asynStatus scllrfPRC::writeInt32Array(asynUser *pasynUser, epicsInt32 *value,
                                size_t nElements)
{
	int function = pasynUser->reason;
	asynStatus status = asynSuccess;
//	int nCopy;
	FpgaReg regSendBuf[maxMsgSize/sizeof(FpgaReg)];
	unsigned int i, uOutBuffIndex;
	uint32_t uRegAddr;
    const char *paramName;

	//getIntegerParam(P_ArrayLength, &nCopy);
	//if ((int) nElements < nCopy)
	//	nCopy = (int) nElements;

    /* Fetch the parameter string name for possible use in debugging */
    getParamName(function, &paramName);

	if(nElements < 2)
	{
		asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: array with %d elements, function=%d, %s\n",
				__PRETTY_FUNCTION__, (int) nElements, function, paramName);
		return status;
	}
	else
		asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: array with %d elements, function=%d, %s\n",
				__PRETTY_FUNCTION__, (int) nElements, function, paramName);

	status = functionToRegister(function, &regSendBuf[1]);
	if (status != asynSuccess)
		return status;

	uRegAddr = regSendBuf[1].addr;
	uOutBuffIndex = 1; // index of first register past the nonce

	for(i=0; i<nElements; ++i, ++uOutBuffIndex)
	{
		regSendBuf[uOutBuffIndex].data = (int32_t) value[i];
		regSendBuf[uOutBuffIndex].addr = (uint32_t) uRegAddr + i;

		// If there's more to send than will fit in the max message size, break
		// it up into chunks and send each chunk individually
		if(uOutBuffIndex == maxMsgSize/sizeof(FpgaReg)-1)
		{
			//printf("\n%s calling htonFpgaRegArray for %u registers\n", __PRETTY_FUNCTION__, uOutBuffIndex );
                        htonFpgaRegArray(regSendBuf, uOutBuffIndex);
			sendRegRequest(regSendBuf, uOutBuffIndex+1);

			if (status)
				epicsSnprintf(pasynUser->errorMessage, pasynUser->errorMessageSize,
						"%s: status=%d, function=%d, sending array segment %u of %s", __PRETTY_FUNCTION__,
						status, function, i/uOutBuffIndex +1, paramName);
			else
				asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: function=%d, sending array segment %u of %s\n",
						__PRETTY_FUNCTION__, function, i/uOutBuffIndex +1, paramName);
			uOutBuffIndex = 0; // loop will increment to index of first register past the nonce
		}
	}
        //printf("\n%s calling htonFpgaRegArray for %u registers\n", __PRETTY_FUNCTION__, uOutBuffIndex );

	htonFpgaRegArray(regSendBuf, uOutBuffIndex);
	sendRegRequest(regSendBuf, uOutBuffIndex+1);

	if (status)
		epicsSnprintf(pasynUser->errorMessage, pasynUser->errorMessageSize,
				"%s: status=%d, function=%d, sent %s", __PRETTY_FUNCTION__,
				status, function, paramName);
	else
		asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: function=%d, sent %s\n",
				__PRETTY_FUNCTION__, function, paramName);

	return status; //(writeArray < epicsInt32 > (pasynUser, value, nElements));
}



static void waveformRequesterC(void *drvPvt)
{
	printf("%s: starting\n", __PRETTY_FUNCTION__);
	scllrfPRC *pscllrfDriver = (scllrfPRC*)drvPvt;
	pscllrfDriver->waveformRequester();
	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}

/** Starts the poller thread.
 ** Derived classes will typically call this at near the end of their constructor.
 ** Derived classes can typically use the base class implementation of the poller thread,
 ** but are free to re-implement it if necessary.
 ** \param[in] pollPeriod The time between polls. */
asynStatus scllrfPRC::startWaveformRequester()
{
	epicsThreadCreate("waveformRequester",
			epicsThreadPriorityMedium,
			epicsThreadGetStackSize(epicsThreadStackMedium),
			(EPICSTHREADFUNC)waveformRequesterC, (void *)this);
	return asynSuccess;
}

// When a new value for npt_ (number of points in each waveform) is calculated,
// run this to compose new waveform request messages with the new size.
void scllrfPRC::fillWavReqMsg()
{
	int i, segmentNum, segmentOffset;
	unsigned int addr=0, segStartAddr = wavesStart;
	FpgaReg reqWaveMsg[waveSegmentCount][waveSegmentSize];

	for(i = 0; i<4; i++)
	{
		segmentNum = 0;
		segmentOffset = 1; // Start data past the nonce
		reqWaveMsg[segmentNum][0] = {0,0};
//		printf("\n%s filling waveform request %d: [%u][%u]={0x%x,0x%x}", __PRETTY_FUNCTION__, i, segmentNum, 0,
//				addr, reqWaveMsg[segmentNum][0].data);
		for (addr = segStartAddr; addr < segStartAddr+npt_; addr++, segmentOffset++)
		{
			reqWaveMsg[segmentNum][segmentOffset].addr = (uint32_t) (addr | flagReadMask);
			reqWaveMsg[segmentNum][segmentOffset].data = blankData + addr;
//			printf(", [%u][%u]={0x%x,0x%x}", segmentNum, segmentOffset,
//					addr, reqWaveMsg[segmentNum][segmentOffset].data);

			// If there's more to send than will fit in the max message size, break
			// it up into chunks and send each chunk individually
			if(segmentOffset == maxMsgSize/sizeof(FpgaReg)-1)
			{
				segmentNum++;
				reqWaveMsg[segmentNum][0] = {0,0};
//				printf(" %lu bytes in this segment.\n", (segmentOffset +1) * sizeof (FpgaReg));
				segmentOffset = 0; // will be incremented to 1 at the top of the loop
//				printf("\nfilling waveform request %d: [%u][%u]={0x0,0x0}", i, segmentNum, segmentOffset);
			}
		}
//		printf(" %lu of %lu bytes filled in this segment.\n",
//				(segmentOffset +1) * sizeof (FpgaReg), waveSegmentSize * sizeof (FpgaReg));

		// Each segment has unused elements at the end. Safest to convert whole thing.
		//printf("\n%s calling htonFpgaRegArray for waveform %u, %u registers\n", __PRETTY_FUNCTION__, i, waveSegmentCount * waveSegmentSize );

		htonFpgaRegArray(reqWaveMsg[0], waveSegmentCount * waveSegmentSize);

		switch (i)
		{
		case 0:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqIQ16bAMsg_[0][0]); // Canned message to request 16 bit I/Q data, first npt_ points
			break;
		case 1:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqIQ16bBMsg_[0][0]); // Canned message to request 16 bit I/Q data, last npt_ points
			break;
		case 2:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqI22bMsg_[0][0]); // Canned message to request 22 bit I data
			break;
		case 3:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqQ22bMsg_[0][0]); // Canned message to request 22 bit Q data
			break;
		}
//		printf("Filled up %d of %d segments, last one with %d points\n",
//				segmentNum, waveSegmentCount, segmentOffset);
//		printf("Setting start address of next waveform segment to 0x%x\n", addr);
		segStartAddr = addr;
	}
}


void scllrfPRC::reqOneWaveform(FpgaReg (*readWaveformsMsg)[waveSegmentSize])
{
	int regsLeftToSend = npt_;
	uint i;

//	printf(" --> %s\n", __PRETTY_FUNCTION__);
//	printf("%s waveSegmentSize = %u, waveSegmentCount = %u, regsLeftToSend = %d\n",
//			__PRETTY_FUNCTION__, waveSegmentSize, waveSegmentCount, regsLeftToSend);
//	printf("%s waveBufferRegCount = %u, waveBuffSize = %u, waveSegmentCount = %d\n",
//			__PRETTY_FUNCTION__, waveBufferRegCount, waveBuffSize, waveSegmentCount);
	for (i=0; i<waveSegmentCount; ++i)
	{
		if(regsLeftToSend > (int) (maxMsgSize/sizeof(FpgaReg)))
		{
			sendRegRequest(&readWaveformsMsg[i][0], maxMsgSize/sizeof(FpgaReg));
			regsLeftToSend -= maxMsgSize/sizeof(FpgaReg) - 1;
//			printf("%s sent segment %u, regsLeftToSend = %d\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
		}
		else
		{
			sendRegRequest(&readWaveformsMsg[i][0], regsLeftToSend + 1);
//			printf("%s sent segment %u, last %d registers\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
			break;
		}
	}
//	printf(" <-- %s\n", __PRETTY_FUNCTION__);
}

void scllrfPRC::waveformRequester()
{
	epicsEventWaitStatus status;
	static FpgaReg traceAck[] =
	{
			{0,0},
//			{DigDspTraceResetWeWAdr,1},
			{DigDspBufTrigWAdr,0},
			{DigDspBufTrigWAdr,1},
			{DigDspBufTrigWAdr,0}
	};
	//printf("\n%s calling htonFpgaRegArray for %u registers of traceAck\n", __PRETTY_FUNCTION__, 5 );
    htonFpgaRegArray(traceAck, sizeof(traceAck)/sizeof(FpgaReg));

	// Main polling loop
	while (1)
	{
		status = epicsEventWait(reqWaveEventId_);

		if (isShuttingDown_)
		{
			break;
		}

		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: signaled by reqWaveEventId_\n", __PRETTY_FUNCTION__);

		if (status == epicsEventWaitOK)
		{
			/* We got an event, rather than a timeout.
			 **/
			switch (wavBitWidth_)
			{
			case read16bit:
				reqOneWaveform(pReqIQ16bAMsg_);
				reqOneWaveform(pReqIQ16bBMsg_);
				break;
			case read22bit:
				reqOneWaveform(pReqI22bMsg_);
				reqOneWaveform(pReqQ22bMsg_);
				break;
			default:
				printf("%s: impossible bit width\n", __PRETTY_FUNCTION__);
			}

			newWaveRead_ = newWaveAvailable_; // Indicate that we got the signal
			sendRegRequest(traceAck, sizeof(traceAck)/sizeof(FpgaReg));
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: done sending waveform request\n", __PRETTY_FUNCTION__);
		}
	}
//	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}


// parse register data, write to array PV
asynStatus scllrfPRC::processWaveReadback(const FpgaReg *pFromFpga)
{
	// avoid divide by 0 errors when waveforms are misconfigured
	if (nchan_ <=0)
	{
		printf("%s can't process waveform data with 0 active channels\n", __PRETTY_FUNCTION__);
		return asynError;
	}
	if (npt_ <=0)
	{
		printf("%s waveform length set to %u but array index is %u\n",
				__PRETTY_FUNCTION__, (unsigned int) npt_, pFromFpga->addr);
		return asynError;
	}

//	printf("--> %s\n", __PRETTY_FUNCTION__);
	unsigned int bufferOffset = (pFromFpga->addr & addrMask) - wavesStart;
	// additional base offsets
	//   0 * npt  16-bit I and Q
	//   1 * npt  16-bit I and Q
	//   2 * npt  22-bit I
	//   3 * npt  22-bit Q
	unsigned int bufferNumber = bufferOffset / npt_; // of the 4 buffers above, which range are we in?
	unsigned int bufferBase = npt_ * bufferNumber; // in bufferNumber, base address offset
	unsigned int waveOffset = (bufferOffset - bufferBase);
	unsigned int waveNumber = waveOffset % nchan_;
	unsigned int waveIndex = waveOffset / nchan_;
	unsigned int i;
//	printf("%s bufferOffset = %u, npt_ = %u, waveNumber = %u waveIndex =%u\n", __PRETTY_FUNCTION__, bufferOffset, npt_, waveNumber, waveIndex);

	switch (bufferNumber)
	{
	case 0: //TODO: verify the packing of the bits for 16 bit data
		pWave16bitI_[waveNumber][waveIndex] = (epicsInt16) pFromFpga->data;
		pWave16bitQ_[waveNumber][waveIndex] = (epicsInt16) (pFromFpga->data >> 16);
		break;

	case 1:
		waveIndex += npt_; // continued from addresses in "case 0"
		pWave16bitI_[waveNumber][waveIndex] = (epicsInt16) pFromFpga->data;
		pWave16bitQ_[waveNumber][waveIndex] = (epicsInt16) (pFromFpga->data >> 16);
		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ16BitNELM, npt_ * 2/nchan_);
			for (i=0; i<8; ++i)
			{
				if(i<nchan_)
				{
					doCallbacksInt16Array(pWave16bitI_[i], 2*npt_/nchan_, p_WaveformI16Bit, i);
					doCallbacksInt16Array(pWave16bitQ_[i], 2*npt_/nchan_, p_WaveformQ16Bit, i);
				} else { // clear inactive channels
					doCallbacksInt16Array(pWave16bitI_[i], 0, p_WaveformI16Bit, i);
					doCallbacksInt16Array(pWave16bitQ_[i], 0, p_WaveformQ16Bit, i);
				}
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	case 2:
		pWave22bitI_[waveNumber][waveIndex] = (epicsInt32) pFromFpga->data;

		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ22BitNELM, npt_/nchan_);
			for (i=0; i<8; ++i)
			{
				if(i<nchan_)
				{
					doCallbacksInt32Array(pWave22bitI_[i], npt_/nchan_, p_WaveformI22Bit, i);
				} else { // clear inactive channels
					doCallbacksInt32Array(pWave22bitI_[i], 0, p_WaveformI22Bit, i);
				}
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	case 3:
		pWave22bitQ_[waveNumber][waveIndex] = (epicsInt32) pFromFpga->data;
		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ22BitNELM, npt_/nchan_);
			for (i=0; i<8; ++i)
			{
				if(i<nchan_)
				{
					doCallbacksInt32Array(pWave22bitQ_[i], npt_/nchan_, p_WaveformQ22Bit, i);
				} else { // clear inactive channels
					doCallbacksInt32Array(pWave22bitQ_[i], 0, p_WaveformQ22Bit, i);
				}
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	}

//	printf("<-- %s\n", __PRETTY_FUNCTION__);
	return asynSuccess;
}

//asynStatus scllrfPRC::catGitSHA1()
//{
//	int oneByte;
//	int i;
//	asynStatus status;
//
//	strGitSHA1.str("");
//	strGitSHA1.clear();
//	strGitSHA1<<std::hex;
//
////	for (i=p_GitSHA1a; i<=p_GitSHA1t; i++)
////	{
////		status = (asynStatus) getIntegerParam(i, &oneByte);
////		strGitSHA1<< std::setw(2) << oneByte;
////	}
////	// used with stringin reccord, which unfortunately can only handle 19 of the 20 characters
////	status = setStringParam(p_GitSHA1, strGitSHA1.str().c_str());
//
//	return asynSuccess;
//}

/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRC::processRegReadback(const FpgaReg *pFromFpga, bool &waveIsReady)
{
//	unsigned int i;
	asynStatus status = asynSuccess;
	assert(pFromFpga->addr&flagReadMask); // This function is only for read registers
	epicsInt32 errorCount;
	epicsInt32 tmpData;
	int32_t signExtBits = 0;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case HellRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_HellR,
				(pFromFpga->data & HellMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HellRString,
				(unsigned ) pFromFpga->data & HellMask);
	break;

    case OWoRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_OWoR,
				(pFromFpga->data & OWoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				OWoRString,
				(unsigned ) pFromFpga->data & OWoMask);
	break;

    case RldRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RldR,
				(pFromFpga->data & RldMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RldRString,
				(unsigned ) pFromFpga->data & RldMask);
	break;

    case H0D0A0D0ARAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_H0D0A0D0AR,
				(pFromFpga->data & H0D0A0D0AMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				H0D0A0D0ARString,
				(unsigned ) pFromFpga->data & H0D0A0D0AMask);
	break;

    case LlspiStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LlspiStatusR,
				(pFromFpga->data & LlspiStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiStatusRString,
				(unsigned ) pFromFpga->data & LlspiStatusMask);
	break;

    case LlspiResultRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LlspiResultR,
				(pFromFpga->data & LlspiResultMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiResultRString,
				(unsigned ) pFromFpga->data & LlspiResultMask);
	break;

    case FfffffffRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FfffffffR,
				(pFromFpga->data & FfffffffMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FfffffffRString,
				(unsigned ) pFromFpga->data & FfffffffMask);
	break;

    case FquencyAdcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FquencyAdcR,
				(pFromFpga->data & FquencyAdcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FquencyAdcRString,
				(unsigned ) pFromFpga->data & FquencyAdcMask);
	break;

    case Fquency4XoutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Fquency4XoutR,
				(pFromFpga->data & Fquency4XoutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Fquency4XoutRString,
				(unsigned ) pFromFpga->data & Fquency4XoutMask);
	break;

    case FquencyClkout3RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FquencyClkout3R,
				(pFromFpga->data & FquencyClkout3Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FquencyClkout3RString,
				(unsigned ) pFromFpga->data & FquencyClkout3Mask);
	break;

    case FquencyDcoRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FquencyDcoR,
				(pFromFpga->data & FquencyDcoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FquencyDcoRString,
				(unsigned ) pFromFpga->data & FquencyDcoMask);
	break;

    case U2Doutbits31To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U2Doutbits31To0R,
				(pFromFpga->data & U2Doutbits31To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2Doutbits31To0RString,
				(unsigned ) pFromFpga->data & U2Doutbits31To0Mask);
	break;

    case U2Doutbits63To32RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U2Doutbits63To32R,
				(pFromFpga->data & U2Doutbits63To32Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2Doutbits63To32RString,
				(unsigned ) pFromFpga->data & U2Doutbits63To32Mask);
	break;

    case IdelayValueOutU2Bits19To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU2Bits19To0R,
				(pFromFpga->data & IdelayValueOutU2Bits19To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU2Bits19To0RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU2Bits19To0Mask);
	break;

    case IdelayValueOutU2Bits39To20RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU2Bits39To20R,
				(pFromFpga->data & IdelayValueOutU2Bits39To20Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU2Bits39To20RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU2Bits39To20Mask);
	break;

    case U3Doutbits31To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U3Doutbits31To0R,
				(pFromFpga->data & U3Doutbits31To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3Doutbits31To0RString,
				(unsigned ) pFromFpga->data & U3Doutbits31To0Mask);
	break;

    case U3Doutbits63To32RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U3Doutbits63To32R,
				(pFromFpga->data & U3Doutbits63To32Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3Doutbits63To32RString,
				(unsigned ) pFromFpga->data & U3Doutbits63To32Mask);
	break;

    case IdelayValueOutU3Bits19To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU3Bits19To0R,
				(pFromFpga->data & IdelayValueOutU3Bits19To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU3Bits19To0RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU3Bits19To0Mask);
	break;

    case IdelayValueOutU3Bits39To20RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU3Bits39To20R,
				(pFromFpga->data & IdelayValueOutU3Bits39To20Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU3Bits39To20RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU3Bits39To20Mask);
	break;

    case Wv0OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Wv0OutR,
				(pFromFpga->data & Wv0OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wv0OutRString,
				(unsigned ) pFromFpga->data & Wv0OutMask);
	break;

    case Wv1OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Wv1OutR,
				(pFromFpga->data & Wv1OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wv1OutRString,
				(unsigned ) pFromFpga->data & Wv1OutMask);
	break;

    case AdcTestWv1OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWv1OutR,
				(pFromFpga->data & AdcTestWv1OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWv1OutRString,
				(unsigned ) pFromFpga->data & AdcTestWv1OutMask);
	break;

    case AdcTestWv2OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWv2OutR,
				(pFromFpga->data & AdcTestWv2OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWv2OutRString,
				(unsigned ) pFromFpga->data & AdcTestWv2OutMask);
	break;

    case AdcTestWv3OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWv3OutR,
				(pFromFpga->data & AdcTestWv3OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWv3OutRString,
				(unsigned ) pFromFpga->data & AdcTestWv3OutMask);
	break;

    case AdcTestWv4OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWv4OutR,
				(pFromFpga->data & AdcTestWv4OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWv4OutRString,
				(unsigned ) pFromFpga->data & AdcTestWv4OutMask);
	break;

    case CtraceRunningRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CtraceRunningR,
				(pFromFpga->data & CtraceRunningMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CtraceRunningRString,
				(unsigned ) pFromFpga->data & CtraceRunningMask);
	break;

    case FquencyGtxTxRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FquencyGtxTxR,
				(pFromFpga->data & FquencyGtxTxMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FquencyGtxTxRString,
				(unsigned ) pFromFpga->data & FquencyGtxTxMask);
	break;

    case FquencyGtxRxRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FquencyGtxRxR,
				(pFromFpga->data & FquencyGtxRxMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FquencyGtxRxRString,
				(unsigned ) pFromFpga->data & FquencyGtxRxMask);
	break;

    case HistStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_HistStatusR,
				(pFromFpga->data & HistStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HistStatusRString,
				(unsigned ) pFromFpga->data & HistStatusMask);
	break;

    case PhxStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PhxStatusR,
				(pFromFpga->data & PhxStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhxStatusRString,
				(unsigned ) pFromFpga->data & PhxStatusMask);
	break;

    case ClkPhDiffOutU2RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ClkPhDiffOutU2R,
				(pFromFpga->data & ClkPhDiffOutU2Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkPhDiffOutU2RString,
				(unsigned ) pFromFpga->data & ClkPhDiffOutU2Mask);
	break;

    case ClkPhDiffOutU3RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ClkPhDiffOutU3R,
				(pFromFpga->data & ClkPhDiffOutU3Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkPhDiffOutU3RString,
				(unsigned ) pFromFpga->data & ClkPhDiffOutU3Mask);
	break;

    case CrcErrorsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CrcErrorsR,
				(pFromFpga->data & CrcErrorsMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CrcErrorsRString,
				(unsigned ) pFromFpga->data & CrcErrorsMask);
	break;

    case U15SpiRdbkRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U15SpiRdbkR,
				(pFromFpga->data & U15SpiRdbkMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiRdbkRString,
				(unsigned ) pFromFpga->data & U15SpiRdbkMask);
	// shared address with U15SdoAddrRAdr  56 == 56
		status = (asynStatus) setIntegerParam(p_U15SdoAddrR,
				(pFromFpga->data & U15SdoAddrMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SdoAddrRString,
				(unsigned ) pFromFpga->data & U15SdoAddrMask);
	break;

    case U15SpiReadyRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U15SpiReadyR,
				(pFromFpga->data & U15SpiReadyMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiReadyRString,
				(unsigned ) pFromFpga->data & U15SpiReadyMask);
	// shared address with U15SdioAsSdoRAdr  57 == 57
		status = (asynStatus) setIntegerParam(p_U15SdioAsSdoR,
				(pFromFpga->data & U15SdioAsSdoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SdioAsSdoRString,
				(unsigned ) pFromFpga->data & U15SdioAsSdoMask);
	break;

    case U18SdoAddrRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U18SdoAddrR,
				(pFromFpga->data & U18SdoAddrMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SdoAddrRString,
				(unsigned ) pFromFpga->data & U18SdoAddrMask);
	// shared address with U18SpiRdbkRAdr  60 == 60
		status = (asynStatus) setIntegerParam(p_U18SpiRdbkR,
				(pFromFpga->data & U18SpiRdbkMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SpiRdbkRString,
				(unsigned ) pFromFpga->data & U18SpiRdbkMask);
	break;

    case U18SdioAsSdoRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U18SdioAsSdoR,
				(pFromFpga->data & U18SdioAsSdoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SdioAsSdoRString,
				(unsigned ) pFromFpga->data & U18SdioAsSdoMask);
	// shared address with U18SpiReadyRAdr  61 == 61
		status = (asynStatus) setIntegerParam(p_U18SpiReadyR,
				(pFromFpga->data & U18SpiReadyMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SpiReadyRString,
				(unsigned ) pFromFpga->data & U18SpiReadyMask);
	break;

    case AdcTestTrigCntRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestTrigCntR,
				(pFromFpga->data & AdcTestTrigCntMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestTrigCntRString,
				(unsigned ) pFromFpga->data & AdcTestTrigCntMask);
	break;

    case WvformsAvailableRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_WvformsAvailableR,
				(pFromFpga->data & WvformsAvailableMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				WvformsAvailableRString,
				(unsigned ) pFromFpga->data & WvformsAvailableMask);
	break;

    case BanyanStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_BanyanStatusR,
				(pFromFpga->data & BanyanStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanStatusRString,
				(unsigned ) pFromFpga->data & BanyanStatusMask);
	break;

    case SlowChainOutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SlowChainOutR,
				(pFromFpga->data & SlowChainOutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SlowChainOutRString,
				(unsigned ) pFromFpga->data & SlowChainOutMask);
	break;

    case TraceStatus1RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceStatus1R,
				(pFromFpga->data & TraceStatus1Mask));
		if (pFromFpga->data & waveIsReadyMask)
		{
			waveIsReady = true;
		}
		// Calculate number of points per waveform, and update request
		// waveform messages if it has changed.
		if(npt_ != (size_t) (1 << ((pFromFpga->data & nptMask)>> 24)))
		{
			npt_ = 1 << ((pFromFpga->data & nptMask)>> 24);
			if(npt_ > waveSegmentCount * (waveSegmentSize - 1)) // protect against register saying more points than buffer space
			{
				npt_ = waveSegmentCount * (waveSegmentSize - 1);
			}
			fillWavReqMsg();
		}
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus1RString,
				(unsigned ) pFromFpga->data & TraceStatus1Mask);
	break;

    case TraceStatus2RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceStatus2R,
				(pFromFpga->data & TraceStatus2Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus2RString,
				(unsigned ) pFromFpga->data & TraceStatus2Mask);
	break;

    case IdelayBaseRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayBaseR,
				(pFromFpga->data & IdelayBaseMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayBaseRString,
				(unsigned ) pFromFpga->data & IdelayBaseMask);
	break;

    case HistDoutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_HistDoutR,
				(pFromFpga->data & HistDoutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HistDoutRString,
				(unsigned ) pFromFpga->data & HistDoutMask);
	break;

    case PhxDoutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PhxDoutR,
				(pFromFpga->data & PhxDoutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhxDoutRString,
				(unsigned ) pFromFpga->data & PhxDoutMask);
	break;

    case BanyanBufRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_BanyanBufR,
				(pFromFpga->data & BanyanBufMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanBufRString,
				(unsigned ) pFromFpga->data & BanyanBufMask);
	break;

    case ScannerResultRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ScannerResultR,
				(pFromFpga->data & ScannerResultMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ScannerResultRString,
				(unsigned ) pFromFpga->data & ScannerResultMask);
	break;

    case TraceIqBufRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceIqBufR,
				(pFromFpga->data & TraceIqBufMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceIqBufRString,
				(unsigned ) pFromFpga->data & TraceIqBufMask);
	break;

    case TraceIBufRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceIBufR,
				(pFromFpga->data & TraceIBufMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceIBufRString,
				(unsigned ) pFromFpga->data & TraceIBufMask);
	break;

    case TraceQBufRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceQBufR,
				(pFromFpga->data & TraceQBufMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceQBufRString,
				(unsigned ) pFromFpga->data & TraceQBufMask);
	break;

    case QsfpBufRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_QsfpBufR,
				(pFromFpga->data & QsfpBufMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpBufRString,
				(unsigned ) pFromFpga->data & QsfpBufMask);
	break;

    case DigDspRsmC4MechNoiseCplKOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC4MechNoiseCplKOutMask + 1 ) >> 1))? ~DigDspRsmC4MechNoiseCplKOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC4MechNoiseCplKOutR,
				(pFromFpga->data & DigDspRsmC4MechNoiseCplKOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechNoiseCplKOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC4MechNoiseCplKOutMask);
	break;

    case DigDspRsmC4MechResnrPropConstRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC4MechResnrPropConstR,
				(pFromFpga->data & DigDspRsmC4MechResnrPropConstMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechResnrPropConstRString,
				(unsigned ) pFromFpga->data & DigDspRsmC4MechResnrPropConstMask);
	break;

    case DigDspRsmC0C4ElecDot0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4ElecDot0KOutMask + 1 ) >> 1))? ~DigDspRsmC0C4ElecDot0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecDot0KOutR,
				(pFromFpga->data & DigDspRsmC0C4ElecDot0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot0KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot0KOutMask);
	break;

    case DigDspRsmC0C4ElecDot1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4ElecDot1KOutMask + 1 ) >> 1))? ~DigDspRsmC0C4ElecDot1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecDot1KOutR,
				(pFromFpga->data & DigDspRsmC0C4ElecDot1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot1KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot1KOutMask);
	break;

    case DigDspRsmC0C4ElecDot2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4ElecDot2KOutMask + 1 ) >> 1))? ~DigDspRsmC0C4ElecDot2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecDot2KOutR,
				(pFromFpga->data & DigDspRsmC0C4ElecDot2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot2KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot2KOutMask);
	break;

    case DigDspRsmC0C4ElecOuterProd0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4ElecOuterProd0KOutMask + 1 ) >> 1))? ~DigDspRsmC0C4ElecOuterProd0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecOuterProd0KOutR,
				(pFromFpga->data & DigDspRsmC0C4ElecOuterProd0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd0KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd0KOutMask);
	break;

    case DigDspRsmC0C4ElecOuterProd1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4ElecOuterProd1KOutMask + 1 ) >> 1))? ~DigDspRsmC0C4ElecOuterProd1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecOuterProd1KOutR,
				(pFromFpga->data & DigDspRsmC0C4ElecOuterProd1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd1KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd1KOutMask);
	break;

    case DigDspRsmC0C4ElecOuterProd2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4ElecOuterProd2KOutMask + 1 ) >> 1))? ~DigDspRsmC0C4ElecOuterProd2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecOuterProd2KOutR,
				(pFromFpga->data & DigDspRsmC0C4ElecOuterProd2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd2KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd2KOutMask);
	break;

    case DigDspRsmC0PiezoCplKOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0PiezoCplKOutMask + 1 ) >> 1))? ~DigDspRsmC0PiezoCplKOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0PiezoCplKOutR,
				(pFromFpga->data & DigDspRsmC0PiezoCplKOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PiezoCplKOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0PiezoCplKOutMask);
	break;

    case DigDspRsmC1C4ElecDot0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4ElecDot0KOutMask + 1 ) >> 1))? ~DigDspRsmC1C4ElecDot0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecDot0KOutR,
				(pFromFpga->data & DigDspRsmC1C4ElecDot0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot0KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot0KOutMask);
	break;

    case DigDspRsmC1C4ElecDot1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4ElecDot1KOutMask + 1 ) >> 1))? ~DigDspRsmC1C4ElecDot1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecDot1KOutR,
				(pFromFpga->data & DigDspRsmC1C4ElecDot1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot1KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot1KOutMask);
	break;

    case DigDspRsmC1C4ElecDot2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4ElecDot2KOutMask + 1 ) >> 1))? ~DigDspRsmC1C4ElecDot2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecDot2KOutR,
				(pFromFpga->data & DigDspRsmC1C4ElecDot2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot2KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot2KOutMask);
	break;

    case DigDspRsmC1C4ElecOuterProd0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4ElecOuterProd0KOutMask + 1 ) >> 1))? ~DigDspRsmC1C4ElecOuterProd0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecOuterProd0KOutR,
				(pFromFpga->data & DigDspRsmC1C4ElecOuterProd0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd0KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd0KOutMask);
	break;

    case DigDspRsmC1C4ElecOuterProd1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4ElecOuterProd1KOutMask + 1 ) >> 1))? ~DigDspRsmC1C4ElecOuterProd1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecOuterProd1KOutR,
				(pFromFpga->data & DigDspRsmC1C4ElecOuterProd1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd1KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd1KOutMask);
	break;

    case DigDspRsmC1C4ElecOuterProd2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4ElecOuterProd2KOutMask + 1 ) >> 1))? ~DigDspRsmC1C4ElecOuterProd2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecOuterProd2KOutR,
				(pFromFpga->data & DigDspRsmC1C4ElecOuterProd2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd2KOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd2KOutMask);
	break;

    case DigDspRsmC1PiezoCplKOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1PiezoCplKOutMask + 1 ) >> 1))? ~DigDspRsmC1PiezoCplKOutMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1PiezoCplKOutR,
				(pFromFpga->data & DigDspRsmC1PiezoCplKOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PiezoCplKOutRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1PiezoCplKOutMask);
	break;

    case DigDspRsmSh0DspFdbkMpProcCoeffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspFdbkMpProcCoeffMask + 1 ) >> 1))? ~DigDspRsmSh0DspFdbkMpProcCoeffMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspFdbkMpProcCoeffR,
				(pFromFpga->data & DigDspRsmSh0DspFdbkMpProcCoeffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcCoeffRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcCoeffMask);
	break;

    case DigDspRsmSh0DspFdbkMpProcLimRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspFdbkMpProcLimMask + 1 ) >> 1))? ~DigDspRsmSh0DspFdbkMpProcLimMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspFdbkMpProcLimR,
				(pFromFpga->data & DigDspRsmSh0DspFdbkMpProcLimMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcLimRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcLimMask);
	break;

    case DigDspRsmSh0DspFdbkMpProcSetmpRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspFdbkMpProcSetmpMask + 1 ) >> 1))? ~DigDspRsmSh0DspFdbkMpProcSetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspFdbkMpProcSetmpR,
				(pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSetmpRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSetmpMask);
	break;

    case DigDspRsmSh1DspFdbkMpProcCoeffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspFdbkMpProcCoeffMask + 1 ) >> 1))? ~DigDspRsmSh1DspFdbkMpProcCoeffMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspFdbkMpProcCoeffR,
				(pFromFpga->data & DigDspRsmSh1DspFdbkMpProcCoeffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcCoeffRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcCoeffMask);
	break;

    case DigDspRsmSh1DspFdbkMpProcLimRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspFdbkMpProcLimMask + 1 ) >> 1))? ~DigDspRsmSh1DspFdbkMpProcLimMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspFdbkMpProcLimR,
				(pFromFpga->data & DigDspRsmSh1DspFdbkMpProcLimMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcLimRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcLimMask);
	break;

    case DigDspRsmSh1DspFdbkMpProcSetmpRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspFdbkMpProcSetmpMask + 1 ) >> 1))? ~DigDspRsmSh1DspFdbkMpProcSetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspFdbkMpProcSetmpR,
				(pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSetmpRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSetmpMask);
	break;

    case DigDspRsmC0C4EdcoCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4EdcoCplMask + 1 ) >> 1))? ~DigDspRsmC0C4EdcoCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4EdcoCplR,
				(pFromFpga->data & DigDspRsmC0C4EdcoCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4EdcoCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4EdcoCplMask);
	break;

    case DigDspRsmC0C4EdcoPhOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4EdcoPhOffsetMask + 1 ) >> 1))? ~DigDspRsmC0C4EdcoPhOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4EdcoPhOffsetR,
				(pFromFpga->data & DigDspRsmC0C4EdcoPhOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4EdcoPhOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4EdcoPhOffsetMask);
	break;

    case DigDspRsmC1C4EdcoCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4EdcoCplMask + 1 ) >> 1))? ~DigDspRsmC1C4EdcoCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4EdcoCplR,
				(pFromFpga->data & DigDspRsmC1C4EdcoCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4EdcoCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4EdcoCplMask);
	break;

    case DigDspRsmC1C4EdcoPhOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4EdcoPhOffsetMask + 1 ) >> 1))? ~DigDspRsmC1C4EdcoPhOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4EdcoPhOffsetR,
				(pFromFpga->data & DigDspRsmC1C4EdcoPhOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4EdcoPhOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4EdcoPhOffsetMask);
	break;

    case DigDspRsmSh0DspLpNotchLp1AKxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspLpNotchLp1AKxMask + 1 ) >> 1))? ~DigDspRsmSh0DspLpNotchLp1AKxMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspLpNotchLp1AKxR,
				(pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1AKxRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKxMask);
	break;

    case DigDspRsmSh0DspLpNotchLp1AKyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspLpNotchLp1AKyMask + 1 ) >> 1))? ~DigDspRsmSh0DspLpNotchLp1AKyMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspLpNotchLp1AKyR,
				(pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1AKyRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKyMask);
	break;

    case DigDspRsmSh0DspLpNotchLp1BKxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspLpNotchLp1BKxMask + 1 ) >> 1))? ~DigDspRsmSh0DspLpNotchLp1BKxMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspLpNotchLp1BKxR,
				(pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1BKxRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKxMask);
	break;

    case DigDspRsmSh0DspLpNotchLp1BKyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspLpNotchLp1BKyMask + 1 ) >> 1))? ~DigDspRsmSh0DspLpNotchLp1BKyMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspLpNotchLp1BKyR,
				(pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1BKyRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKyMask);
	break;

    case DigDspRsmSh1DspLpNotchLp1AKxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspLpNotchLp1AKxMask + 1 ) >> 1))? ~DigDspRsmSh1DspLpNotchLp1AKxMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspLpNotchLp1AKxR,
				(pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1AKxRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKxMask);
	break;

    case DigDspRsmSh1DspLpNotchLp1AKyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspLpNotchLp1AKyMask + 1 ) >> 1))? ~DigDspRsmSh1DspLpNotchLp1AKyMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspLpNotchLp1AKyR,
				(pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1AKyRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKyMask);
	break;

    case DigDspRsmSh1DspLpNotchLp1BKxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspLpNotchLp1BKxMask + 1 ) >> 1))? ~DigDspRsmSh1DspLpNotchLp1BKxMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspLpNotchLp1BKxR,
				(pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1BKxRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKxMask);
	break;

    case DigDspRsmSh1DspLpNotchLp1BKyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspLpNotchLp1BKyMask + 1 ) >> 1))? ~DigDspRsmSh1DspLpNotchLp1BKyMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspLpNotchLp1BKyR,
				(pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1BKyRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKyMask);
	break;

    case AdcMmcmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcMmcmR,
				(pFromFpga->data & AdcMmcmMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmRString,
				(unsigned ) pFromFpga->data & AdcMmcmMask);
	break;

    case DigCfgU15SpiDataAddrRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU15SpiDataAddrRR,
				(pFromFpga->data & DigCfgU15SpiDataAddrRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU15SpiDataAddrRRString,
				(unsigned ) pFromFpga->data & DigCfgU15SpiDataAddrRMask);
	break;

    case DigCfgU15SpiReadAndStartRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU15SpiReadAndStartRR,
				(pFromFpga->data & DigCfgU15SpiReadAndStartRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU15SpiReadAndStartRRString,
				(unsigned ) pFromFpga->data & DigCfgU15SpiReadAndStartRMask);
	break;

    case DigCfgU18SpiDataAddrRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU18SpiDataAddrRR,
				(pFromFpga->data & DigCfgU18SpiDataAddrRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU18SpiDataAddrRRString,
				(unsigned ) pFromFpga->data & DigCfgU18SpiDataAddrRMask);
	break;

    case DigCfgU18SpiReadAndStartRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU18SpiReadAndStartRR,
				(pFromFpga->data & DigCfgU18SpiReadAndStartRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU18SpiReadAndStartRRString,
				(unsigned ) pFromFpga->data & DigCfgU18SpiReadAndStartRMask);
	break;

    case DigCfgU2ClkResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU2ClkResetRR,
				(pFromFpga->data & DigCfgU2ClkResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU2ClkResetRRString,
				(unsigned ) pFromFpga->data & DigCfgU2ClkResetRMask);
	break;

    case DigCfgU2IserdesResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU2IserdesResetRR,
				(pFromFpga->data & DigCfgU2IserdesResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU2IserdesResetRRString,
				(unsigned ) pFromFpga->data & DigCfgU2IserdesResetRMask);
	break;

    case DigCfgU3ClkResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU3ClkResetRR,
				(pFromFpga->data & DigCfgU3ClkResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU3ClkResetRRString,
				(unsigned ) pFromFpga->data & DigCfgU3ClkResetRMask);
	break;

    case DigCfgU3IserdesResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU3IserdesResetRR,
				(pFromFpga->data & DigCfgU3IserdesResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU3IserdesResetRRString,
				(unsigned ) pFromFpga->data & DigCfgU3IserdesResetRMask);
	break;

    case DigCfgU4ResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgU4ResetRR,
				(pFromFpga->data & DigCfgU4ResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU4ResetRRString,
				(unsigned ) pFromFpga->data & DigCfgU4ResetRMask);
	break;

    case DigCfgBanyanMaskRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgBanyanMaskR,
				(pFromFpga->data & DigCfgBanyanMaskMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgBanyanMaskRString,
				(unsigned ) pFromFpga->data & DigCfgBanyanMaskMask);
	break;

    case DigCfgBitslipRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgBitslipR,
				(pFromFpga->data & DigCfgBitslipMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgBitslipRString,
				(unsigned ) pFromFpga->data & DigCfgBitslipMask);
	break;

    case DigCfgIdelayctrlResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgIdelayctrlResetRR,
				(pFromFpga->data & DigCfgIdelayctrlResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgIdelayctrlResetRRString,
				(unsigned ) pFromFpga->data & DigCfgIdelayctrlResetRMask);
	break;

    case DigCfgLlspiWeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgLlspiWeR,
				(pFromFpga->data & DigCfgLlspiWeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgLlspiWeRString,
				(unsigned ) pFromFpga->data & DigCfgLlspiWeMask);
	break;

    case DigCfgMmcmResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgMmcmResetRR,
				(pFromFpga->data & DigCfgMmcmResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgMmcmResetRRString,
				(unsigned ) pFromFpga->data & DigCfgMmcmResetRMask);
	break;

    case DigCfgPeriphConfigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgPeriphConfigR,
				(pFromFpga->data & DigCfgPeriphConfigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgPeriphConfigRString,
				(unsigned ) pFromFpga->data & DigCfgPeriphConfigMask);
	break;

    case DigCfgPhxTrigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgPhxTrigR,
				(pFromFpga->data & DigCfgPhxTrigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgPhxTrigRString,
				(unsigned ) pFromFpga->data & DigCfgPhxTrigMask);
	break;

    case DigCfgRawadcTrigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgRawadcTrigR,
				(pFromFpga->data & DigCfgRawadcTrigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgRawadcTrigRString,
				(unsigned ) pFromFpga->data & DigCfgRawadcTrigMask);
	break;

    case DigCfgScanTriggerWeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgScanTriggerWeR,
				(pFromFpga->data & DigCfgScanTriggerWeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgScanTriggerWeRString,
				(unsigned ) pFromFpga->data & DigCfgScanTriggerWeMask);
	break;

    case DigCfgScannerDebugRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgScannerDebugR,
				(pFromFpga->data & DigCfgScannerDebugMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgScannerDebugRString,
				(unsigned ) pFromFpga->data & DigCfgScannerDebugMask);
	break;

    case DigCfgSyncAd7794CsetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgSyncAd7794CsetR,
				(pFromFpga->data & DigCfgSyncAd7794CsetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgSyncAd7794CsetRString,
				(unsigned ) pFromFpga->data & DigCfgSyncAd7794CsetMask);
	break;

    case DigCfgSyncTps62210CsetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigCfgSyncTps62210CsetR,
				(pFromFpga->data & DigCfgSyncTps62210CsetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgSyncTps62210CsetRString,
				(unsigned ) pFromFpga->data & DigCfgSyncTps62210CsetMask);
	break;

    case DigDspAdcTestMdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspAdcTestMdR,
				(pFromFpga->data & DigDspAdcTestMdMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestMdRString,
				(unsigned ) pFromFpga->data & DigDspAdcTestMdMask);
	break;

    case DigDspAdcTestResetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspAdcTestResetR,
				(pFromFpga->data & DigDspAdcTestResetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestResetRString,
				(unsigned ) pFromFpga->data & DigDspAdcTestResetMask);
	break;

    case DigDspAmplitudeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspAmplitudeR,
				(pFromFpga->data & DigDspAmplitudeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAmplitudeRString,
				(unsigned ) pFromFpga->data & DigDspAmplitudeMask);
	break;

    case DigDspAverageLenRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspAverageLenR,
				(pFromFpga->data & DigDspAverageLenMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAverageLenRString,
				(unsigned ) pFromFpga->data & DigDspAverageLenMask);
	break;

    case DigDspBufTrigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspBufTrigR,
				(pFromFpga->data & DigDspBufTrigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspBufTrigRString,
				(unsigned ) pFromFpga->data & DigDspBufTrigMask);
	break;

    case DigDspCicPeriodRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspCicPeriodR,
				(pFromFpga->data & DigDspCicPeriodMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicPeriodRString,
				(unsigned ) pFromFpga->data & DigDspCicPeriodMask);
	break;

    case DigDspCicShiftRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspCicShiftR,
				(pFromFpga->data & DigDspCicShiftMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicShiftRString,
				(unsigned ) pFromFpga->data & DigDspCicShiftMask);
	break;

    case DigDspCircleBufFlipRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspCircleBufFlipR,
				(pFromFpga->data & DigDspCircleBufFlipMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipRString,
				(unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
	break;

    case DigDspDacDdsResetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspDacDdsResetR,
				(pFromFpga->data & DigDspDacDdsResetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacDdsResetRString,
				(unsigned ) pFromFpga->data & DigDspDacDdsResetMask);
	break;

    case DigDspDacMdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspDacMdR,
				(pFromFpga->data & DigDspDacMdMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacMdRString,
				(unsigned ) pFromFpga->data & DigDspDacMdMask);
	break;

    case DigDspDdsaModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspDdsaModR,
				(pFromFpga->data & DigDspDdsaModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaModRString,
				(unsigned ) pFromFpga->data & DigDspDdsaModMask);
	break;

    case DigDspDdsaPhstepHRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspDdsaPhstepHR,
				(pFromFpga->data & DigDspDdsaPhstepHMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepHRString,
				(unsigned ) pFromFpga->data & DigDspDdsaPhstepHMask);
	break;

    case DigDspDdsaPhstepLRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspDdsaPhstepLR,
				(pFromFpga->data & DigDspDdsaPhstepLMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepLRString,
				(unsigned ) pFromFpga->data & DigDspDdsaPhstepLMask);
	break;

    case DigDspHistCountWStrobeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspHistCountWStrobeR,
				(pFromFpga->data & DigDspHistCountWStrobeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspHistCountWStrobeRString,
				(unsigned ) pFromFpga->data & DigDspHistCountWStrobeMask);
	break;

    case DigDspLlrfDspDacEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspLlrfDspDacEnR,
				(pFromFpga->data & DigDspLlrfDspDacEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLlrfDspDacEnRString,
				(unsigned ) pFromFpga->data & DigDspLlrfDspDacEnMask);
	break;

    case DigDspLoAmpRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspLoAmpR,
				(pFromFpga->data & DigDspLoAmpMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLoAmpRString,
				(unsigned ) pFromFpga->data & DigDspLoAmpMask);
	break;

    case DigDspModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspModR,
				(pFromFpga->data & DigDspModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspModRString,
				(unsigned ) pFromFpga->data & DigDspModMask);
	break;

    case DigDspPhStepHRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspPhStepHR,
				(pFromFpga->data & DigDspPhStepHMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhStepHRString,
				(unsigned ) pFromFpga->data & DigDspPhStepHMask);
	break;

    case DigDspPhStepLRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspPhStepLR,
				(pFromFpga->data & DigDspPhStepLMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhStepLRString,
				(unsigned ) pFromFpga->data & DigDspPhStepLMask);
	break;

    case DigDspPrcDspCselRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspPrcDspCselR,
				(pFromFpga->data & DigDspPrcDspCselMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspCselRString,
				(unsigned ) pFromFpga->data & DigDspPrcDspCselMask);
	break;

    case DigDspPrcDspPrlCfgRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspPrcDspPrlCfgR,
				(pFromFpga->data & DigDspPrcDspPrlCfgMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlCfgRString,
				(unsigned ) pFromFpga->data & DigDspPrcDspPrlCfgMask);
	break;

    case DigDspPrcDspPrlGainRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspPrcDspPrlGainMask + 1 ) >> 1))? ~DigDspPrcDspPrlGainMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspPrcDspPrlGainR,
				(pFromFpga->data & DigDspPrcDspPrlGainMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlGainRString,
				(unsigned ) pFromFpga->data & DigDspPrcDspPrlGainMask);
	break;

    case DigDspRsmBeam0ModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmBeam0ModR,
				(pFromFpga->data & DigDspRsmBeam0ModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0ModRString,
				(unsigned ) pFromFpga->data & DigDspRsmBeam0ModMask);
	break;

    case DigDspRsmBeam0PhInitRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmBeam0PhInitR,
				(pFromFpga->data & DigDspRsmBeam0PhInitMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0PhInitRString,
				(unsigned ) pFromFpga->data & DigDspRsmBeam0PhInitMask);
	break;

    case DigDspRsmBeam0PhStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmBeam0PhStepR,
				(pFromFpga->data & DigDspRsmBeam0PhStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0PhStepRString,
				(unsigned ) pFromFpga->data & DigDspRsmBeam0PhStepMask);
	break;

    case DigDspRsmBeam1ModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmBeam1ModR,
				(pFromFpga->data & DigDspRsmBeam1ModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1ModRString,
				(unsigned ) pFromFpga->data & DigDspRsmBeam1ModMask);
	break;

    case DigDspRsmBeam1PhInitRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmBeam1PhInitR,
				(pFromFpga->data & DigDspRsmBeam1PhInitMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1PhInitRString,
				(unsigned ) pFromFpga->data & DigDspRsmBeam1PhInitMask);
	break;

    case DigDspRsmBeam1PhStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmBeam1PhStepR,
				(pFromFpga->data & DigDspRsmBeam1PhStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1PhStepRString,
				(unsigned ) pFromFpga->data & DigDspRsmBeam1PhStepMask);
	break;

    case DigDspRsmC4MechPrngIvaRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC4MechPrngIvaR,
				(pFromFpga->data & DigDspRsmC4MechPrngIvaMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngIvaRString,
				(unsigned ) pFromFpga->data & DigDspRsmC4MechPrngIvaMask);
	break;

    case DigDspRsmC4MechPrngIvbRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC4MechPrngIvbR,
				(pFromFpga->data & DigDspRsmC4MechPrngIvbMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngIvbRString,
				(unsigned ) pFromFpga->data & DigDspRsmC4MechPrngIvbMask);
	break;

    case DigDspRsmC4MechPrngRndRunRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC4MechPrngRndRunR,
				(pFromFpga->data & DigDspRsmC4MechPrngRndRunMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngRndRunRString,
				(unsigned ) pFromFpga->data & DigDspRsmC4MechPrngRndRunMask);
	break;

    case DigDspRsmC0ACoffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0ACoffsetMask + 1 ) >> 1))? ~DigDspRsmC0ACoffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0ACoffsetR,
				(pFromFpga->data & DigDspRsmC0ACoffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ACoffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0ACoffsetMask);
	break;

    case DigDspRsmC0AForOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0AForOffsetMask + 1 ) >> 1))? ~DigDspRsmC0AForOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0AForOffsetR,
				(pFromFpga->data & DigDspRsmC0AForOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0AForOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0AForOffsetMask);
	break;

    case DigDspRsmC0ARflOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0ARflOffsetMask + 1 ) >> 1))? ~DigDspRsmC0ARflOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0ARflOffsetR,
				(pFromFpga->data & DigDspRsmC0ARflOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ARflOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0ARflOffsetMask);
	break;

    case DigDspRsmC0AmpLpBwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0AmpLpBwMask + 1 ) >> 1))? ~DigDspRsmC0AmpLpBwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0AmpLpBwR,
				(pFromFpga->data & DigDspRsmC0AmpLpBwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0AmpLpBwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0AmpLpBwMask);
	break;

    case DigDspRsmC0C4Efrq0CrsFqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Efrq0CrsFqMask + 1 ) >> 1))? ~DigDspRsmC0C4Efrq0CrsFqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Efrq0CrsFqR,
				(pFromFpga->data & DigDspRsmC0C4Efrq0CrsFqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq0CrsFqRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq0CrsFqMask);
	break;

    case DigDspRsmC0C4Efrq1CrsFqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Efrq1CrsFqMask + 1 ) >> 1))? ~DigDspRsmC0C4Efrq1CrsFqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Efrq1CrsFqR,
				(pFromFpga->data & DigDspRsmC0C4Efrq1CrsFqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq1CrsFqRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq1CrsFqMask);
	break;

    case DigDspRsmC0C4Efrq2CrsFqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Efrq2CrsFqMask + 1 ) >> 1))? ~DigDspRsmC0C4Efrq2CrsFqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Efrq2CrsFqR,
				(pFromFpga->data & DigDspRsmC0C4Efrq2CrsFqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq2CrsFqRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq2CrsFqMask);
	break;

    case DigDspRsmC0C4Emode0BeamCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode0BeamCplMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode0BeamCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode0BeamCplR,
				(pFromFpga->data & DigDspRsmC0C4Emode0BeamCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0BeamCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0BeamCplMask);
	break;

    case DigDspRsmC0C4Emode0BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode0BwMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode0BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode0BwR,
				(pFromFpga->data & DigDspRsmC0C4Emode0BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0BwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0BwMask);
	break;

    case DigDspRsmC0C4Emode0DrvCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode0DrvCplMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode0DrvCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode0DrvCplR,
				(pFromFpga->data & DigDspRsmC0C4Emode0DrvCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0DrvCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0DrvCplMask);
	break;

    case DigDspRsmC0C4Emode1BeamCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode1BeamCplMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode1BeamCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode1BeamCplR,
				(pFromFpga->data & DigDspRsmC0C4Emode1BeamCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1BeamCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1BeamCplMask);
	break;

    case DigDspRsmC0C4Emode1BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode1BwMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode1BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode1BwR,
				(pFromFpga->data & DigDspRsmC0C4Emode1BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1BwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1BwMask);
	break;

    case DigDspRsmC0C4Emode1DrvCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode1DrvCplMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode1DrvCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode1DrvCplR,
				(pFromFpga->data & DigDspRsmC0C4Emode1DrvCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1DrvCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1DrvCplMask);
	break;

    case DigDspRsmC0C4Emode2BeamCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode2BeamCplMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode2BeamCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode2BeamCplR,
				(pFromFpga->data & DigDspRsmC0C4Emode2BeamCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2BeamCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2BeamCplMask);
	break;

    case DigDspRsmC0C4Emode2BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode2BwMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode2BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode2BwR,
				(pFromFpga->data & DigDspRsmC0C4Emode2BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2BwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2BwMask);
	break;

    case DigDspRsmC0C4Emode2DrvCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC0C4Emode2DrvCplMask + 1 ) >> 1))? ~DigDspRsmC0C4Emode2DrvCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4Emode2DrvCplR,
				(pFromFpga->data & DigDspRsmC0C4Emode2DrvCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2DrvCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2DrvCplMask);
	break;

    case DigDspRsmC0C4ElecModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecModR,
				(pFromFpga->data & DigDspRsmC0C4ElecModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecModRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecModMask);
	break;

    case DigDspRsmC0C4ElecPhStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0C4ElecPhStepR,
				(pFromFpga->data & DigDspRsmC0C4ElecPhStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecPhStepRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0C4ElecPhStepMask);
	break;

    case DigDspRsmC0ComprSatCtlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0ComprSatCtlR,
				(pFromFpga->data & DigDspRsmC0ComprSatCtlMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ComprSatCtlRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0ComprSatCtlMask);
	break;

    case DigDspRsmC0PrngIvaRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0PrngIvaR,
				(pFromFpga->data & DigDspRsmC0PrngIvaMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngIvaRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0PrngIvaMask);
	break;

    case DigDspRsmC0PrngIvbRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0PrngIvbR,
				(pFromFpga->data & DigDspRsmC0PrngIvbMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngIvbRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0PrngIvbMask);
	break;

    case DigDspRsmC0PrngRndRunRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC0PrngRndRunR,
				(pFromFpga->data & DigDspRsmC0PrngRndRunMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngRndRunRString,
				(unsigned ) pFromFpga->data & DigDspRsmC0PrngRndRunMask);
	break;

    case DigDspRsmC1ACoffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1ACoffsetMask + 1 ) >> 1))? ~DigDspRsmC1ACoffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1ACoffsetR,
				(pFromFpga->data & DigDspRsmC1ACoffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ACoffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1ACoffsetMask);
	break;

    case DigDspRsmC1AForOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1AForOffsetMask + 1 ) >> 1))? ~DigDspRsmC1AForOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1AForOffsetR,
				(pFromFpga->data & DigDspRsmC1AForOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1AForOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1AForOffsetMask);
	break;

    case DigDspRsmC1ARflOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1ARflOffsetMask + 1 ) >> 1))? ~DigDspRsmC1ARflOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1ARflOffsetR,
				(pFromFpga->data & DigDspRsmC1ARflOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ARflOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1ARflOffsetMask);
	break;

    case DigDspRsmC1AmpLpBwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1AmpLpBwMask + 1 ) >> 1))? ~DigDspRsmC1AmpLpBwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1AmpLpBwR,
				(pFromFpga->data & DigDspRsmC1AmpLpBwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1AmpLpBwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1AmpLpBwMask);
	break;

    case DigDspRsmC1C4Efrq0CrsFqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Efrq0CrsFqMask + 1 ) >> 1))? ~DigDspRsmC1C4Efrq0CrsFqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Efrq0CrsFqR,
				(pFromFpga->data & DigDspRsmC1C4Efrq0CrsFqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq0CrsFqRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq0CrsFqMask);
	break;

    case DigDspRsmC1C4Efrq1CrsFqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Efrq1CrsFqMask + 1 ) >> 1))? ~DigDspRsmC1C4Efrq1CrsFqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Efrq1CrsFqR,
				(pFromFpga->data & DigDspRsmC1C4Efrq1CrsFqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq1CrsFqRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq1CrsFqMask);
	break;

    case DigDspRsmC1C4Efrq2CrsFqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Efrq2CrsFqMask + 1 ) >> 1))? ~DigDspRsmC1C4Efrq2CrsFqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Efrq2CrsFqR,
				(pFromFpga->data & DigDspRsmC1C4Efrq2CrsFqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq2CrsFqRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq2CrsFqMask);
	break;

    case DigDspRsmC1C4Emode0BeamCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode0BeamCplMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode0BeamCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode0BeamCplR,
				(pFromFpga->data & DigDspRsmC1C4Emode0BeamCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0BeamCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0BeamCplMask);
	break;

    case DigDspRsmC1C4Emode0BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode0BwMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode0BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode0BwR,
				(pFromFpga->data & DigDspRsmC1C4Emode0BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0BwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0BwMask);
	break;

    case DigDspRsmC1C4Emode0DrvCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode0DrvCplMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode0DrvCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode0DrvCplR,
				(pFromFpga->data & DigDspRsmC1C4Emode0DrvCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0DrvCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0DrvCplMask);
	break;

    case DigDspRsmC1C4Emode1BeamCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode1BeamCplMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode1BeamCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode1BeamCplR,
				(pFromFpga->data & DigDspRsmC1C4Emode1BeamCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1BeamCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1BeamCplMask);
	break;

    case DigDspRsmC1C4Emode1BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode1BwMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode1BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode1BwR,
				(pFromFpga->data & DigDspRsmC1C4Emode1BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1BwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1BwMask);
	break;

    case DigDspRsmC1C4Emode1DrvCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode1DrvCplMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode1DrvCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode1DrvCplR,
				(pFromFpga->data & DigDspRsmC1C4Emode1DrvCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1DrvCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1DrvCplMask);
	break;

    case DigDspRsmC1C4Emode2BeamCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode2BeamCplMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode2BeamCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode2BeamCplR,
				(pFromFpga->data & DigDspRsmC1C4Emode2BeamCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2BeamCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2BeamCplMask);
	break;

    case DigDspRsmC1C4Emode2BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode2BwMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode2BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode2BwR,
				(pFromFpga->data & DigDspRsmC1C4Emode2BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2BwRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2BwMask);
	break;

    case DigDspRsmC1C4Emode2DrvCplRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmC1C4Emode2DrvCplMask + 1 ) >> 1))? ~DigDspRsmC1C4Emode2DrvCplMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4Emode2DrvCplR,
				(pFromFpga->data & DigDspRsmC1C4Emode2DrvCplMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2DrvCplRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2DrvCplMask);
	break;

    case DigDspRsmC1C4ElecModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecModR,
				(pFromFpga->data & DigDspRsmC1C4ElecModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecModRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecModMask);
	break;

    case DigDspRsmC1C4ElecPhStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1C4ElecPhStepR,
				(pFromFpga->data & DigDspRsmC1C4ElecPhStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecPhStepRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1C4ElecPhStepMask);
	break;

    case DigDspRsmC1ComprSatCtlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1ComprSatCtlR,
				(pFromFpga->data & DigDspRsmC1ComprSatCtlMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ComprSatCtlRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1ComprSatCtlMask);
	break;

    case DigDspRsmC1PrngIvaRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1PrngIvaR,
				(pFromFpga->data & DigDspRsmC1PrngIvaMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngIvaRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1PrngIvaMask);
	break;

    case DigDspRsmC1PrngIvbRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1PrngIvbR,
				(pFromFpga->data & DigDspRsmC1PrngIvbMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngIvbRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1PrngIvbMask);
	break;

    case DigDspRsmC1PrngRndRunRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmC1PrngRndRunR,
				(pFromFpga->data & DigDspRsmC1PrngRndRunMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngRndRunRString,
				(unsigned ) pFromFpga->data & DigDspRsmC1PrngRndRunMask);
	break;

    case DigDspRsmDacIqPhRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmDacIqPhR,
				(pFromFpga->data & DigDspRsmDacIqPhMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmDacIqPhRString,
				(unsigned ) pFromFpga->data & DigDspRsmDacIqPhMask);
	break;

    case DigDspRsmSh0DspChanKeepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspChanKeepR,
				(pFromFpga->data & DigDspRsmSh0DspChanKeepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspChanKeepRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspChanKeepMask);
	break;

    case DigDspRsmSh0DspFdbkCrsScaleRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspFdbkCrsScaleR,
				(pFromFpga->data & DigDspRsmSh0DspFdbkCrsScaleMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkCrsScaleRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkCrsScaleMask);
	break;

    case DigDspRsmSh0DspFdbkMpProcPhOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspFdbkMpProcPhOffsetMask + 1 ) >> 1))? ~DigDspRsmSh0DspFdbkMpProcPhOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspFdbkMpProcPhOffsetR,
				(pFromFpga->data & DigDspRsmSh0DspFdbkMpProcPhOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcPhOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcPhOffsetMask);
	break;

    case DigDspRsmSh0DspFdbkMpProcSelEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspFdbkMpProcSelEnR,
				(pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSelEnRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelEnMask);
	break;

    case DigDspRsmSh0DspFdbkMpProcSelThreshRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh0DspFdbkMpProcSelThreshMask + 1 ) >> 1))? ~DigDspRsmSh0DspFdbkMpProcSelThreshMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspFdbkMpProcSelThreshR,
				(pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelThreshMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSelThreshRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelThreshMask);
	break;

    case DigDspRsmSh0DspModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspModR,
				(pFromFpga->data & DigDspRsmSh0DspModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspModRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspModMask);
	break;

    case DigDspRsmSh0DspPhStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspPhStepR,
				(pFromFpga->data & DigDspRsmSh0DspPhStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspPhStepRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspPhStepMask);
	break;

    case DigDspRsmSh0DspPiezoPiezoDcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspPiezoPiezoDcR,
				(pFromFpga->data & DigDspRsmSh0DspPiezoPiezoDcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspPiezoPiezoDcRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspPiezoPiezoDcMask);
	break;

    case DigDspRsmSh0DspTagRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspTagR,
				(pFromFpga->data & DigDspRsmSh0DspTagMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspTagRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspTagMask);
	break;

    case DigDspRsmSh0DspUseFiberIqRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspUseFiberIqR,
				(pFromFpga->data & DigDspRsmSh0DspUseFiberIqMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspUseFiberIqRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspUseFiberIqMask);
	break;

    case DigDspRsmSh0DspWvSampPerRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspWvSampPerR,
				(pFromFpga->data & DigDspRsmSh0DspWvSampPerMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspWvSampPerRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspWvSampPerMask);
	break;

    case DigDspRsmSh0DspWvShiftRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh0DspWvShiftR,
				(pFromFpga->data & DigDspRsmSh0DspWvShiftMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspWvShiftRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh0DspWvShiftMask);
	break;

    case DigDspRsmSh1DspChanKeepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspChanKeepR,
				(pFromFpga->data & DigDspRsmSh1DspChanKeepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspChanKeepRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspChanKeepMask);
	break;

    case DigDspRsmSh1DspFdbkCrsScaleRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspFdbkCrsScaleR,
				(pFromFpga->data & DigDspRsmSh1DspFdbkCrsScaleMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkCrsScaleRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkCrsScaleMask);
	break;

    case DigDspRsmSh1DspFdbkMpProcPhOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspFdbkMpProcPhOffsetMask + 1 ) >> 1))? ~DigDspRsmSh1DspFdbkMpProcPhOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspFdbkMpProcPhOffsetR,
				(pFromFpga->data & DigDspRsmSh1DspFdbkMpProcPhOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcPhOffsetRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcPhOffsetMask);
	break;

    case DigDspRsmSh1DspFdbkMpProcSelEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspFdbkMpProcSelEnR,
				(pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSelEnRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelEnMask);
	break;

    case DigDspRsmSh1DspFdbkMpProcSelThreshRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((DigDspRsmSh1DspFdbkMpProcSelThreshMask + 1 ) >> 1))? ~DigDspRsmSh1DspFdbkMpProcSelThreshMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspFdbkMpProcSelThreshR,
				(pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelThreshMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSelThreshRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelThreshMask);
	break;

    case DigDspRsmSh1DspModRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspModR,
				(pFromFpga->data & DigDspRsmSh1DspModMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspModRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspModMask);
	break;

    case DigDspRsmSh1DspPhStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspPhStepR,
				(pFromFpga->data & DigDspRsmSh1DspPhStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspPhStepRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspPhStepMask);
	break;

    case DigDspRsmSh1DspPiezoPiezoDcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspPiezoPiezoDcR,
				(pFromFpga->data & DigDspRsmSh1DspPiezoPiezoDcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspPiezoPiezoDcRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspPiezoPiezoDcMask);
	break;

    case DigDspRsmSh1DspTagRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspTagR,
				(pFromFpga->data & DigDspRsmSh1DspTagMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspTagRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspTagMask);
	break;

    case DigDspRsmSh1DspUseFiberIqRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspUseFiberIqR,
				(pFromFpga->data & DigDspRsmSh1DspUseFiberIqMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspUseFiberIqRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspUseFiberIqMask);
	break;

    case DigDspRsmSh1DspWvSampPerRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspWvSampPerR,
				(pFromFpga->data & DigDspRsmSh1DspWvSampPerMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspWvSampPerRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspWvSampPerMask);
	break;

    case DigDspRsmSh1DspWvShiftRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRsmSh1DspWvShiftR,
				(pFromFpga->data & DigDspRsmSh1DspWvShiftMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspWvShiftRString,
				(unsigned ) pFromFpga->data & DigDspRsmSh1DspWvShiftMask);
	break;

    case DigDspRewindRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspRewindR,
				(pFromFpga->data & DigDspRewindMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRewindRString,
				(unsigned ) pFromFpga->data & DigDspRewindMask);
	break;

    case DigDspSsaStimAmpstepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspSsaStimAmpstepR,
				(pFromFpga->data & DigDspSsaStimAmpstepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimAmpstepRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimAmpstepMask);
	break;

    case DigDspSsaStimEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspSsaStimEnR,
				(pFromFpga->data & DigDspSsaStimEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimEnRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimEnMask);
	break;

    case DigDspSsaStimGPeriodRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspSsaStimGPeriodR,
				(pFromFpga->data & DigDspSsaStimGPeriodMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimGPeriodRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimGPeriodMask);
	break;

    case DigDspSsaStimPertstepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspSsaStimPertstepR,
				(pFromFpga->data & DigDspSsaStimPertstepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimPertstepRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimPertstepMask);
	break;

    case DigDspTraceKeepRAdr|flagReadMask:
	tmpData = pFromFpga->data & DigDspTraceKeepMask;
//    printf("%s got data 0x%x for DigDspTraceKeepRAdr\n",__PRETTY_FUNCTION__,tmpData);
		status = (asynStatus) setIntegerParam(p_DigDspTraceKeepR,
				(pFromFpga->data & DigDspTraceKeepMask));
		// Count the number of bits set
		for (nchan_ = 0; tmpData; nchan_++)
		{
		  tmpData &= tmpData - 1; // clear the least significant bit set
		}
		setIntegerParam(p_IQNActive, nchan_);
//	    printf("%s DigDspTraceKeepRAdr says %d active channels\n",__PRETTY_FUNCTION__,nchan_);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepRString,
				(unsigned ) pFromFpga->data & DigDspTraceKeepMask);
	break;

    case DigDspTraceResetWeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspTraceResetWeR,
				(pFromFpga->data & DigDspTraceResetWeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceResetWeRString,
				(unsigned ) pFromFpga->data & DigDspTraceResetWeMask);
	break;

    case DigDspTrigInternalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspTrigInternalR,
				(pFromFpga->data & DigDspTrigInternalMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigInternalRString,
				(unsigned ) pFromFpga->data & DigDspTrigInternalMask);
	break;

    case DigDspTrigMdRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspTrigMdR,
				(pFromFpga->data & DigDspTrigMdMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigMdRString,
				(unsigned ) pFromFpga->data & DigDspTrigMdMask);
	break;

    case DigDspWv0SrcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspWv0SrcR,
				(pFromFpga->data & DigDspWv0SrcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWv0SrcRString,
				(unsigned ) pFromFpga->data & DigDspWv0SrcMask);
	break;

    case DigDspWv1SrcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigDspWv1SrcR,
				(pFromFpga->data & DigDspWv1SrcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWv1SrcRString,
				(unsigned ) pFromFpga->data & DigDspWv1SrcMask);
	break;

    case DomainJumpRealignRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DomainJumpRealignR,
				(pFromFpga->data & DomainJumpRealignMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignRString,
				(unsigned ) pFromFpga->data & DomainJumpRealignMask);
	break;

    case IccCfgRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IccCfgR,
				(pFromFpga->data & IccCfgMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgRString,
				(unsigned ) pFromFpga->data & IccCfgMask);
	break;

    case QsfpI2CRegRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_QsfpI2CRegR,
				(pFromFpga->data & QsfpI2CRegMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegRString,
				(unsigned ) pFromFpga->data & QsfpI2CRegMask);
	break;

    case SfpAddressSetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SfpAddressSetR,
				(pFromFpga->data & SfpAddressSetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetRString,
				(unsigned ) pFromFpga->data & SfpAddressSetMask);
	break;

    case TagNowRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TagNowR,
				(pFromFpga->data & TagNowMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowRString,
				(unsigned ) pFromFpga->data & TagNowMask);
		break;

	default:
		if( wavesStart <= (pFromFpga->addr & addrMask) && (pFromFpga->addr & addrMask) <= wavesEnd )
		{
//			printf("%s waveform addres 0x%x, value %d\n", __PRETTY_FUNCTION__, (pFromFpga->addr & addrMask), pFromFpga->data);
			processWaveReadback(pFromFpga);
		}
		else
		{
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		}
		break;
    }

    return status;
}


/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRC::processRegWriteResponse(const FpgaReg *pFromFpga)
{
	asynStatus status = asynSuccess;
	epicsInt32 valueSet[maxMsgSize/sizeof(FpgaReg)]; // Put the value sent to the FPGA here for comparison
//	epicsUInt32 uValueSet;
	epicsInt32 tmpData;
	epicsInt32 errorCount;
//  variables that may be useful for checking array data
//	asynUser *pAsynArrayUser;
//	unsigned int i;
	assert(!(pFromFpga->addr&flagReadMask)); // This function is only for read registers

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case DigDspRsmC4MechNoiseCplKOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC4MechNoiseCplKOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC4MechNoiseCplKOutMask) == (pFromFpga->data & DigDspRsmC4MechNoiseCplKOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechNoiseCplKOutWString, (unsigned ) pFromFpga->data & DigDspRsmC4MechNoiseCplKOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechNoiseCplKOutWString, valueSet[0] & DigDspRsmC4MechNoiseCplKOutMask, (unsigned ) pFromFpga->data & DigDspRsmC4MechNoiseCplKOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC4MechNoiseCplKOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC4MechResnrPropConstWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC4MechResnrPropConstW, valueSet);
		if( (valueSet[0] & DigDspRsmC4MechResnrPropConstMask) == (pFromFpga->data & DigDspRsmC4MechResnrPropConstMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechResnrPropConstWString, (unsigned ) pFromFpga->data & DigDspRsmC4MechResnrPropConstMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechResnrPropConstWString, valueSet[0] & DigDspRsmC4MechResnrPropConstMask, (unsigned ) pFromFpga->data & DigDspRsmC4MechResnrPropConstMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC4MechResnrPropConstW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecDot0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecDot0KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecDot0KOutMask) == (pFromFpga->data & DigDspRsmC0C4ElecDot0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot0KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot0KOutWString, valueSet[0] & DigDspRsmC0C4ElecDot0KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot0KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecDot0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecDot1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecDot1KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecDot1KOutMask) == (pFromFpga->data & DigDspRsmC0C4ElecDot1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot1KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot1KOutWString, valueSet[0] & DigDspRsmC0C4ElecDot1KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot1KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecDot1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecDot2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecDot2KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecDot2KOutMask) == (pFromFpga->data & DigDspRsmC0C4ElecDot2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot2KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecDot2KOutWString, valueSet[0] & DigDspRsmC0C4ElecDot2KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecDot2KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecDot2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecOuterProd0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecOuterProd0KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecOuterProd0KOutMask) == (pFromFpga->data & DigDspRsmC0C4ElecOuterProd0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd0KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd0KOutWString, valueSet[0] & DigDspRsmC0C4ElecOuterProd0KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd0KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecOuterProd0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecOuterProd1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecOuterProd1KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecOuterProd1KOutMask) == (pFromFpga->data & DigDspRsmC0C4ElecOuterProd1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd1KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd1KOutWString, valueSet[0] & DigDspRsmC0C4ElecOuterProd1KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd1KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecOuterProd1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecOuterProd2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecOuterProd2KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecOuterProd2KOutMask) == (pFromFpga->data & DigDspRsmC0C4ElecOuterProd2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd2KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecOuterProd2KOutWString, valueSet[0] & DigDspRsmC0C4ElecOuterProd2KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecOuterProd2KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecOuterProd2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0PiezoCplKOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0PiezoCplKOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC0PiezoCplKOutMask) == (pFromFpga->data & DigDspRsmC0PiezoCplKOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PiezoCplKOutWString, (unsigned ) pFromFpga->data & DigDspRsmC0PiezoCplKOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PiezoCplKOutWString, valueSet[0] & DigDspRsmC0PiezoCplKOutMask, (unsigned ) pFromFpga->data & DigDspRsmC0PiezoCplKOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0PiezoCplKOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecDot0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecDot0KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecDot0KOutMask) == (pFromFpga->data & DigDspRsmC1C4ElecDot0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot0KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot0KOutWString, valueSet[0] & DigDspRsmC1C4ElecDot0KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot0KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecDot0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecDot1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecDot1KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecDot1KOutMask) == (pFromFpga->data & DigDspRsmC1C4ElecDot1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot1KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot1KOutWString, valueSet[0] & DigDspRsmC1C4ElecDot1KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot1KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecDot1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecDot2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecDot2KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecDot2KOutMask) == (pFromFpga->data & DigDspRsmC1C4ElecDot2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot2KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecDot2KOutWString, valueSet[0] & DigDspRsmC1C4ElecDot2KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecDot2KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecDot2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecOuterProd0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecOuterProd0KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecOuterProd0KOutMask) == (pFromFpga->data & DigDspRsmC1C4ElecOuterProd0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd0KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd0KOutWString, valueSet[0] & DigDspRsmC1C4ElecOuterProd0KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd0KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecOuterProd0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecOuterProd1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecOuterProd1KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecOuterProd1KOutMask) == (pFromFpga->data & DigDspRsmC1C4ElecOuterProd1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd1KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd1KOutWString, valueSet[0] & DigDspRsmC1C4ElecOuterProd1KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd1KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecOuterProd1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecOuterProd2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecOuterProd2KOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecOuterProd2KOutMask) == (pFromFpga->data & DigDspRsmC1C4ElecOuterProd2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd2KOutWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecOuterProd2KOutWString, valueSet[0] & DigDspRsmC1C4ElecOuterProd2KOutMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecOuterProd2KOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecOuterProd2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1PiezoCplKOutWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1PiezoCplKOutW, valueSet);
		if( (valueSet[0] & DigDspRsmC1PiezoCplKOutMask) == (pFromFpga->data & DigDspRsmC1PiezoCplKOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PiezoCplKOutWString, (unsigned ) pFromFpga->data & DigDspRsmC1PiezoCplKOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PiezoCplKOutWString, valueSet[0] & DigDspRsmC1PiezoCplKOutMask, (unsigned ) pFromFpga->data & DigDspRsmC1PiezoCplKOutMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1PiezoCplKOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspFdbkMpProcCoeffWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspFdbkMpProcCoeffW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspFdbkMpProcCoeffMask) == (pFromFpga->data & DigDspRsmSh0DspFdbkMpProcCoeffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcCoeffWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcCoeffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcCoeffWString, valueSet[0] & DigDspRsmSh0DspFdbkMpProcCoeffMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcCoeffMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspFdbkMpProcCoeffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspFdbkMpProcLimWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspFdbkMpProcLimW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspFdbkMpProcLimMask) == (pFromFpga->data & DigDspRsmSh0DspFdbkMpProcLimMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcLimWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcLimMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcLimWString, valueSet[0] & DigDspRsmSh0DspFdbkMpProcLimMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcLimMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspFdbkMpProcLimW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspFdbkMpProcSetmpWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspFdbkMpProcSetmpW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspFdbkMpProcSetmpMask) == (pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSetmpWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSetmpWString, valueSet[0] & DigDspRsmSh0DspFdbkMpProcSetmpMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSetmpMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspFdbkMpProcSetmpW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspFdbkMpProcCoeffWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspFdbkMpProcCoeffW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspFdbkMpProcCoeffMask) == (pFromFpga->data & DigDspRsmSh1DspFdbkMpProcCoeffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcCoeffWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcCoeffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcCoeffWString, valueSet[0] & DigDspRsmSh1DspFdbkMpProcCoeffMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcCoeffMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspFdbkMpProcCoeffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspFdbkMpProcLimWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspFdbkMpProcLimW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspFdbkMpProcLimMask) == (pFromFpga->data & DigDspRsmSh1DspFdbkMpProcLimMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcLimWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcLimMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcLimWString, valueSet[0] & DigDspRsmSh1DspFdbkMpProcLimMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcLimMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspFdbkMpProcLimW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspFdbkMpProcSetmpWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspFdbkMpProcSetmpW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspFdbkMpProcSetmpMask) == (pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSetmpWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSetmpWString, valueSet[0] & DigDspRsmSh1DspFdbkMpProcSetmpMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSetmpMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspFdbkMpProcSetmpW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4EdcoCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4EdcoCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4EdcoCplMask) == (pFromFpga->data & DigDspRsmC0C4EdcoCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4EdcoCplWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4EdcoCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4EdcoCplWString, valueSet[0] & DigDspRsmC0C4EdcoCplMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4EdcoCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4EdcoCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4EdcoPhOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4EdcoPhOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4EdcoPhOffsetMask) == (pFromFpga->data & DigDspRsmC0C4EdcoPhOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4EdcoPhOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4EdcoPhOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4EdcoPhOffsetWString, valueSet[0] & DigDspRsmC0C4EdcoPhOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4EdcoPhOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4EdcoPhOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4EdcoCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4EdcoCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4EdcoCplMask) == (pFromFpga->data & DigDspRsmC1C4EdcoCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4EdcoCplWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4EdcoCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4EdcoCplWString, valueSet[0] & DigDspRsmC1C4EdcoCplMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4EdcoCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4EdcoCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4EdcoPhOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4EdcoPhOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4EdcoPhOffsetMask) == (pFromFpga->data & DigDspRsmC1C4EdcoPhOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4EdcoPhOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4EdcoPhOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4EdcoPhOffsetWString, valueSet[0] & DigDspRsmC1C4EdcoPhOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4EdcoPhOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4EdcoPhOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspLpNotchLp1AKxWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspLpNotchLp1AKxW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspLpNotchLp1AKxMask) == (pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1AKxWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1AKxWString, valueSet[0] & DigDspRsmSh0DspLpNotchLp1AKxMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKxMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspLpNotchLp1AKxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspLpNotchLp1AKyWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspLpNotchLp1AKyW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspLpNotchLp1AKyMask) == (pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1AKyWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1AKyWString, valueSet[0] & DigDspRsmSh0DspLpNotchLp1AKyMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1AKyMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspLpNotchLp1AKyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspLpNotchLp1BKxWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspLpNotchLp1BKxW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspLpNotchLp1BKxMask) == (pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1BKxWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1BKxWString, valueSet[0] & DigDspRsmSh0DspLpNotchLp1BKxMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKxMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspLpNotchLp1BKxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspLpNotchLp1BKyWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspLpNotchLp1BKyW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspLpNotchLp1BKyMask) == (pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1BKyWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspLpNotchLp1BKyWString, valueSet[0] & DigDspRsmSh0DspLpNotchLp1BKyMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspLpNotchLp1BKyMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspLpNotchLp1BKyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspLpNotchLp1AKxWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspLpNotchLp1AKxW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspLpNotchLp1AKxMask) == (pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1AKxWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1AKxWString, valueSet[0] & DigDspRsmSh1DspLpNotchLp1AKxMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKxMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspLpNotchLp1AKxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspLpNotchLp1AKyWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspLpNotchLp1AKyW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspLpNotchLp1AKyMask) == (pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1AKyWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1AKyWString, valueSet[0] & DigDspRsmSh1DspLpNotchLp1AKyMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1AKyMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspLpNotchLp1AKyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspLpNotchLp1BKxWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspLpNotchLp1BKxW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspLpNotchLp1BKxMask) == (pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1BKxWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1BKxWString, valueSet[0] & DigDspRsmSh1DspLpNotchLp1BKxMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKxMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspLpNotchLp1BKxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspLpNotchLp1BKyWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspLpNotchLp1BKyW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspLpNotchLp1BKyMask) == (pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1BKyWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspLpNotchLp1BKyWString, valueSet[0] & DigDspRsmSh1DspLpNotchLp1BKyMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspLpNotchLp1BKyMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspLpNotchLp1BKyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case AdcMmcmWAdr:
		status = (asynStatus) getIntegerParam(p_AdcMmcmW, valueSet);
		if( (valueSet[0] & AdcMmcmMask) == (pFromFpga->data & AdcMmcmMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmWString, (unsigned ) pFromFpga->data & AdcMmcmMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmWString, valueSet[0] & AdcMmcmMask, (unsigned ) pFromFpga->data & AdcMmcmMask);
			status = asynError;
			setParamStatus(p_AdcMmcmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU15SpiDataAddrRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU15SpiDataAddrRW, valueSet);
		if( (valueSet[0] & DigCfgU15SpiDataAddrRMask) == (pFromFpga->data & DigCfgU15SpiDataAddrRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU15SpiDataAddrRWString, (unsigned ) pFromFpga->data & DigCfgU15SpiDataAddrRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU15SpiDataAddrRWString, valueSet[0] & DigCfgU15SpiDataAddrRMask, (unsigned ) pFromFpga->data & DigCfgU15SpiDataAddrRMask);
			status = asynError;
			setParamStatus(p_DigCfgU15SpiDataAddrRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU15SpiReadAndStartRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU15SpiReadAndStartRW, valueSet);
		if( (valueSet[0] & DigCfgU15SpiReadAndStartRMask) == (pFromFpga->data & DigCfgU15SpiReadAndStartRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU15SpiReadAndStartRWString, (unsigned ) pFromFpga->data & DigCfgU15SpiReadAndStartRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU15SpiReadAndStartRWString, valueSet[0] & DigCfgU15SpiReadAndStartRMask, (unsigned ) pFromFpga->data & DigCfgU15SpiReadAndStartRMask);
			status = asynError;
			setParamStatus(p_DigCfgU15SpiReadAndStartRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU18SpiDataAddrRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU18SpiDataAddrRW, valueSet);
		if( (valueSet[0] & DigCfgU18SpiDataAddrRMask) == (pFromFpga->data & DigCfgU18SpiDataAddrRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU18SpiDataAddrRWString, (unsigned ) pFromFpga->data & DigCfgU18SpiDataAddrRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU18SpiDataAddrRWString, valueSet[0] & DigCfgU18SpiDataAddrRMask, (unsigned ) pFromFpga->data & DigCfgU18SpiDataAddrRMask);
			status = asynError;
			setParamStatus(p_DigCfgU18SpiDataAddrRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU18SpiReadAndStartRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU18SpiReadAndStartRW, valueSet);
		if( (valueSet[0] & DigCfgU18SpiReadAndStartRMask) == (pFromFpga->data & DigCfgU18SpiReadAndStartRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU18SpiReadAndStartRWString, (unsigned ) pFromFpga->data & DigCfgU18SpiReadAndStartRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU18SpiReadAndStartRWString, valueSet[0] & DigCfgU18SpiReadAndStartRMask, (unsigned ) pFromFpga->data & DigCfgU18SpiReadAndStartRMask);
			status = asynError;
			setParamStatus(p_DigCfgU18SpiReadAndStartRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU2ClkResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU2ClkResetRW, valueSet);
		if( (valueSet[0] & DigCfgU2ClkResetRMask) == (pFromFpga->data & DigCfgU2ClkResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU2ClkResetRWString, (unsigned ) pFromFpga->data & DigCfgU2ClkResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU2ClkResetRWString, valueSet[0] & DigCfgU2ClkResetRMask, (unsigned ) pFromFpga->data & DigCfgU2ClkResetRMask);
			status = asynError;
			setParamStatus(p_DigCfgU2ClkResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU2IserdesResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU2IserdesResetRW, valueSet);
		if( (valueSet[0] & DigCfgU2IserdesResetRMask) == (pFromFpga->data & DigCfgU2IserdesResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU2IserdesResetRWString, (unsigned ) pFromFpga->data & DigCfgU2IserdesResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU2IserdesResetRWString, valueSet[0] & DigCfgU2IserdesResetRMask, (unsigned ) pFromFpga->data & DigCfgU2IserdesResetRMask);
			status = asynError;
			setParamStatus(p_DigCfgU2IserdesResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU3ClkResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU3ClkResetRW, valueSet);
		if( (valueSet[0] & DigCfgU3ClkResetRMask) == (pFromFpga->data & DigCfgU3ClkResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU3ClkResetRWString, (unsigned ) pFromFpga->data & DigCfgU3ClkResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU3ClkResetRWString, valueSet[0] & DigCfgU3ClkResetRMask, (unsigned ) pFromFpga->data & DigCfgU3ClkResetRMask);
			status = asynError;
			setParamStatus(p_DigCfgU3ClkResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU3IserdesResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU3IserdesResetRW, valueSet);
		if( (valueSet[0] & DigCfgU3IserdesResetRMask) == (pFromFpga->data & DigCfgU3IserdesResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU3IserdesResetRWString, (unsigned ) pFromFpga->data & DigCfgU3IserdesResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU3IserdesResetRWString, valueSet[0] & DigCfgU3IserdesResetRMask, (unsigned ) pFromFpga->data & DigCfgU3IserdesResetRMask);
			status = asynError;
			setParamStatus(p_DigCfgU3IserdesResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgU4ResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgU4ResetRW, valueSet);
		if( (valueSet[0] & DigCfgU4ResetRMask) == (pFromFpga->data & DigCfgU4ResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU4ResetRWString, (unsigned ) pFromFpga->data & DigCfgU4ResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgU4ResetRWString, valueSet[0] & DigCfgU4ResetRMask, (unsigned ) pFromFpga->data & DigCfgU4ResetRMask);
			status = asynError;
			setParamStatus(p_DigCfgU4ResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgBanyanMaskWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgBanyanMaskW, valueSet);
		if( (valueSet[0] & DigCfgBanyanMaskMask) == (pFromFpga->data & DigCfgBanyanMaskMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgBanyanMaskWString, (unsigned ) pFromFpga->data & DigCfgBanyanMaskMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgBanyanMaskWString, valueSet[0] & DigCfgBanyanMaskMask, (unsigned ) pFromFpga->data & DigCfgBanyanMaskMask);
			status = asynError;
			setParamStatus(p_DigCfgBanyanMaskW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgBitslipWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgBitslipW, valueSet);
		if( (valueSet[0] & DigCfgBitslipMask) == (pFromFpga->data & DigCfgBitslipMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgBitslipWString, (unsigned ) pFromFpga->data & DigCfgBitslipMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgBitslipWString, valueSet[0] & DigCfgBitslipMask, (unsigned ) pFromFpga->data & DigCfgBitslipMask);
			status = asynError;
			setParamStatus(p_DigCfgBitslipW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgIdelayctrlResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgIdelayctrlResetRW, valueSet);
		if( (valueSet[0] & DigCfgIdelayctrlResetRMask) == (pFromFpga->data & DigCfgIdelayctrlResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgIdelayctrlResetRWString, (unsigned ) pFromFpga->data & DigCfgIdelayctrlResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgIdelayctrlResetRWString, valueSet[0] & DigCfgIdelayctrlResetRMask, (unsigned ) pFromFpga->data & DigCfgIdelayctrlResetRMask);
			status = asynError;
			setParamStatus(p_DigCfgIdelayctrlResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgLlspiWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgLlspiWeW, valueSet);
		if( (valueSet[0] & DigCfgLlspiWeMask) == (pFromFpga->data & DigCfgLlspiWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgLlspiWeWString, (unsigned ) pFromFpga->data & DigCfgLlspiWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgLlspiWeWString, valueSet[0] & DigCfgLlspiWeMask, (unsigned ) pFromFpga->data & DigCfgLlspiWeMask);
			status = asynError;
			setParamStatus(p_DigCfgLlspiWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgMmcmResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgMmcmResetRW, valueSet);
		if( (valueSet[0] & DigCfgMmcmResetRMask) == (pFromFpga->data & DigCfgMmcmResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgMmcmResetRWString, (unsigned ) pFromFpga->data & DigCfgMmcmResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgMmcmResetRWString, valueSet[0] & DigCfgMmcmResetRMask, (unsigned ) pFromFpga->data & DigCfgMmcmResetRMask);
			status = asynError;
			setParamStatus(p_DigCfgMmcmResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgPeriphConfigWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgPeriphConfigW, valueSet);
		if( (valueSet[0] & DigCfgPeriphConfigMask) == (pFromFpga->data & DigCfgPeriphConfigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgPeriphConfigWString, (unsigned ) pFromFpga->data & DigCfgPeriphConfigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgPeriphConfigWString, valueSet[0] & DigCfgPeriphConfigMask, (unsigned ) pFromFpga->data & DigCfgPeriphConfigMask);
			status = asynError;
			setParamStatus(p_DigCfgPeriphConfigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgPhxTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgPhxTrigW, valueSet);
		if( (valueSet[0] & DigCfgPhxTrigMask) == (pFromFpga->data & DigCfgPhxTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgPhxTrigWString, (unsigned ) pFromFpga->data & DigCfgPhxTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgPhxTrigWString, valueSet[0] & DigCfgPhxTrigMask, (unsigned ) pFromFpga->data & DigCfgPhxTrigMask);
			status = asynError;
			setParamStatus(p_DigCfgPhxTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgRawadcTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgRawadcTrigW, valueSet);
		if( (valueSet[0] & DigCfgRawadcTrigMask) == (pFromFpga->data & DigCfgRawadcTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgRawadcTrigWString, (unsigned ) pFromFpga->data & DigCfgRawadcTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgRawadcTrigWString, valueSet[0] & DigCfgRawadcTrigMask, (unsigned ) pFromFpga->data & DigCfgRawadcTrigMask);
			status = asynError;
			setParamStatus(p_DigCfgRawadcTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgScanTriggerWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgScanTriggerWeW, valueSet);
		if( (valueSet[0] & DigCfgScanTriggerWeMask) == (pFromFpga->data & DigCfgScanTriggerWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgScanTriggerWeWString, (unsigned ) pFromFpga->data & DigCfgScanTriggerWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgScanTriggerWeWString, valueSet[0] & DigCfgScanTriggerWeMask, (unsigned ) pFromFpga->data & DigCfgScanTriggerWeMask);
			status = asynError;
			setParamStatus(p_DigCfgScanTriggerWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgScannerDebugWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgScannerDebugW, valueSet);
		if( (valueSet[0] & DigCfgScannerDebugMask) == (pFromFpga->data & DigCfgScannerDebugMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgScannerDebugWString, (unsigned ) pFromFpga->data & DigCfgScannerDebugMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgScannerDebugWString, valueSet[0] & DigCfgScannerDebugMask, (unsigned ) pFromFpga->data & DigCfgScannerDebugMask);
			status = asynError;
			setParamStatus(p_DigCfgScannerDebugW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgSyncAd7794CsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgSyncAd7794CsetW, valueSet);
		if( (valueSet[0] & DigCfgSyncAd7794CsetMask) == (pFromFpga->data & DigCfgSyncAd7794CsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgSyncAd7794CsetWString, (unsigned ) pFromFpga->data & DigCfgSyncAd7794CsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgSyncAd7794CsetWString, valueSet[0] & DigCfgSyncAd7794CsetMask, (unsigned ) pFromFpga->data & DigCfgSyncAd7794CsetMask);
			status = asynError;
			setParamStatus(p_DigCfgSyncAd7794CsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigCfgSyncTps62210CsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigCfgSyncTps62210CsetW, valueSet);
		if( (valueSet[0] & DigCfgSyncTps62210CsetMask) == (pFromFpga->data & DigCfgSyncTps62210CsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgSyncTps62210CsetWString, (unsigned ) pFromFpga->data & DigCfgSyncTps62210CsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigCfgSyncTps62210CsetWString, valueSet[0] & DigCfgSyncTps62210CsetMask, (unsigned ) pFromFpga->data & DigCfgSyncTps62210CsetMask);
			status = asynError;
			setParamStatus(p_DigCfgSyncTps62210CsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAdcTestMdWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAdcTestMdW, valueSet);
		if( (valueSet[0] & DigDspAdcTestMdMask) == (pFromFpga->data & DigDspAdcTestMdMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestMdWString, (unsigned ) pFromFpga->data & DigDspAdcTestMdMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestMdWString, valueSet[0] & DigDspAdcTestMdMask, (unsigned ) pFromFpga->data & DigDspAdcTestMdMask);
			status = asynError;
			setParamStatus(p_DigDspAdcTestMdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAdcTestResetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAdcTestResetW, valueSet);
		if( (valueSet[0] & DigDspAdcTestResetMask) == (pFromFpga->data & DigDspAdcTestResetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestResetWString, (unsigned ) pFromFpga->data & DigDspAdcTestResetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestResetWString, valueSet[0] & DigDspAdcTestResetMask, (unsigned ) pFromFpga->data & DigDspAdcTestResetMask);
			status = asynError;
			setParamStatus(p_DigDspAdcTestResetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAmplitudeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAmplitudeW, valueSet);
		if( (valueSet[0] & DigDspAmplitudeMask) == (pFromFpga->data & DigDspAmplitudeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAmplitudeWString, (unsigned ) pFromFpga->data & DigDspAmplitudeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAmplitudeWString, valueSet[0] & DigDspAmplitudeMask, (unsigned ) pFromFpga->data & DigDspAmplitudeMask);
			status = asynError;
			setParamStatus(p_DigDspAmplitudeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAverageLenWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAverageLenW, valueSet);
		if( (valueSet[0] & DigDspAverageLenMask) == (pFromFpga->data & DigDspAverageLenMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAverageLenWString, (unsigned ) pFromFpga->data & DigDspAverageLenMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAverageLenWString, valueSet[0] & DigDspAverageLenMask, (unsigned ) pFromFpga->data & DigDspAverageLenMask);
			status = asynError;
			setParamStatus(p_DigDspAverageLenW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspBufTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspBufTrigW, valueSet);
		if( (valueSet[0] & DigDspBufTrigMask) == (pFromFpga->data & DigDspBufTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspBufTrigWString, (unsigned ) pFromFpga->data & DigDspBufTrigMask);
		else
		{
			// We don't care, since this is typically part of a canned sequence of writes
		}

		break;
    case DigDspCicPeriodWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspCicPeriodW, valueSet);
		if( (valueSet[0] & DigDspCicPeriodMask) == (pFromFpga->data & DigDspCicPeriodMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicPeriodWString, (unsigned ) pFromFpga->data & DigDspCicPeriodMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicPeriodWString, valueSet[0] & DigDspCicPeriodMask, (unsigned ) pFromFpga->data & DigDspCicPeriodMask);
			status = asynError;
			setParamStatus(p_DigDspCicPeriodW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspCicShiftWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspCicShiftW, valueSet);
		if( (valueSet[0] & DigDspCicShiftMask) == (pFromFpga->data & DigDspCicShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicShiftWString, (unsigned ) pFromFpga->data & DigDspCicShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicShiftWString, valueSet[0] & DigDspCicShiftMask, (unsigned ) pFromFpga->data & DigDspCicShiftMask);
			status = asynError;
			setParamStatus(p_DigDspCicShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspCircleBufFlipWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspCircleBufFlipW, valueSet);
		if( (valueSet[0] & DigDspCircleBufFlipMask) == (pFromFpga->data & DigDspCircleBufFlipMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipWString, (unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipWString, valueSet[0] & DigDspCircleBufFlipMask, (unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
			status = asynError;
			setParamStatus(p_DigDspCircleBufFlipW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDacDdsResetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDacDdsResetW, valueSet);
		if( (valueSet[0] & DigDspDacDdsResetMask) == (pFromFpga->data & DigDspDacDdsResetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacDdsResetWString, (unsigned ) pFromFpga->data & DigDspDacDdsResetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacDdsResetWString, valueSet[0] & DigDspDacDdsResetMask, (unsigned ) pFromFpga->data & DigDspDacDdsResetMask);
			status = asynError;
			setParamStatus(p_DigDspDacDdsResetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDacMdWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDacMdW, valueSet);
		if( (valueSet[0] & DigDspDacMdMask) == (pFromFpga->data & DigDspDacMdMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacMdWString, (unsigned ) pFromFpga->data & DigDspDacMdMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacMdWString, valueSet[0] & DigDspDacMdMask, (unsigned ) pFromFpga->data & DigDspDacMdMask);
			status = asynError;
			setParamStatus(p_DigDspDacMdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDdsaModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDdsaModW, valueSet);
		if( (valueSet[0] & DigDspDdsaModMask) == (pFromFpga->data & DigDspDdsaModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaModWString, (unsigned ) pFromFpga->data & DigDspDdsaModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaModWString, valueSet[0] & DigDspDdsaModMask, (unsigned ) pFromFpga->data & DigDspDdsaModMask);
			status = asynError;
			setParamStatus(p_DigDspDdsaModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDdsaPhstepHWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDdsaPhstepHW, valueSet);
		if( (valueSet[0] & DigDspDdsaPhstepHMask) == (pFromFpga->data & DigDspDdsaPhstepHMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepHWString, (unsigned ) pFromFpga->data & DigDspDdsaPhstepHMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepHWString, valueSet[0] & DigDspDdsaPhstepHMask, (unsigned ) pFromFpga->data & DigDspDdsaPhstepHMask);
			status = asynError;
			setParamStatus(p_DigDspDdsaPhstepHW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDdsaPhstepLWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDdsaPhstepLW, valueSet);
		if( (valueSet[0] & DigDspDdsaPhstepLMask) == (pFromFpga->data & DigDspDdsaPhstepLMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepLWString, (unsigned ) pFromFpga->data & DigDspDdsaPhstepLMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepLWString, valueSet[0] & DigDspDdsaPhstepLMask, (unsigned ) pFromFpga->data & DigDspDdsaPhstepLMask);
			status = asynError;
			setParamStatus(p_DigDspDdsaPhstepLW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspHistCountWStrobeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspHistCountWStrobeW, valueSet);
		if( (valueSet[0] & DigDspHistCountWStrobeMask) == (pFromFpga->data & DigDspHistCountWStrobeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspHistCountWStrobeWString, (unsigned ) pFromFpga->data & DigDspHistCountWStrobeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspHistCountWStrobeWString, valueSet[0] & DigDspHistCountWStrobeMask, (unsigned ) pFromFpga->data & DigDspHistCountWStrobeMask);
			status = asynError;
			setParamStatus(p_DigDspHistCountWStrobeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspLlrfDspDacEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspLlrfDspDacEnW, valueSet);
		if( (valueSet[0] & DigDspLlrfDspDacEnMask) == (pFromFpga->data & DigDspLlrfDspDacEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLlrfDspDacEnWString, (unsigned ) pFromFpga->data & DigDspLlrfDspDacEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLlrfDspDacEnWString, valueSet[0] & DigDspLlrfDspDacEnMask, (unsigned ) pFromFpga->data & DigDspLlrfDspDacEnMask);
			status = asynError;
			setParamStatus(p_DigDspLlrfDspDacEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspLoAmpWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspLoAmpW, valueSet);
		if( (valueSet[0] & DigDspLoAmpMask) == (pFromFpga->data & DigDspLoAmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLoAmpWString, (unsigned ) pFromFpga->data & DigDspLoAmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLoAmpWString, valueSet[0] & DigDspLoAmpMask, (unsigned ) pFromFpga->data & DigDspLoAmpMask);
			status = asynError;
			setParamStatus(p_DigDspLoAmpW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspModW, valueSet);
		if( (valueSet[0] & DigDspModMask) == (pFromFpga->data & DigDspModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspModWString, (unsigned ) pFromFpga->data & DigDspModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspModWString, valueSet[0] & DigDspModMask, (unsigned ) pFromFpga->data & DigDspModMask);
			status = asynError;
			setParamStatus(p_DigDspModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPhStepHWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPhStepHW, valueSet);
		if( (valueSet[0] & DigDspPhStepHMask) == (pFromFpga->data & DigDspPhStepHMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhStepHWString, (unsigned ) pFromFpga->data & DigDspPhStepHMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhStepHWString, valueSet[0] & DigDspPhStepHMask, (unsigned ) pFromFpga->data & DigDspPhStepHMask);
			status = asynError;
			setParamStatus(p_DigDspPhStepHW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPhStepLWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPhStepLW, valueSet);
		if( (valueSet[0] & DigDspPhStepLMask) == (pFromFpga->data & DigDspPhStepLMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhStepLWString, (unsigned ) pFromFpga->data & DigDspPhStepLMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhStepLWString, valueSet[0] & DigDspPhStepLMask, (unsigned ) pFromFpga->data & DigDspPhStepLMask);
			status = asynError;
			setParamStatus(p_DigDspPhStepLW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPrcDspCselWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPrcDspCselW, valueSet);
		if( (valueSet[0] & DigDspPrcDspCselMask) == (pFromFpga->data & DigDspPrcDspCselMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspCselWString, (unsigned ) pFromFpga->data & DigDspPrcDspCselMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspCselWString, valueSet[0] & DigDspPrcDspCselMask, (unsigned ) pFromFpga->data & DigDspPrcDspCselMask);
			status = asynError;
			setParamStatus(p_DigDspPrcDspCselW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPrcDspPrlCfgWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPrcDspPrlCfgW, valueSet);
		if( (valueSet[0] & DigDspPrcDspPrlCfgMask) == (pFromFpga->data & DigDspPrcDspPrlCfgMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlCfgWString, (unsigned ) pFromFpga->data & DigDspPrcDspPrlCfgMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlCfgWString, valueSet[0] & DigDspPrcDspPrlCfgMask, (unsigned ) pFromFpga->data & DigDspPrcDspPrlCfgMask);
			status = asynError;
			setParamStatus(p_DigDspPrcDspPrlCfgW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPrcDspPrlGainWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPrcDspPrlGainW, valueSet);
		if( (valueSet[0] & DigDspPrcDspPrlGainMask) == (pFromFpga->data & DigDspPrcDspPrlGainMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlGainWString, (unsigned ) pFromFpga->data & DigDspPrcDspPrlGainMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlGainWString, valueSet[0] & DigDspPrcDspPrlGainMask, (unsigned ) pFromFpga->data & DigDspPrcDspPrlGainMask);
			status = asynError;
			setParamStatus(p_DigDspPrcDspPrlGainW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmBeam0ModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmBeam0ModW, valueSet);
		if( (valueSet[0] & DigDspRsmBeam0ModMask) == (pFromFpga->data & DigDspRsmBeam0ModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0ModWString, (unsigned ) pFromFpga->data & DigDspRsmBeam0ModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0ModWString, valueSet[0] & DigDspRsmBeam0ModMask, (unsigned ) pFromFpga->data & DigDspRsmBeam0ModMask);
			status = asynError;
			setParamStatus(p_DigDspRsmBeam0ModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmBeam0PhInitWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmBeam0PhInitW, valueSet);
		if( (valueSet[0] & DigDspRsmBeam0PhInitMask) == (pFromFpga->data & DigDspRsmBeam0PhInitMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0PhInitWString, (unsigned ) pFromFpga->data & DigDspRsmBeam0PhInitMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0PhInitWString, valueSet[0] & DigDspRsmBeam0PhInitMask, (unsigned ) pFromFpga->data & DigDspRsmBeam0PhInitMask);
			status = asynError;
			setParamStatus(p_DigDspRsmBeam0PhInitW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmBeam0PhStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmBeam0PhStepW, valueSet);
		if( (valueSet[0] & DigDspRsmBeam0PhStepMask) == (pFromFpga->data & DigDspRsmBeam0PhStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0PhStepWString, (unsigned ) pFromFpga->data & DigDspRsmBeam0PhStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam0PhStepWString, valueSet[0] & DigDspRsmBeam0PhStepMask, (unsigned ) pFromFpga->data & DigDspRsmBeam0PhStepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmBeam0PhStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmBeam1ModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmBeam1ModW, valueSet);
		if( (valueSet[0] & DigDspRsmBeam1ModMask) == (pFromFpga->data & DigDspRsmBeam1ModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1ModWString, (unsigned ) pFromFpga->data & DigDspRsmBeam1ModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1ModWString, valueSet[0] & DigDspRsmBeam1ModMask, (unsigned ) pFromFpga->data & DigDspRsmBeam1ModMask);
			status = asynError;
			setParamStatus(p_DigDspRsmBeam1ModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmBeam1PhInitWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmBeam1PhInitW, valueSet);
		if( (valueSet[0] & DigDspRsmBeam1PhInitMask) == (pFromFpga->data & DigDspRsmBeam1PhInitMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1PhInitWString, (unsigned ) pFromFpga->data & DigDspRsmBeam1PhInitMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1PhInitWString, valueSet[0] & DigDspRsmBeam1PhInitMask, (unsigned ) pFromFpga->data & DigDspRsmBeam1PhInitMask);
			status = asynError;
			setParamStatus(p_DigDspRsmBeam1PhInitW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmBeam1PhStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmBeam1PhStepW, valueSet);
		if( (valueSet[0] & DigDspRsmBeam1PhStepMask) == (pFromFpga->data & DigDspRsmBeam1PhStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1PhStepWString, (unsigned ) pFromFpga->data & DigDspRsmBeam1PhStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmBeam1PhStepWString, valueSet[0] & DigDspRsmBeam1PhStepMask, (unsigned ) pFromFpga->data & DigDspRsmBeam1PhStepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmBeam1PhStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC4MechPrngIvaWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC4MechPrngIvaW, valueSet);
		if( (valueSet[0] & DigDspRsmC4MechPrngIvaMask) == (pFromFpga->data & DigDspRsmC4MechPrngIvaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngIvaWString, (unsigned ) pFromFpga->data & DigDspRsmC4MechPrngIvaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngIvaWString, valueSet[0] & DigDspRsmC4MechPrngIvaMask, (unsigned ) pFromFpga->data & DigDspRsmC4MechPrngIvaMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC4MechPrngIvaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC4MechPrngIvbWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC4MechPrngIvbW, valueSet);
		if( (valueSet[0] & DigDspRsmC4MechPrngIvbMask) == (pFromFpga->data & DigDspRsmC4MechPrngIvbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngIvbWString, (unsigned ) pFromFpga->data & DigDspRsmC4MechPrngIvbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngIvbWString, valueSet[0] & DigDspRsmC4MechPrngIvbMask, (unsigned ) pFromFpga->data & DigDspRsmC4MechPrngIvbMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC4MechPrngIvbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC4MechPrngRndRunWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC4MechPrngRndRunW, valueSet);
		if( (valueSet[0] & DigDspRsmC4MechPrngRndRunMask) == (pFromFpga->data & DigDspRsmC4MechPrngRndRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngRndRunWString, (unsigned ) pFromFpga->data & DigDspRsmC4MechPrngRndRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC4MechPrngRndRunWString, valueSet[0] & DigDspRsmC4MechPrngRndRunMask, (unsigned ) pFromFpga->data & DigDspRsmC4MechPrngRndRunMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC4MechPrngRndRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0ACoffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0ACoffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC0ACoffsetMask) == (pFromFpga->data & DigDspRsmC0ACoffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ACoffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC0ACoffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ACoffsetWString, valueSet[0] & DigDspRsmC0ACoffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC0ACoffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0ACoffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0AForOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0AForOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC0AForOffsetMask) == (pFromFpga->data & DigDspRsmC0AForOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0AForOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC0AForOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0AForOffsetWString, valueSet[0] & DigDspRsmC0AForOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC0AForOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0AForOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0ARflOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0ARflOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC0ARflOffsetMask) == (pFromFpga->data & DigDspRsmC0ARflOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ARflOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC0ARflOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ARflOffsetWString, valueSet[0] & DigDspRsmC0ARflOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC0ARflOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0ARflOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0AmpLpBwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0AmpLpBwW, valueSet);
		if( (valueSet[0] & DigDspRsmC0AmpLpBwMask) == (pFromFpga->data & DigDspRsmC0AmpLpBwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0AmpLpBwWString, (unsigned ) pFromFpga->data & DigDspRsmC0AmpLpBwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0AmpLpBwWString, valueSet[0] & DigDspRsmC0AmpLpBwMask, (unsigned ) pFromFpga->data & DigDspRsmC0AmpLpBwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0AmpLpBwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Efrq0CrsFqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Efrq0CrsFqW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Efrq0CrsFqMask) == (pFromFpga->data & DigDspRsmC0C4Efrq0CrsFqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq0CrsFqWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq0CrsFqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq0CrsFqWString, valueSet[0] & DigDspRsmC0C4Efrq0CrsFqMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq0CrsFqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Efrq0CrsFqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Efrq1CrsFqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Efrq1CrsFqW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Efrq1CrsFqMask) == (pFromFpga->data & DigDspRsmC0C4Efrq1CrsFqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq1CrsFqWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq1CrsFqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq1CrsFqWString, valueSet[0] & DigDspRsmC0C4Efrq1CrsFqMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq1CrsFqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Efrq1CrsFqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Efrq2CrsFqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Efrq2CrsFqW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Efrq2CrsFqMask) == (pFromFpga->data & DigDspRsmC0C4Efrq2CrsFqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq2CrsFqWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq2CrsFqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Efrq2CrsFqWString, valueSet[0] & DigDspRsmC0C4Efrq2CrsFqMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Efrq2CrsFqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Efrq2CrsFqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode0BeamCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode0BeamCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode0BeamCplMask) == (pFromFpga->data & DigDspRsmC0C4Emode0BeamCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0BeamCplWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0BeamCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0BeamCplWString, valueSet[0] & DigDspRsmC0C4Emode0BeamCplMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0BeamCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode0BeamCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode0BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode0BwW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode0BwMask) == (pFromFpga->data & DigDspRsmC0C4Emode0BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0BwWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0BwWString, valueSet[0] & DigDspRsmC0C4Emode0BwMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0BwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode0BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode0DrvCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode0DrvCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode0DrvCplMask) == (pFromFpga->data & DigDspRsmC0C4Emode0DrvCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0DrvCplWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0DrvCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode0DrvCplWString, valueSet[0] & DigDspRsmC0C4Emode0DrvCplMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode0DrvCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode0DrvCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode1BeamCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode1BeamCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode1BeamCplMask) == (pFromFpga->data & DigDspRsmC0C4Emode1BeamCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1BeamCplWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1BeamCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1BeamCplWString, valueSet[0] & DigDspRsmC0C4Emode1BeamCplMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1BeamCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode1BeamCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode1BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode1BwW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode1BwMask) == (pFromFpga->data & DigDspRsmC0C4Emode1BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1BwWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1BwWString, valueSet[0] & DigDspRsmC0C4Emode1BwMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1BwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode1BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode1DrvCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode1DrvCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode1DrvCplMask) == (pFromFpga->data & DigDspRsmC0C4Emode1DrvCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1DrvCplWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1DrvCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode1DrvCplWString, valueSet[0] & DigDspRsmC0C4Emode1DrvCplMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode1DrvCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode1DrvCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode2BeamCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode2BeamCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode2BeamCplMask) == (pFromFpga->data & DigDspRsmC0C4Emode2BeamCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2BeamCplWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2BeamCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2BeamCplWString, valueSet[0] & DigDspRsmC0C4Emode2BeamCplMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2BeamCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode2BeamCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode2BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode2BwW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode2BwMask) == (pFromFpga->data & DigDspRsmC0C4Emode2BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2BwWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2BwWString, valueSet[0] & DigDspRsmC0C4Emode2BwMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2BwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode2BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4Emode2DrvCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4Emode2DrvCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4Emode2DrvCplMask) == (pFromFpga->data & DigDspRsmC0C4Emode2DrvCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2DrvCplWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2DrvCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4Emode2DrvCplWString, valueSet[0] & DigDspRsmC0C4Emode2DrvCplMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4Emode2DrvCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4Emode2DrvCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecModW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecModMask) == (pFromFpga->data & DigDspRsmC0C4ElecModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecModWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecModWString, valueSet[0] & DigDspRsmC0C4ElecModMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecModMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0C4ElecPhStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0C4ElecPhStepW, valueSet);
		if( (valueSet[0] & DigDspRsmC0C4ElecPhStepMask) == (pFromFpga->data & DigDspRsmC0C4ElecPhStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecPhStepWString, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecPhStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0C4ElecPhStepWString, valueSet[0] & DigDspRsmC0C4ElecPhStepMask, (unsigned ) pFromFpga->data & DigDspRsmC0C4ElecPhStepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0C4ElecPhStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0ComprSatCtlWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0ComprSatCtlW, valueSet);
		if( (valueSet[0] & DigDspRsmC0ComprSatCtlMask) == (pFromFpga->data & DigDspRsmC0ComprSatCtlMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ComprSatCtlWString, (unsigned ) pFromFpga->data & DigDspRsmC0ComprSatCtlMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0ComprSatCtlWString, valueSet[0] & DigDspRsmC0ComprSatCtlMask, (unsigned ) pFromFpga->data & DigDspRsmC0ComprSatCtlMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0ComprSatCtlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0PrngIvaWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0PrngIvaW, valueSet);
		if( (valueSet[0] & DigDspRsmC0PrngIvaMask) == (pFromFpga->data & DigDspRsmC0PrngIvaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngIvaWString, (unsigned ) pFromFpga->data & DigDspRsmC0PrngIvaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngIvaWString, valueSet[0] & DigDspRsmC0PrngIvaMask, (unsigned ) pFromFpga->data & DigDspRsmC0PrngIvaMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0PrngIvaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0PrngIvbWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0PrngIvbW, valueSet);
		if( (valueSet[0] & DigDspRsmC0PrngIvbMask) == (pFromFpga->data & DigDspRsmC0PrngIvbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngIvbWString, (unsigned ) pFromFpga->data & DigDspRsmC0PrngIvbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngIvbWString, valueSet[0] & DigDspRsmC0PrngIvbMask, (unsigned ) pFromFpga->data & DigDspRsmC0PrngIvbMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0PrngIvbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC0PrngRndRunWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC0PrngRndRunW, valueSet);
		if( (valueSet[0] & DigDspRsmC0PrngRndRunMask) == (pFromFpga->data & DigDspRsmC0PrngRndRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngRndRunWString, (unsigned ) pFromFpga->data & DigDspRsmC0PrngRndRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC0PrngRndRunWString, valueSet[0] & DigDspRsmC0PrngRndRunMask, (unsigned ) pFromFpga->data & DigDspRsmC0PrngRndRunMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC0PrngRndRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1ACoffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1ACoffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC1ACoffsetMask) == (pFromFpga->data & DigDspRsmC1ACoffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ACoffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC1ACoffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ACoffsetWString, valueSet[0] & DigDspRsmC1ACoffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC1ACoffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1ACoffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1AForOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1AForOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC1AForOffsetMask) == (pFromFpga->data & DigDspRsmC1AForOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1AForOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC1AForOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1AForOffsetWString, valueSet[0] & DigDspRsmC1AForOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC1AForOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1AForOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1ARflOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1ARflOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmC1ARflOffsetMask) == (pFromFpga->data & DigDspRsmC1ARflOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ARflOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmC1ARflOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ARflOffsetWString, valueSet[0] & DigDspRsmC1ARflOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmC1ARflOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1ARflOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1AmpLpBwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1AmpLpBwW, valueSet);
		if( (valueSet[0] & DigDspRsmC1AmpLpBwMask) == (pFromFpga->data & DigDspRsmC1AmpLpBwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1AmpLpBwWString, (unsigned ) pFromFpga->data & DigDspRsmC1AmpLpBwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1AmpLpBwWString, valueSet[0] & DigDspRsmC1AmpLpBwMask, (unsigned ) pFromFpga->data & DigDspRsmC1AmpLpBwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1AmpLpBwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Efrq0CrsFqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Efrq0CrsFqW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Efrq0CrsFqMask) == (pFromFpga->data & DigDspRsmC1C4Efrq0CrsFqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq0CrsFqWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq0CrsFqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq0CrsFqWString, valueSet[0] & DigDspRsmC1C4Efrq0CrsFqMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq0CrsFqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Efrq0CrsFqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Efrq1CrsFqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Efrq1CrsFqW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Efrq1CrsFqMask) == (pFromFpga->data & DigDspRsmC1C4Efrq1CrsFqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq1CrsFqWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq1CrsFqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq1CrsFqWString, valueSet[0] & DigDspRsmC1C4Efrq1CrsFqMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq1CrsFqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Efrq1CrsFqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Efrq2CrsFqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Efrq2CrsFqW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Efrq2CrsFqMask) == (pFromFpga->data & DigDspRsmC1C4Efrq2CrsFqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq2CrsFqWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq2CrsFqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Efrq2CrsFqWString, valueSet[0] & DigDspRsmC1C4Efrq2CrsFqMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Efrq2CrsFqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Efrq2CrsFqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode0BeamCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode0BeamCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode0BeamCplMask) == (pFromFpga->data & DigDspRsmC1C4Emode0BeamCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0BeamCplWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0BeamCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0BeamCplWString, valueSet[0] & DigDspRsmC1C4Emode0BeamCplMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0BeamCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode0BeamCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode0BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode0BwW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode0BwMask) == (pFromFpga->data & DigDspRsmC1C4Emode0BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0BwWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0BwWString, valueSet[0] & DigDspRsmC1C4Emode0BwMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0BwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode0BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode0DrvCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode0DrvCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode0DrvCplMask) == (pFromFpga->data & DigDspRsmC1C4Emode0DrvCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0DrvCplWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0DrvCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode0DrvCplWString, valueSet[0] & DigDspRsmC1C4Emode0DrvCplMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode0DrvCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode0DrvCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode1BeamCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode1BeamCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode1BeamCplMask) == (pFromFpga->data & DigDspRsmC1C4Emode1BeamCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1BeamCplWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1BeamCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1BeamCplWString, valueSet[0] & DigDspRsmC1C4Emode1BeamCplMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1BeamCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode1BeamCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode1BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode1BwW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode1BwMask) == (pFromFpga->data & DigDspRsmC1C4Emode1BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1BwWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1BwWString, valueSet[0] & DigDspRsmC1C4Emode1BwMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1BwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode1BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode1DrvCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode1DrvCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode1DrvCplMask) == (pFromFpga->data & DigDspRsmC1C4Emode1DrvCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1DrvCplWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1DrvCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode1DrvCplWString, valueSet[0] & DigDspRsmC1C4Emode1DrvCplMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode1DrvCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode1DrvCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode2BeamCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode2BeamCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode2BeamCplMask) == (pFromFpga->data & DigDspRsmC1C4Emode2BeamCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2BeamCplWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2BeamCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2BeamCplWString, valueSet[0] & DigDspRsmC1C4Emode2BeamCplMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2BeamCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode2BeamCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode2BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode2BwW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode2BwMask) == (pFromFpga->data & DigDspRsmC1C4Emode2BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2BwWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2BwWString, valueSet[0] & DigDspRsmC1C4Emode2BwMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2BwMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode2BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4Emode2DrvCplWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4Emode2DrvCplW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4Emode2DrvCplMask) == (pFromFpga->data & DigDspRsmC1C4Emode2DrvCplMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2DrvCplWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2DrvCplMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4Emode2DrvCplWString, valueSet[0] & DigDspRsmC1C4Emode2DrvCplMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4Emode2DrvCplMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4Emode2DrvCplW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecModW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecModMask) == (pFromFpga->data & DigDspRsmC1C4ElecModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecModWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecModWString, valueSet[0] & DigDspRsmC1C4ElecModMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecModMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1C4ElecPhStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1C4ElecPhStepW, valueSet);
		if( (valueSet[0] & DigDspRsmC1C4ElecPhStepMask) == (pFromFpga->data & DigDspRsmC1C4ElecPhStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecPhStepWString, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecPhStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1C4ElecPhStepWString, valueSet[0] & DigDspRsmC1C4ElecPhStepMask, (unsigned ) pFromFpga->data & DigDspRsmC1C4ElecPhStepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1C4ElecPhStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1ComprSatCtlWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1ComprSatCtlW, valueSet);
		if( (valueSet[0] & DigDspRsmC1ComprSatCtlMask) == (pFromFpga->data & DigDspRsmC1ComprSatCtlMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ComprSatCtlWString, (unsigned ) pFromFpga->data & DigDspRsmC1ComprSatCtlMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1ComprSatCtlWString, valueSet[0] & DigDspRsmC1ComprSatCtlMask, (unsigned ) pFromFpga->data & DigDspRsmC1ComprSatCtlMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1ComprSatCtlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1PrngIvaWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1PrngIvaW, valueSet);
		if( (valueSet[0] & DigDspRsmC1PrngIvaMask) == (pFromFpga->data & DigDspRsmC1PrngIvaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngIvaWString, (unsigned ) pFromFpga->data & DigDspRsmC1PrngIvaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngIvaWString, valueSet[0] & DigDspRsmC1PrngIvaMask, (unsigned ) pFromFpga->data & DigDspRsmC1PrngIvaMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1PrngIvaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1PrngIvbWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1PrngIvbW, valueSet);
		if( (valueSet[0] & DigDspRsmC1PrngIvbMask) == (pFromFpga->data & DigDspRsmC1PrngIvbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngIvbWString, (unsigned ) pFromFpga->data & DigDspRsmC1PrngIvbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngIvbWString, valueSet[0] & DigDspRsmC1PrngIvbMask, (unsigned ) pFromFpga->data & DigDspRsmC1PrngIvbMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1PrngIvbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmC1PrngRndRunWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmC1PrngRndRunW, valueSet);
		if( (valueSet[0] & DigDspRsmC1PrngRndRunMask) == (pFromFpga->data & DigDspRsmC1PrngRndRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngRndRunWString, (unsigned ) pFromFpga->data & DigDspRsmC1PrngRndRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmC1PrngRndRunWString, valueSet[0] & DigDspRsmC1PrngRndRunMask, (unsigned ) pFromFpga->data & DigDspRsmC1PrngRndRunMask);
			status = asynError;
			setParamStatus(p_DigDspRsmC1PrngRndRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmDacIqPhWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmDacIqPhW, valueSet);
		if( (valueSet[0] & DigDspRsmDacIqPhMask) == (pFromFpga->data & DigDspRsmDacIqPhMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmDacIqPhWString, (unsigned ) pFromFpga->data & DigDspRsmDacIqPhMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmDacIqPhWString, valueSet[0] & DigDspRsmDacIqPhMask, (unsigned ) pFromFpga->data & DigDspRsmDacIqPhMask);
			status = asynError;
			setParamStatus(p_DigDspRsmDacIqPhW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspChanKeepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspChanKeepW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspChanKeepMask) == (pFromFpga->data & DigDspRsmSh0DspChanKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspChanKeepWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspChanKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspChanKeepWString, valueSet[0] & DigDspRsmSh0DspChanKeepMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspChanKeepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspChanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspFdbkCrsScaleWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspFdbkCrsScaleW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspFdbkCrsScaleMask) == (pFromFpga->data & DigDspRsmSh0DspFdbkCrsScaleMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkCrsScaleWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkCrsScaleMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkCrsScaleWString, valueSet[0] & DigDspRsmSh0DspFdbkCrsScaleMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkCrsScaleMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspFdbkCrsScaleW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspFdbkMpProcPhOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspFdbkMpProcPhOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspFdbkMpProcPhOffsetMask) == (pFromFpga->data & DigDspRsmSh0DspFdbkMpProcPhOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcPhOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcPhOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcPhOffsetWString, valueSet[0] & DigDspRsmSh0DspFdbkMpProcPhOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcPhOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspFdbkMpProcPhOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspFdbkMpProcSelEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspFdbkMpProcSelEnW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspFdbkMpProcSelEnMask) == (pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSelEnWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSelEnWString, valueSet[0] & DigDspRsmSh0DspFdbkMpProcSelEnMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelEnMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspFdbkMpProcSelEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspFdbkMpProcSelThreshWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspFdbkMpProcSelThreshW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspFdbkMpProcSelThreshMask) == (pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelThreshMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSelThreshWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelThreshMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspFdbkMpProcSelThreshWString, valueSet[0] & DigDspRsmSh0DspFdbkMpProcSelThreshMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspFdbkMpProcSelThreshMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspFdbkMpProcSelThreshW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspModW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspModMask) == (pFromFpga->data & DigDspRsmSh0DspModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspModWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspModWString, valueSet[0] & DigDspRsmSh0DspModMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspModMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspPhStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspPhStepW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspPhStepMask) == (pFromFpga->data & DigDspRsmSh0DspPhStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspPhStepWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspPhStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspPhStepWString, valueSet[0] & DigDspRsmSh0DspPhStepMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspPhStepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspPhStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspPiezoPiezoDcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspPiezoPiezoDcW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspPiezoPiezoDcMask) == (pFromFpga->data & DigDspRsmSh0DspPiezoPiezoDcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspPiezoPiezoDcWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspPiezoPiezoDcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspPiezoPiezoDcWString, valueSet[0] & DigDspRsmSh0DspPiezoPiezoDcMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspPiezoPiezoDcMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspPiezoPiezoDcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspTagWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspTagW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspTagMask) == (pFromFpga->data & DigDspRsmSh0DspTagMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspTagWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspTagMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspTagWString, valueSet[0] & DigDspRsmSh0DspTagMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspTagMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspTagW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspUseFiberIqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspUseFiberIqW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspUseFiberIqMask) == (pFromFpga->data & DigDspRsmSh0DspUseFiberIqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspUseFiberIqWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspUseFiberIqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspUseFiberIqWString, valueSet[0] & DigDspRsmSh0DspUseFiberIqMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspUseFiberIqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspUseFiberIqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspWvSampPerWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspWvSampPerW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspWvSampPerMask) == (pFromFpga->data & DigDspRsmSh0DspWvSampPerMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspWvSampPerWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspWvSampPerMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspWvSampPerWString, valueSet[0] & DigDspRsmSh0DspWvSampPerMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspWvSampPerMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspWvSampPerW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh0DspWvShiftWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh0DspWvShiftW, valueSet);
		if( (valueSet[0] & DigDspRsmSh0DspWvShiftMask) == (pFromFpga->data & DigDspRsmSh0DspWvShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspWvShiftWString, (unsigned ) pFromFpga->data & DigDspRsmSh0DspWvShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh0DspWvShiftWString, valueSet[0] & DigDspRsmSh0DspWvShiftMask, (unsigned ) pFromFpga->data & DigDspRsmSh0DspWvShiftMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh0DspWvShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspChanKeepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspChanKeepW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspChanKeepMask) == (pFromFpga->data & DigDspRsmSh1DspChanKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspChanKeepWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspChanKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspChanKeepWString, valueSet[0] & DigDspRsmSh1DspChanKeepMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspChanKeepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspChanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspFdbkCrsScaleWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspFdbkCrsScaleW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspFdbkCrsScaleMask) == (pFromFpga->data & DigDspRsmSh1DspFdbkCrsScaleMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkCrsScaleWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkCrsScaleMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkCrsScaleWString, valueSet[0] & DigDspRsmSh1DspFdbkCrsScaleMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkCrsScaleMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspFdbkCrsScaleW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspFdbkMpProcPhOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspFdbkMpProcPhOffsetW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspFdbkMpProcPhOffsetMask) == (pFromFpga->data & DigDspRsmSh1DspFdbkMpProcPhOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcPhOffsetWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcPhOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcPhOffsetWString, valueSet[0] & DigDspRsmSh1DspFdbkMpProcPhOffsetMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcPhOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspFdbkMpProcPhOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspFdbkMpProcSelEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspFdbkMpProcSelEnW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspFdbkMpProcSelEnMask) == (pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSelEnWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSelEnWString, valueSet[0] & DigDspRsmSh1DspFdbkMpProcSelEnMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelEnMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspFdbkMpProcSelEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspFdbkMpProcSelThreshWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspFdbkMpProcSelThreshW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspFdbkMpProcSelThreshMask) == (pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelThreshMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSelThreshWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelThreshMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspFdbkMpProcSelThreshWString, valueSet[0] & DigDspRsmSh1DspFdbkMpProcSelThreshMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspFdbkMpProcSelThreshMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspFdbkMpProcSelThreshW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspModWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspModW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspModMask) == (pFromFpga->data & DigDspRsmSh1DspModMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspModWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspModMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspModWString, valueSet[0] & DigDspRsmSh1DspModMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspModMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspModW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspPhStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspPhStepW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspPhStepMask) == (pFromFpga->data & DigDspRsmSh1DspPhStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspPhStepWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspPhStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspPhStepWString, valueSet[0] & DigDspRsmSh1DspPhStepMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspPhStepMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspPhStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspPiezoPiezoDcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspPiezoPiezoDcW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspPiezoPiezoDcMask) == (pFromFpga->data & DigDspRsmSh1DspPiezoPiezoDcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspPiezoPiezoDcWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspPiezoPiezoDcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspPiezoPiezoDcWString, valueSet[0] & DigDspRsmSh1DspPiezoPiezoDcMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspPiezoPiezoDcMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspPiezoPiezoDcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspTagWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspTagW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspTagMask) == (pFromFpga->data & DigDspRsmSh1DspTagMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspTagWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspTagMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspTagWString, valueSet[0] & DigDspRsmSh1DspTagMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspTagMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspTagW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspUseFiberIqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspUseFiberIqW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspUseFiberIqMask) == (pFromFpga->data & DigDspRsmSh1DspUseFiberIqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspUseFiberIqWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspUseFiberIqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspUseFiberIqWString, valueSet[0] & DigDspRsmSh1DspUseFiberIqMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspUseFiberIqMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspUseFiberIqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspWvSampPerWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspWvSampPerW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspWvSampPerMask) == (pFromFpga->data & DigDspRsmSh1DspWvSampPerMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspWvSampPerWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspWvSampPerMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspWvSampPerWString, valueSet[0] & DigDspRsmSh1DspWvSampPerMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspWvSampPerMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspWvSampPerW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRsmSh1DspWvShiftWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRsmSh1DspWvShiftW, valueSet);
		if( (valueSet[0] & DigDspRsmSh1DspWvShiftMask) == (pFromFpga->data & DigDspRsmSh1DspWvShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspWvShiftWString, (unsigned ) pFromFpga->data & DigDspRsmSh1DspWvShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRsmSh1DspWvShiftWString, valueSet[0] & DigDspRsmSh1DspWvShiftMask, (unsigned ) pFromFpga->data & DigDspRsmSh1DspWvShiftMask);
			status = asynError;
			setParamStatus(p_DigDspRsmSh1DspWvShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRewindWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRewindW, valueSet);
		if( (valueSet[0] & DigDspRewindMask) == (pFromFpga->data & DigDspRewindMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRewindWString, (unsigned ) pFromFpga->data & DigDspRewindMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRewindWString, valueSet[0] & DigDspRewindMask, (unsigned ) pFromFpga->data & DigDspRewindMask);
			status = asynError;
			setParamStatus(p_DigDspRewindW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimAmpstepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimAmpstepW, valueSet);
		if( (valueSet[0] & DigDspSsaStimAmpstepMask) == (pFromFpga->data & DigDspSsaStimAmpstepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimAmpstepWString, (unsigned ) pFromFpga->data & DigDspSsaStimAmpstepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimAmpstepWString, valueSet[0] & DigDspSsaStimAmpstepMask, (unsigned ) pFromFpga->data & DigDspSsaStimAmpstepMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimAmpstepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimEnW, valueSet);
		if( (valueSet[0] & DigDspSsaStimEnMask) == (pFromFpga->data & DigDspSsaStimEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimEnWString, (unsigned ) pFromFpga->data & DigDspSsaStimEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimEnWString, valueSet[0] & DigDspSsaStimEnMask, (unsigned ) pFromFpga->data & DigDspSsaStimEnMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimGPeriodWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimGPeriodW, valueSet);
		if( (valueSet[0] & DigDspSsaStimGPeriodMask) == (pFromFpga->data & DigDspSsaStimGPeriodMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimGPeriodWString, (unsigned ) pFromFpga->data & DigDspSsaStimGPeriodMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimGPeriodWString, valueSet[0] & DigDspSsaStimGPeriodMask, (unsigned ) pFromFpga->data & DigDspSsaStimGPeriodMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimGPeriodW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimPertstepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimPertstepW, valueSet);
		if( (valueSet[0] & DigDspSsaStimPertstepMask) == (pFromFpga->data & DigDspSsaStimPertstepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimPertstepWString, (unsigned ) pFromFpga->data & DigDspSsaStimPertstepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimPertstepWString, valueSet[0] & DigDspSsaStimPertstepMask, (unsigned ) pFromFpga->data & DigDspSsaStimPertstepMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimPertstepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTraceKeepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTraceKeepW, valueSet);
		if( (valueSet[0] & DigDspTraceKeepMask) == (pFromFpga->data & DigDspTraceKeepMask))
		{		// Count the number of bits set
			tmpData = (pFromFpga->data & DigDspTraceKeepMask);
			for (nchan_ = 0; tmpData; nchan_++)
			{
			  tmpData &= tmpData - 1; // clear the least significant bit set
			}
			setIntegerParam(p_IQNActive, nchan_);
		    printf("%s DigDspTraceKeepWAdr says %d active channels\n",__PRETTY_FUNCTION__,nchan_);

			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
		}
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, valueSet[0] & DigDspTraceKeepMask, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
			status = asynError;
			setParamStatus(p_DigDspTraceKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTraceResetWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTraceResetWeW, valueSet);
		if( (valueSet[0] & DigDspTraceResetWeMask) == (pFromFpga->data & DigDspTraceResetWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceResetWeWString, (unsigned ) pFromFpga->data & DigDspTraceResetWeMask);
		else
		{
			// We don't care, since there are typically several writes to this per message: 0, 1, 0
		}

		break;
    case DigDspTrigInternalWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTrigInternalW, valueSet);
		if( (valueSet[0] & DigDspTrigInternalMask) == (pFromFpga->data & DigDspTrigInternalMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigInternalWString, (unsigned ) pFromFpga->data & DigDspTrigInternalMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigInternalWString, valueSet[0] & DigDspTrigInternalMask, (unsigned ) pFromFpga->data & DigDspTrigInternalMask);
			status = asynError;
			setParamStatus(p_DigDspTrigInternalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTrigMdWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTrigMdW, valueSet);
		if( (valueSet[0] & DigDspTrigMdMask) == (pFromFpga->data & DigDspTrigMdMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigMdWString, (unsigned ) pFromFpga->data & DigDspTrigMdMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigMdWString, valueSet[0] & DigDspTrigMdMask, (unsigned ) pFromFpga->data & DigDspTrigMdMask);
			status = asynError;
			setParamStatus(p_DigDspTrigMdW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspWv0SrcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspWv0SrcW, valueSet);
		if( (valueSet[0] & DigDspWv0SrcMask) == (pFromFpga->data & DigDspWv0SrcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWv0SrcWString, (unsigned ) pFromFpga->data & DigDspWv0SrcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWv0SrcWString, valueSet[0] & DigDspWv0SrcMask, (unsigned ) pFromFpga->data & DigDspWv0SrcMask);
			status = asynError;
			setParamStatus(p_DigDspWv0SrcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspWv1SrcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspWv1SrcW, valueSet);
		if( (valueSet[0] & DigDspWv1SrcMask) == (pFromFpga->data & DigDspWv1SrcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWv1SrcWString, (unsigned ) pFromFpga->data & DigDspWv1SrcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWv1SrcWString, valueSet[0] & DigDspWv1SrcMask, (unsigned ) pFromFpga->data & DigDspWv1SrcMask);
			status = asynError;
			setParamStatus(p_DigDspWv1SrcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DomainJumpRealignWAdr:
		status = (asynStatus) getIntegerParam(p_DomainJumpRealignW, valueSet);
		if( (valueSet[0] & DomainJumpRealignMask) == (pFromFpga->data & DomainJumpRealignMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignWString, (unsigned ) pFromFpga->data & DomainJumpRealignMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignWString, valueSet[0] & DomainJumpRealignMask, (unsigned ) pFromFpga->data & DomainJumpRealignMask);
			status = asynError;
			setParamStatus(p_DomainJumpRealignW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case IccCfgWAdr:
		status = (asynStatus) getIntegerParam(p_IccCfgW, valueSet);
		if( (valueSet[0] & IccCfgMask) == (pFromFpga->data & IccCfgMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgWString, (unsigned ) pFromFpga->data & IccCfgMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgWString, valueSet[0] & IccCfgMask, (unsigned ) pFromFpga->data & IccCfgMask);
			status = asynError;
			setParamStatus(p_IccCfgW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case QsfpI2CRegWAdr:
		status = (asynStatus) getIntegerParam(p_QsfpI2CRegW, valueSet);
		if( (valueSet[0] & QsfpI2CRegMask) == (pFromFpga->data & QsfpI2CRegMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegWString, (unsigned ) pFromFpga->data & QsfpI2CRegMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegWString, valueSet[0] & QsfpI2CRegMask, (unsigned ) pFromFpga->data & QsfpI2CRegMask);
			status = asynError;
			setParamStatus(p_QsfpI2CRegW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case SfpAddressSetWAdr:
		status = (asynStatus) getIntegerParam(p_SfpAddressSetW, valueSet);
		if( (valueSet[0] & SfpAddressSetMask) == (pFromFpga->data & SfpAddressSetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetWString, (unsigned ) pFromFpga->data & SfpAddressSetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetWString, valueSet[0] & SfpAddressSetMask, (unsigned ) pFromFpga->data & SfpAddressSetMask);
			status = asynError;
			setParamStatus(p_SfpAddressSetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case TagNowWAdr:
		status = (asynStatus) getIntegerParam(p_TagNowW, valueSet);
		if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowWString, (unsigned ) pFromFpga->data & TagNowMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
			status = asynError;
			setParamStatus(p_TagNowW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
	default:
// TODO: Add checking for arrays. Until then, we'll hit "default" for array values, so not really an error. GWB 8-23-2016
//		getIntegerParam(p_CommErrorCount, &errorCount);
//		setIntegerParam(p_CommErrorCount, errorCount + 1);
		printf("Unmapped register 0x%x %d\n", pFromFpga->addr, pFromFpga->data);
	
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		break;
    }

	// TODO: handle arrays

    return status;
}



extern "C" {

/* Configuration routine.  Called directly, or from the iocsh function below */

/** EPICS iocsh callable function to call constructor for the scllrfPRC class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asynIPport this will use to communicate */
int scllrfPRCConfigure(const char *drvPortName, const char *netPortName)
{
	new scllrfPRC(drvPortName, netPortName);
	return asynSuccess;
}


/* EPICS iocsh shell commands */

static const iocshArg initArg0 = { "drvPortName",iocshArgString};
static const iocshArg initArg1 = { "IP port name",iocshArgString};
static const iocshArg * const initArgs[] = {&initArg0,
		&initArg1};
static const iocshFuncDef initFuncDef = {"scllrfPRCConfigure",2,initArgs};
static void initCallFunc(const iocshArgBuf *args)
{
	scllrfPRCConfigure(args[0].sval, args[1].sval);
}

void scllrfPRCRegister(void)
{
	iocshRegister(&initFuncDef,initCallFunc);
}

epicsExportRegistrar(scllrfPRCRegister);

}



