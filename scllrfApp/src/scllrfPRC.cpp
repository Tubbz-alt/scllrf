/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : scllrfPRCDriver.h
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Header defining register interface to scllrfPRC, autogenerated from a python
 * dictionary.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/

#include "scllrfPRC.h"
#include <asynOctetSyncIO.h>
#include <asynCommonSyncIO.h>
#include <limits>
#include <netinet/in.h>
#include <iostream>
using namespace std;
#include <math.h>

/** Constructor for the scllrfPRC class.
 * Calls constructor for the asynPortDriver base class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] path The path to the peripherial as built by the builder api
 * \param[in] nelms The number of elements of this device (max addr)
 * \paarm[in] nEntries The number of asyn params to be created for each device
 *
 * */
scllrfPRCDriver::scllrfPRCDriver(const char *drvPortName, const char *netPortName)
: scllrfAsynPortDriver(drvPortName, netPortName,
		8, /* maxAddr, i.e. number of channels */
		NUM_SCLLRFPRC_PARAMS)
{
	// NUM_SCLLRFPRC_PARAMS is a macro using protected member variables,
	// which the compiler has problems with..
	scllrfPRCDriver(drvPortName, netPortName, 8, NUM_SCLLRFPRC_PARAMS);
};

scllrfPRCDriver::scllrfPRCDriver(const char *drvPortName, const char *netPortName, int maxAddr, int paramTableAdds)
: scllrfAsynPortDriver(drvPortName, netPortName,
		maxAddr, /* maxAddr, i.e. number of channels */
		paramTableAdds + NUM_SCLLRFPRC_PARAMS)
{
	asynStatus status = asynSuccess;

    epicsThreadSleep(defaultPollPeriod);

    createParam(AdcMmcmRString, asynParamInt32, &p_AdcMmcmR);
    createParam(AdcMmcmWString, asynParamInt32, &p_AdcMmcmW);
    createParam(AdcTestModeRString, asynParamInt32, &p_AdcTestModeR);
    createParam(AdcTestModeWString, asynParamInt32, &p_AdcTestModeW);
    createParam(AdcTestResetRString, asynParamInt32, &p_AdcTestResetR);
    createParam(AdcTestResetWString, asynParamInt32, &p_AdcTestResetW);
    createParam(AdcTestTrigCntRString, asynParamInt32, &p_AdcTestTrigCntR);
    createParam(AdcTestWave1OutRString, asynParamInt32, &p_AdcTestWave1OutR);
    createParam(AdcTestWave2OutRString, asynParamInt32, &p_AdcTestWave2OutR);
    createParam(AdcTestWave3OutRString, asynParamInt32, &p_AdcTestWave3OutR);
    createParam(AdcTestWave4OutRString, asynParamInt32, &p_AdcTestWave4OutR);
    createParam(AmpstepRString, asynParamInt32, &p_AmpstepR);
    createParam(AmpstepWString, asynParamInt32, &p_AmpstepW);
    createParam(Atopdigcfgu2ClkResetRRString, asynParamInt32, &p_Atopdigcfgu2ClkResetRR);
    createParam(Atopdigcfgu2ClkResetRWString, asynParamInt32, &p_Atopdigcfgu2ClkResetRW);
    createParam(AtopdigdsprewindRString, asynParamInt32, &p_AtopdigdsprewindR);
    createParam(AtopdigdsprewindWString, asynParamInt32, &p_AtopdigdsprewindW);
    createParam(Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingRString, asynParamInt32, &p_Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingR);
    createParam(Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingWString, asynParamInt32, &p_Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingW);
    createParam(Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingRString, asynParamInt32, &p_Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingR);
    createParam(Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingWString, asynParamInt32, &p_Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingW);
    createParam(Atopdigdsprsmshell1DsplpNotchlp1AkyRString, asynParamInt32, &p_Atopdigdsprsmshell1DsplpNotchlp1AkyR);
    createParam(Atopdigdsprsmshell1DsplpNotchlp1AkyWString, asynParamInt32, &p_Atopdigdsprsmshell1DsplpNotchlp1AkyW);
    createParam(AverageLenRString, asynParamInt32, &p_AverageLenR);
    createParam(AverageLenWString, asynParamInt32, &p_AverageLenW);
    createParam(BanyanBufRString, asynParamInt32, &p_BanyanBufR);
    createParam(BanyanMaskRString, asynParamInt32, &p_BanyanMaskR);
    createParam(BanyanMaskWString, asynParamInt32, &p_BanyanMaskW);
    createParam(BanyanStatusRString, asynParamInt32, &p_BanyanStatusR);
    createParam(Beam0ModuloRString, asynParamInt32, &p_Beam0ModuloR);
    createParam(Beam0ModuloWString, asynParamInt32, &p_Beam0ModuloW);
    createParam(BitslipRString, asynParamInt32, &p_BitslipR);
    createParam(BitslipWString, asynParamInt32, &p_BitslipW);
    createParam(BufTrigRString, asynParamInt32, &p_BufTrigR);
    createParam(BufTrigWString, asynParamInt32, &p_BufTrigW);
    createParam(C0AForoffsRString, asynParamInt32, &p_C0AForoffsR);
    createParam(C0AForoffsWString, asynParamInt32, &p_C0AForoffsW);
    createParam(C0ARfloffsRString, asynParamInt32, &p_C0ARfloffsR);
    createParam(C0ARfloffsWString, asynParamInt32, &p_C0ARfloffsW);
    createParam(C0AmpLpbwRString, asynParamInt32, &p_C0AmpLpbwR);
    createParam(C0AmpLpbwWString, asynParamInt32, &p_C0AmpLpbwW);
    createParam(C0Cav4Elecdot0KOutRString, asynParamInt32, &p_C0Cav4Elecdot0KOutR);
    createParam(C0Cav4Elecdot0KOutWString, asynParamInt32, &p_C0Cav4Elecdot0KOutW);
    createParam(C0Cav4Elecdot1KOutRString, asynParamInt32, &p_C0Cav4Elecdot1KOutR);
    createParam(C0Cav4Elecdot1KOutWString, asynParamInt32, &p_C0Cav4Elecdot1KOutW);
    createParam(C0Cav4ElecdriveCoupleoutCouplingRString, asynParamInt32, &p_C0Cav4ElecdriveCoupleoutCouplingR);
    createParam(C0Cav4ElecdriveCoupleoutCouplingWString, asynParamInt32, &p_C0Cav4ElecdriveCoupleoutCouplingW);
    createParam(C0Cav4Elecfq0CoarseFreqRString, asynParamInt32, &p_C0Cav4Elecfq0CoarseFreqR);
    createParam(C0Cav4Elecfq0CoarseFreqWString, asynParamInt32, &p_C0Cav4Elecfq0CoarseFreqW);
    createParam(C0Cav4Elecfq1CoarseFreqRString, asynParamInt32, &p_C0Cav4Elecfq1CoarseFreqR);
    createParam(C0Cav4Elecfq1CoarseFreqWString, asynParamInt32, &p_C0Cav4Elecfq1CoarseFreqW);
    createParam(C0Cav4Elecfq2CoarseFreqRString, asynParamInt32, &p_C0Cav4Elecfq2CoarseFreqR);
    createParam(C0Cav4Elecfq2CoarseFreqWString, asynParamInt32, &p_C0Cav4Elecfq2CoarseFreqW);
    createParam(C0Cav4Elecmode0BwRString, asynParamInt32, &p_C0Cav4Elecmode0BwR);
    createParam(C0Cav4Elecmode0BwWString, asynParamInt32, &p_C0Cav4Elecmode0BwW);
    createParam(C0Cav4Elecmode0DriveCouplingRString, asynParamInt32, &p_C0Cav4Elecmode0DriveCouplingR);
    createParam(C0Cav4Elecmode0DriveCouplingWString, asynParamInt32, &p_C0Cav4Elecmode0DriveCouplingW);
    createParam(C0Cav4Elecmode1DriveCouplingRString, asynParamInt32, &p_C0Cav4Elecmode1DriveCouplingR);
    createParam(C0Cav4Elecmode1DriveCouplingWString, asynParamInt32, &p_C0Cav4Elecmode1DriveCouplingW);
    createParam(C0Cav4Elecmode2BwRString, asynParamInt32, &p_C0Cav4Elecmode2BwR);
    createParam(C0Cav4Elecmode2BwWString, asynParamInt32, &p_C0Cav4Elecmode2BwW);
    createParam(C0Cav4Elecmode2DriveCouplingRString, asynParamInt32, &p_C0Cav4Elecmode2DriveCouplingR);
    createParam(C0Cav4Elecmode2DriveCouplingWString, asynParamInt32, &p_C0Cav4Elecmode2DriveCouplingW);
    createParam(C0Cav4Elecmode2OcoupophoffRString, asynParamInt32, &p_C0Cav4Elecmode2OcoupophoffR);
    createParam(C0Cav4Elecmode2OcoupophoffWString, asynParamInt32, &p_C0Cav4Elecmode2OcoupophoffW);
    createParam(C0Cav4Elecmode2OcoupoutCouplingRString, asynParamInt32, &p_C0Cav4Elecmode2OcoupoutCouplingR);
    createParam(C0Cav4Elecmode2OcoupoutCouplingWString, asynParamInt32, &p_C0Cav4Elecmode2OcoupoutCouplingW);
    createParam(C0Cav4ElecmoduloRString, asynParamInt32, &p_C0Cav4ElecmoduloR);
    createParam(C0Cav4ElecmoduloWString, asynParamInt32, &p_C0Cav4ElecmoduloW);
    createParam(C0Cav4ElecouterProd2KOutRString, asynParamInt32, &p_C0Cav4ElecouterProd2KOutR);
    createParam(C0Cav4ElecouterProd2KOutWString, asynParamInt32, &p_C0Cav4ElecouterProd2KOutW);
    createParam(C0ComprsatCtlRString, asynParamInt32, &p_C0ComprsatCtlR);
    createParam(C0ComprsatCtlWString, asynParamInt32, &p_C0ComprsatCtlW);
    createParam(C0DelayPcXxxRString, asynParamInt32Array, &p_C0DelayPcXxxR);
    createParam(C0DelayPcXxxWString, asynParamInt32Array, &p_C0DelayPcXxxW);
    createParam(C0DspchanKeepRString, asynParamInt32, &p_C0DspchanKeepR);
    createParam(C0DspchanKeepWString, asynParamInt32, &p_C0DspchanKeepW);
    createParam(C0DspfdbkCorecoarseScaleRString, asynParamInt32, &p_C0DspfdbkCorecoarseScaleR);
    createParam(C0DspfdbkCorecoarseScaleWString, asynParamInt32, &p_C0DspfdbkCorecoarseScaleW);
    createParam(C0DspfdbkCorempProclimRString, asynParamInt32, &p_C0DspfdbkCorempProclimR);
    createParam(C0DspfdbkCorempProclimWString, asynParamInt32, &p_C0DspfdbkCorempProclimW);
    createParam(C0DspfdbkCorempProcselThreshRString, asynParamInt32, &p_C0DspfdbkCorempProcselThreshR);
    createParam(C0DspfdbkCorempProcselThreshWString, asynParamInt32, &p_C0DspfdbkCorempProcselThreshW);
    createParam(C0DspfdbkCorempProcsetmp0RString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp0R);
    createParam(C0DspfdbkCorempProcsetmp0WString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp0W);
    createParam(C0DspfdbkCorempProcsetmp1RString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp1R);
    createParam(C0DspfdbkCorempProcsetmp1WString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp1W);
    createParam(C0DspfdbkCorempProcsetmp2RString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp2R);
    createParam(C0DspfdbkCorempProcsetmp2WString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp2W);
    createParam(C0DspfdbkCorempProcsetmp3RString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp3R);
    createParam(C0DspfdbkCorempProcsetmp3WString, asynParamInt32, &p_C0DspfdbkCorempProcsetmp3W);
    createParam(C0DsplpNotchlp1AkyRString, asynParamInt32, &p_C0DsplpNotchlp1AkyR);
    createParam(C0DsplpNotchlp1AkyWString, asynParamInt32, &p_C0DsplpNotchlp1AkyW);
    createParam(C0DsplpNotchlp1BkyRString, asynParamInt32, &p_C0DsplpNotchlp1BkyR);
    createParam(C0DsplpNotchlp1BkyWString, asynParamInt32, &p_C0DsplpNotchlp1BkyW);
    createParam(C0DsppiezopiezoDcRString, asynParamInt32, &p_C0DsppiezopiezoDcR);
    createParam(C0DsppiezopiezoDcWString, asynParamInt32, &p_C0DsppiezopiezoDcW);
    createParam(C0DsppiezosfConstsRString, asynParamInt32, &p_C0DsppiezosfConstsR);
    createParam(C0DsppiezosfConstsWString, asynParamInt32, &p_C0DsppiezosfConstsW);
    createParam(C0DspuseFiberIqRString, asynParamInt32, &p_C0DspuseFiberIqR);
    createParam(C0DspuseFiberIqWString, asynParamInt32, &p_C0DspuseFiberIqW);
    createParam(C0DspwaveSampPerRString, asynParamInt32, &p_C0DspwaveSampPerR);
    createParam(C0DspwaveSampPerWString, asynParamInt32, &p_C0DspwaveSampPerW);
    createParam(C0DspwaveShiftRString, asynParamInt32, &p_C0DspwaveShiftR);
    createParam(C0DspwaveShiftWString, asynParamInt32, &p_C0DspwaveShiftW);
    createParam(C0PhaseStepRString, asynParamInt32, &p_C0PhaseStepR);
    createParam(C0PhaseStepWString, asynParamInt32, &p_C0PhaseStepW);
    createParam(C0PrngivbRString, asynParamInt32, &p_C0PrngivbR);
    createParam(C0PrngivbWString, asynParamInt32, &p_C0PrngivbW);
    createParam(C0PrngrandomRunRString, asynParamInt32, &p_C0PrngrandomRunR);
    createParam(C0PrngrandomRunWString, asynParamInt32, &p_C0PrngrandomRunW);
    createParam(C1ACavoffsRString, asynParamInt32, &p_C1ACavoffsR);
    createParam(C1ACavoffsWString, asynParamInt32, &p_C1ACavoffsW);
    createParam(C1ARfloffsRString, asynParamInt32, &p_C1ARfloffsR);
    createParam(C1ARfloffsWString, asynParamInt32, &p_C1ARfloffsW);
    createParam(C1Cav4Elecdot0KOutRString, asynParamInt32, &p_C1Cav4Elecdot0KOutR);
    createParam(C1Cav4Elecdot0KOutWString, asynParamInt32, &p_C1Cav4Elecdot0KOutW);
    createParam(C1Cav4Elecdot2KOutRString, asynParamInt32, &p_C1Cav4Elecdot2KOutR);
    createParam(C1Cav4Elecdot2KOutWString, asynParamInt32, &p_C1Cav4Elecdot2KOutW);
    createParam(C1Cav4ElecdriveCoupleophoffRString, asynParamInt32, &p_C1Cav4ElecdriveCoupleophoffR);
    createParam(C1Cav4ElecdriveCoupleophoffWString, asynParamInt32, &p_C1Cav4ElecdriveCoupleophoffW);
    createParam(C1Cav4Elecfq0CoarseFreqRString, asynParamInt32, &p_C1Cav4Elecfq0CoarseFreqR);
    createParam(C1Cav4Elecfq0CoarseFreqWString, asynParamInt32, &p_C1Cav4Elecfq0CoarseFreqW);
    createParam(C1Cav4Elecfq1CoarseFreqRString, asynParamInt32, &p_C1Cav4Elecfq1CoarseFreqR);
    createParam(C1Cav4Elecfq1CoarseFreqWString, asynParamInt32, &p_C1Cav4Elecfq1CoarseFreqW);
    createParam(C1Cav4Elecfq2CoarseFreqRString, asynParamInt32, &p_C1Cav4Elecfq2CoarseFreqR);
    createParam(C1Cav4Elecfq2CoarseFreqWString, asynParamInt32, &p_C1Cav4Elecfq2CoarseFreqW);
    createParam(C1Cav4Elecmode0BeamCouplingRString, asynParamInt32, &p_C1Cav4Elecmode0BeamCouplingR);
    createParam(C1Cav4Elecmode0BeamCouplingWString, asynParamInt32, &p_C1Cav4Elecmode0BeamCouplingW);
    createParam(C1Cav4Elecmode0DriveCouplingRString, asynParamInt32, &p_C1Cav4Elecmode0DriveCouplingR);
    createParam(C1Cav4Elecmode0DriveCouplingWString, asynParamInt32, &p_C1Cav4Elecmode0DriveCouplingW);
    createParam(C1Cav4Elecmode0OcoupoutCouplingRString, asynParamInt32, &p_C1Cav4Elecmode0OcoupoutCouplingR);
    createParam(C1Cav4Elecmode0OcoupoutCouplingWString, asynParamInt32, &p_C1Cav4Elecmode0OcoupoutCouplingW);
    createParam(C1Cav4Elecmode1BeamCouplingRString, asynParamInt32, &p_C1Cav4Elecmode1BeamCouplingR);
    createParam(C1Cav4Elecmode1BeamCouplingWString, asynParamInt32, &p_C1Cav4Elecmode1BeamCouplingW);
    createParam(C1Cav4Elecmode1DriveCouplingRString, asynParamInt32, &p_C1Cav4Elecmode1DriveCouplingR);
    createParam(C1Cav4Elecmode1DriveCouplingWString, asynParamInt32, &p_C1Cav4Elecmode1DriveCouplingW);
    createParam(C1Cav4Elecmode1OcoupophoffRString, asynParamInt32, &p_C1Cav4Elecmode1OcoupophoffR);
    createParam(C1Cav4Elecmode1OcoupophoffWString, asynParamInt32, &p_C1Cav4Elecmode1OcoupophoffW);
    createParam(C1Cav4Elecmode2OcoupophoffRString, asynParamInt32, &p_C1Cav4Elecmode2OcoupophoffR);
    createParam(C1Cav4Elecmode2OcoupophoffWString, asynParamInt32, &p_C1Cav4Elecmode2OcoupophoffW);
    createParam(C1Cav4ElecmoduloRString, asynParamInt32, &p_C1Cav4ElecmoduloR);
    createParam(C1Cav4ElecmoduloWString, asynParamInt32, &p_C1Cav4ElecmoduloW);
    createParam(C1Cav4ElecouterProd2KOutRString, asynParamInt32, &p_C1Cav4ElecouterProd2KOutR);
    createParam(C1Cav4ElecouterProd2KOutWString, asynParamInt32, &p_C1Cav4ElecouterProd2KOutW);
    createParam(C1Cav4ElecphaseStepRString, asynParamInt32, &p_C1Cav4ElecphaseStepR);
    createParam(C1Cav4ElecphaseStepWString, asynParamInt32, &p_C1Cav4ElecphaseStepW);
    createParam(C1DelayPcXxxRString, asynParamInt32Array, &p_C1DelayPcXxxR);
    createParam(C1DelayPcXxxWString, asynParamInt32Array, &p_C1DelayPcXxxW);
    createParam(C1DspfdbkCorecoarseScaleRString, asynParamInt32, &p_C1DspfdbkCorecoarseScaleR);
    createParam(C1DspfdbkCorecoarseScaleWString, asynParamInt32, &p_C1DspfdbkCorecoarseScaleW);
    createParam(C1DspfdbkCorempProclimRString, asynParamInt32, &p_C1DspfdbkCorempProclimR);
    createParam(C1DspfdbkCorempProclimWString, asynParamInt32, &p_C1DspfdbkCorempProclimW);
    createParam(C1DspfdbkCorempProcphOffsetRString, asynParamInt32, &p_C1DspfdbkCorempProcphOffsetR);
    createParam(C1DspfdbkCorempProcphOffsetWString, asynParamInt32, &p_C1DspfdbkCorempProcphOffsetW);
    createParam(C1DspfdbkCorempProcselEnRString, asynParamInt32, &p_C1DspfdbkCorempProcselEnR);
    createParam(C1DspfdbkCorempProcselEnWString, asynParamInt32, &p_C1DspfdbkCorempProcselEnW);
    createParam(C1DspfdbkCorempProcselThreshRString, asynParamInt32, &p_C1DspfdbkCorempProcselThreshR);
    createParam(C1DspfdbkCorempProcselThreshWString, asynParamInt32, &p_C1DspfdbkCorempProcselThreshW);
    createParam(C1DsplpNotchlp1AkxRString, asynParamInt32, &p_C1DsplpNotchlp1AkxR);
    createParam(C1DsplpNotchlp1AkxWString, asynParamInt32, &p_C1DsplpNotchlp1AkxW);
    createParam(C1DsplpNotchlp1BkxRString, asynParamInt32, &p_C1DsplpNotchlp1BkxR);
    createParam(C1DsplpNotchlp1BkxWString, asynParamInt32, &p_C1DsplpNotchlp1BkxW);
    createParam(C1DsplpNotchlp1BkyRString, asynParamInt32, &p_C1DsplpNotchlp1BkyR);
    createParam(C1DsplpNotchlp1BkyWString, asynParamInt32, &p_C1DsplpNotchlp1BkyW);
    createParam(C1DspmoduloRString, asynParamInt32, &p_C1DspmoduloR);
    createParam(C1DspmoduloWString, asynParamInt32, &p_C1DspmoduloW);
    createParam(C1DspphaseStepRString, asynParamInt32, &p_C1DspphaseStepR);
    createParam(C1DspphaseStepWString, asynParamInt32, &p_C1DspphaseStepW);
    createParam(C1DsppiezopiezoDcRString, asynParamInt32, &p_C1DsppiezopiezoDcR);
    createParam(C1DsppiezopiezoDcWString, asynParamInt32, &p_C1DsppiezopiezoDcW);
    createParam(C1DsptagRString, asynParamInt32, &p_C1DsptagR);
    createParam(C1DsptagWString, asynParamInt32, &p_C1DsptagW);
    createParam(C1DspuseFiberIqRString, asynParamInt32, &p_C1DspuseFiberIqR);
    createParam(C1DspuseFiberIqWString, asynParamInt32, &p_C1DspuseFiberIqW);
    createParam(C1DspwaveSampPerRString, asynParamInt32, &p_C1DspwaveSampPerR);
    createParam(C1DspwaveSampPerWString, asynParamInt32, &p_C1DspwaveSampPerW);
    createParam(C1ModuloRString, asynParamInt32, &p_C1ModuloR);
    createParam(C1ModuloWString, asynParamInt32, &p_C1ModuloW);
    createParam(C1PhaseInitRString, asynParamInt32, &p_C1PhaseInitR);
    createParam(C1PhaseInitWString, asynParamInt32, &p_C1PhaseInitW);
    createParam(C1PiezoCouplekOutRString, asynParamInt32, &p_C1PiezoCouplekOutR);
    createParam(C1PiezoCouplekOutWString, asynParamInt32, &p_C1PiezoCouplekOutW);
    createParam(C1PrngivaRString, asynParamInt32, &p_C1PrngivaR);
    createParam(C1PrngivaWString, asynParamInt32, &p_C1PrngivaW);
    createParam(C1PrngrandomRunRString, asynParamInt32, &p_C1PrngrandomRunR);
    createParam(C1PrngrandomRunWString, asynParamInt32, &p_C1PrngrandomRunW);
    createParam(Cav0ACavoffsRString, asynParamInt32, &p_Cav0ACavoffsR);
    createParam(Cav0ACavoffsWString, asynParamInt32, &p_Cav0ACavoffsW);
    createParam(Cav0Cav4Elecdot2KOutRString, asynParamInt32, &p_Cav0Cav4Elecdot2KOutR);
    createParam(Cav0Cav4Elecdot2KOutWString, asynParamInt32, &p_Cav0Cav4Elecdot2KOutW);
    createParam(Cav0Cav4Elecmode0OcoupoutCouplingRString, asynParamInt32, &p_Cav0Cav4Elecmode0OcoupoutCouplingR);
    createParam(Cav0Cav4Elecmode0OcoupoutCouplingWString, asynParamInt32, &p_Cav0Cav4Elecmode0OcoupoutCouplingW);
    createParam(Cav0Cav4Elecmode1BwRString, asynParamInt32, &p_Cav0Cav4Elecmode1BwR);
    createParam(Cav0Cav4Elecmode1BwWString, asynParamInt32, &p_Cav0Cav4Elecmode1BwW);
    createParam(Cav0Cav4Elecmode1OcoupophoffRString, asynParamInt32, &p_Cav0Cav4Elecmode1OcoupophoffR);
    createParam(Cav0Cav4Elecmode1OcoupophoffWString, asynParamInt32, &p_Cav0Cav4Elecmode1OcoupophoffW);
    createParam(Cav0Cav4Elecmode1OcoupoutCouplingRString, asynParamInt32, &p_Cav0Cav4Elecmode1OcoupoutCouplingR);
    createParam(Cav0Cav4Elecmode1OcoupoutCouplingWString, asynParamInt32, &p_Cav0Cav4Elecmode1OcoupoutCouplingW);
    createParam(Cav0Cav4ElecouterProd1KOutRString, asynParamInt32, &p_Cav0Cav4ElecouterProd1KOutR);
    createParam(Cav0Cav4ElecouterProd1KOutWString, asynParamInt32, &p_Cav0Cav4ElecouterProd1KOutW);
    createParam(Cav0Cav4ElecphaseStepRString, asynParamInt32, &p_Cav0Cav4ElecphaseStepR);
    createParam(Cav0Cav4ElecphaseStepWString, asynParamInt32, &p_Cav0Cav4ElecphaseStepW);
    createParam(Cav0PiezoCouplekOutRString, asynParamInt32, &p_Cav0PiezoCouplekOutR);
    createParam(Cav0PiezoCouplekOutWString, asynParamInt32, &p_Cav0PiezoCouplekOutW);
    createParam(Cav0PrngivaRString, asynParamInt32, &p_Cav0PrngivaR);
    createParam(Cav0PrngivaWString, asynParamInt32, &p_Cav0PrngivaW);
    createParam(Cav1Cav4Elecdot1KOutRString, asynParamInt32, &p_Cav1Cav4Elecdot1KOutR);
    createParam(Cav1Cav4Elecdot1KOutWString, asynParamInt32, &p_Cav1Cav4Elecdot1KOutW);
    createParam(Cav1Cav4ElecdriveCoupleoutCouplingRString, asynParamInt32, &p_Cav1Cav4ElecdriveCoupleoutCouplingR);
    createParam(Cav1Cav4ElecdriveCoupleoutCouplingWString, asynParamInt32, &p_Cav1Cav4ElecdriveCoupleoutCouplingW);
    createParam(Cav1Cav4Elecmode0BwRString, asynParamInt32, &p_Cav1Cav4Elecmode0BwR);
    createParam(Cav1Cav4Elecmode0BwWString, asynParamInt32, &p_Cav1Cav4Elecmode0BwW);
    createParam(Cav1Cav4Elecmode0OcoupophoffRString, asynParamInt32, &p_Cav1Cav4Elecmode0OcoupophoffR);
    createParam(Cav1Cav4Elecmode0OcoupophoffWString, asynParamInt32, &p_Cav1Cav4Elecmode0OcoupophoffW);
    createParam(Cav1Cav4Elecmode1OcoupoutCouplingRString, asynParamInt32, &p_Cav1Cav4Elecmode1OcoupoutCouplingR);
    createParam(Cav1Cav4Elecmode1OcoupoutCouplingWString, asynParamInt32, &p_Cav1Cav4Elecmode1OcoupoutCouplingW);
    createParam(Cav1Cav4Elecmode2BwRString, asynParamInt32, &p_Cav1Cav4Elecmode2BwR);
    createParam(Cav1Cav4Elecmode2BwWString, asynParamInt32, &p_Cav1Cav4Elecmode2BwW);
    createParam(Cav1Cav4ElecouterProd1KOutRString, asynParamInt32, &p_Cav1Cav4ElecouterProd1KOutR);
    createParam(Cav1Cav4ElecouterProd1KOutWString, asynParamInt32, &p_Cav1Cav4ElecouterProd1KOutW);
    createParam(Cav1PrngivbRString, asynParamInt32, &p_Cav1PrngivbR);
    createParam(Cav1PrngivbWString, asynParamInt32, &p_Cav1PrngivbW);
    createParam(Cav4MechprngivaRString, asynParamInt32, &p_Cav4MechprngivaR);
    createParam(Cav4MechprngivaWString, asynParamInt32, &p_Cav4MechprngivaW);
    createParam(Cav4MechprngrandomRunRString, asynParamInt32, &p_Cav4MechprngrandomRunR);
    createParam(Cav4MechprngrandomRunWString, asynParamInt32, &p_Cav4MechprngrandomRunW);
    createParam(CavSelRString, asynParamInt32, &p_CavSelR);
    createParam(CavSelWString, asynParamInt32, &p_CavSelW);
    createParam(CicPeriodRString, asynParamInt32, &p_CicPeriodR);
    createParam(CicPeriodWString, asynParamInt32, &p_CicPeriodW);
    createParam(CicShiftRString, asynParamInt32, &p_CicShiftR);
    createParam(CicShiftWString, asynParamInt32, &p_CicShiftW);
    createParam(CircleBufFlipRString, asynParamInt32, &p_CircleBufFlipR);
    createParam(CircleBufFlipWString, asynParamInt32, &p_CircleBufFlipW);
    createParam(ClkPhaseDiffOutU2RString, asynParamInt32, &p_ClkPhaseDiffOutU2R);
    createParam(ClkPhaseDiffOutU3RString, asynParamInt32, &p_ClkPhaseDiffOutU3R);
    createParam(ClkStatusOutRString, asynParamInt32, &p_ClkStatusOutR);
    createParam(ClkStatusWeRString, asynParamInt32, &p_ClkStatusWeR);
    createParam(ClkStatusWeWString, asynParamInt32, &p_ClkStatusWeW);
    createParam(CrcErrorsRString, asynParamInt32, &p_CrcErrorsR);
    createParam(CtraceRunningRString, asynParamInt32, &p_CtraceRunningR);
    createParam(DacDdsResetRString, asynParamInt32, &p_DacDdsResetR);
    createParam(DacDdsResetWString, asynParamInt32, &p_DacDdsResetW);
    createParam(DdsaModuloRString, asynParamInt32, &p_DdsaModuloR);
    createParam(DdsaModuloWString, asynParamInt32, &p_DdsaModuloW);
    createParam(DdsaPhstepHRString, asynParamInt32, &p_DdsaPhstepHR);
    createParam(DdsaPhstepHWString, asynParamInt32, &p_DdsaPhstepHW);
    createParam(DigcfgidelayctrlResetRRString, asynParamInt32, &p_DigcfgidelayctrlResetRR);
    createParam(DigcfgidelayctrlResetRWString, asynParamInt32, &p_DigcfgidelayctrlResetRW);
    createParam(DigcfgrawadcTrigRString, asynParamInt32, &p_DigcfgrawadcTrigR);
    createParam(DigcfgrawadcTrigWString, asynParamInt32, &p_DigcfgrawadcTrigW);
    createParam(DigcfgsyncTps62210CsetRString, asynParamInt32, &p_DigcfgsyncTps62210CsetR);
    createParam(DigcfgsyncTps62210CsetWString, asynParamInt32, &p_DigcfgsyncTps62210CsetW);
    createParam(Digcfgu18SpiDataAddrRRString, asynParamInt32, &p_Digcfgu18SpiDataAddrRR);
    createParam(Digcfgu18SpiDataAddrRWString, asynParamInt32, &p_Digcfgu18SpiDataAddrRW);
    createParam(Digcfgu18SpiReadAndStartRRString, asynParamInt32, &p_Digcfgu18SpiReadAndStartRR);
    createParam(Digcfgu18SpiReadAndStartRWString, asynParamInt32, &p_Digcfgu18SpiReadAndStartRW);
    createParam(Digcfgu4ResetRRString, asynParamInt32, &p_Digcfgu4ResetRR);
    createParam(Digcfgu4ResetRWString, asynParamInt32, &p_Digcfgu4ResetRW);
    createParam(DigdspamplitudeRString, asynParamInt32, &p_DigdspamplitudeR);
    createParam(DigdspamplitudeWString, asynParamInt32, &p_DigdspamplitudeW);
    createParam(DigdspdacModeRString, asynParamInt32, &p_DigdspdacModeR);
    createParam(DigdspdacModeWString, asynParamInt32, &p_DigdspdacModeW);
    createParam(DigdspddsaPhstepLRString, asynParamInt32, &p_DigdspddsaPhstepLR);
    createParam(DigdspddsaPhstepLWString, asynParamInt32, &p_DigdspddsaPhstepLW);
    createParam(DigdspmoduloRString, asynParamInt32, &p_DigdspmoduloR);
    createParam(DigdspmoduloWString, asynParamInt32, &p_DigdspmoduloW);
    createParam(DigdspphaseStepHRString, asynParamInt32, &p_DigdspphaseStepHR);
    createParam(DigdspphaseStepHWString, asynParamInt32, &p_DigdspphaseStepHW);
    createParam(Digdsprsmcav0Cav4ElecouterProd0KOutRString, asynParamInt32, &p_Digdsprsmcav0Cav4ElecouterProd0KOutR);
    createParam(Digdsprsmcav0Cav4ElecouterProd0KOutWString, asynParamInt32, &p_Digdsprsmcav0Cav4ElecouterProd0KOutW);
    createParam(Digdsprsmcav1AForoffsRString, asynParamInt32, &p_Digdsprsmcav1AForoffsR);
    createParam(Digdsprsmcav1AForoffsWString, asynParamInt32, &p_Digdsprsmcav1AForoffsW);
    createParam(Digdsprsmshell0DsplpNotchlp1AkxRString, asynParamInt32, &p_Digdsprsmshell0DsplpNotchlp1AkxR);
    createParam(Digdsprsmshell0DsplpNotchlp1AkxWString, asynParamInt32, &p_Digdsprsmshell0DsplpNotchlp1AkxW);
    createParam(Digdsprsmshell1DspfdbkCorempProccoeffRString, asynParamInt32, &p_Digdsprsmshell1DspfdbkCorempProccoeffR);
    createParam(Digdsprsmshell1DspfdbkCorempProccoeffWString, asynParamInt32, &p_Digdsprsmshell1DspfdbkCorempProccoeffW);
    createParam(DigdsptraceKeepRString, asynParamInt32, &p_DigdsptraceKeepR);
    createParam(DigdsptraceKeepWString, asynParamInt32, &p_DigdsptraceKeepW);
    createParam(DomainJumpRealignRString, asynParamInt32, &p_DomainJumpRealignR);
    createParam(DomainJumpRealignWString, asynParamInt32, &p_DomainJumpRealignW);
    createParam(FfffffffRString, asynParamInt32, &p_FfffffffR);
    createParam(Frequency4XoutRString, asynParamInt32, &p_Frequency4XoutR);
    createParam(FrequencyAdcRString, asynParamInt32, &p_FrequencyAdcR);
    createParam(FrequencyClkout3RString, asynParamInt32, &p_FrequencyClkout3R);
    createParam(FrequencyDcoRString, asynParamInt32, &p_FrequencyDcoR);
    createParam(FrequencyGtxRxRString, asynParamInt32, &p_FrequencyGtxRxR);
    createParam(FrequencyGtxTxRString, asynParamInt32, &p_FrequencyGtxTxR);
    createParam(H0D0A0D0ARString, asynParamInt32, &p_H0D0A0D0AR);
    createParam(HellRString, asynParamInt32, &p_HellR);
    createParam(HistCountWStrobeRString, asynParamInt32, &p_HistCountWStrobeR);
    createParam(HistCountWStrobeWString, asynParamInt32, &p_HistCountWStrobeW);
    createParam(HistDoutRString, asynParamInt32, &p_HistDoutR);
    createParam(HistStatusRString, asynParamInt32, &p_HistStatusR);
    createParam(IccCfgRString, asynParamInt32, &p_IccCfgR);
    createParam(IccCfgWString, asynParamInt32, &p_IccCfgW);
    createParam(IdelayBaseRString, asynParamInt32, &p_IdelayBaseR);
    createParam(IdelayValueOutU2Bits19To0RString, asynParamInt32, &p_IdelayValueOutU2Bits19To0R);
    createParam(IdelayValueOutU2Bits39To20RString, asynParamInt32, &p_IdelayValueOutU2Bits39To20R);
    createParam(IdelayValueOutU3Bits19To0RString, asynParamInt32, &p_IdelayValueOutU3Bits19To0R);
    createParam(IdelayValueOutU3Bits39To20RString, asynParamInt32, &p_IdelayValueOutU3Bits39To20R);
    createParam(LlrfCircleDataRString, asynParamInt32, &p_LlrfCircleDataR);
    createParam(LlrfCircleReadyRString, asynParamInt32, &p_LlrfCircleReadyR);
    createParam(LlrfDspDacEnRString, asynParamInt32, &p_LlrfDspDacEnR);
    createParam(LlrfDspDacEnWString, asynParamInt32, &p_LlrfDspDacEnW);
    createParam(LlspiResultRString, asynParamInt32, &p_LlspiResultR);
    createParam(LlspiStatusRString, asynParamInt32, &p_LlspiStatusR);
    createParam(LlspiWeRString, asynParamInt32, &p_LlspiWeR);
    createParam(LlspiWeWString, asynParamInt32, &p_LlspiWeW);
    createParam(LoAmpRString, asynParamInt32, &p_LoAmpR);
    createParam(LoAmpWString, asynParamInt32, &p_LoAmpW);
    createParam(MmcmResetRRString, asynParamInt32, &p_MmcmResetRR);
    createParam(MmcmResetRWString, asynParamInt32, &p_MmcmResetRW);
    createParam(NoiseCouplekOutRString, asynParamInt32, &p_NoiseCouplekOutR);
    createParam(NoiseCouplekOutWString, asynParamInt32, &p_NoiseCouplekOutW);
    createParam(OWoRString, asynParamInt32, &p_OWoR);
    createParam(PeriphConfigRString, asynParamInt32, &p_PeriphConfigR);
    createParam(PeriphConfigWString, asynParamInt32, &p_PeriphConfigW);
    createParam(PhaseStepLRString, asynParamInt32, &p_PhaseStepLR);
    createParam(PhaseStepLWString, asynParamInt32, &p_PhaseStepLW);
    createParam(PhasexDoutRString, asynParamInt32, &p_PhasexDoutR);
    createParam(PhasexStatusRString, asynParamInt32, &p_PhasexStatusR);
    createParam(PhasexTrigRString, asynParamInt32, &p_PhasexTrigR);
    createParam(PhasexTrigWString, asynParamInt32, &p_PhasexTrigW);
    createParam(PrcDspprlGainRString, asynParamInt32, &p_PrcDspprlGainR);
    createParam(PrcDspprlGainWString, asynParamInt32, &p_PrcDspprlGainW);
    createParam(PrlCfgRString, asynParamInt32, &p_PrlCfgR);
    createParam(PrlCfgWString, asynParamInt32, &p_PrlCfgW);
    createParam(PropConstRString, asynParamInt32, &p_PropConstR);
    createParam(PropConstWString, asynParamInt32, &p_PropConstW);
    createParam(QsfpBufRString, asynParamInt32, &p_QsfpBufR);
    createParam(QsfpI2CRegRString, asynParamInt32, &p_QsfpI2CRegR);
    createParam(QsfpI2CRegWString, asynParamInt32, &p_QsfpI2CRegW);
    createParam(RldRString, asynParamInt32, &p_RldR);
    createParam(Rsmbeam0PhaseInitRString, asynParamInt32, &p_Rsmbeam0PhaseInitR);
    createParam(Rsmbeam0PhaseInitWString, asynParamInt32, &p_Rsmbeam0PhaseInitW);
    createParam(Rsmbeam1PhaseStepRString, asynParamInt32, &p_Rsmbeam1PhaseStepR);
    createParam(Rsmbeam1PhaseStepWString, asynParamInt32, &p_Rsmbeam1PhaseStepW);
    createParam(Rsmcav0Cav4ElecdriveCoupleophoffRString, asynParamInt32, &p_Rsmcav0Cav4ElecdriveCoupleophoffR);
    createParam(Rsmcav0Cav4ElecdriveCoupleophoffWString, asynParamInt32, &p_Rsmcav0Cav4ElecdriveCoupleophoffW);
    createParam(Rsmcav0Cav4Elecmode0BeamCouplingRString, asynParamInt32, &p_Rsmcav0Cav4Elecmode0BeamCouplingR);
    createParam(Rsmcav0Cav4Elecmode0BeamCouplingWString, asynParamInt32, &p_Rsmcav0Cav4Elecmode0BeamCouplingW);
    createParam(Rsmcav0Cav4Elecmode0OcoupophoffRString, asynParamInt32, &p_Rsmcav0Cav4Elecmode0OcoupophoffR);
    createParam(Rsmcav0Cav4Elecmode0OcoupophoffWString, asynParamInt32, &p_Rsmcav0Cav4Elecmode0OcoupophoffW);
    createParam(Rsmcav1AmpLpbwRString, asynParamInt32, &p_Rsmcav1AmpLpbwR);
    createParam(Rsmcav1AmpLpbwWString, asynParamInt32, &p_Rsmcav1AmpLpbwW);
    createParam(Rsmcav1Cav4Elecmode1BwRString, asynParamInt32, &p_Rsmcav1Cav4Elecmode1BwR);
    createParam(Rsmcav1Cav4Elecmode1BwWString, asynParamInt32, &p_Rsmcav1Cav4Elecmode1BwW);
    createParam(Rsmcav1Cav4Elecmode2BeamCouplingRString, asynParamInt32, &p_Rsmcav1Cav4Elecmode2BeamCouplingR);
    createParam(Rsmcav1Cav4Elecmode2BeamCouplingWString, asynParamInt32, &p_Rsmcav1Cav4Elecmode2BeamCouplingW);
    createParam(Rsmcav1Cav4Elecmode2OcoupoutCouplingRString, asynParamInt32, &p_Rsmcav1Cav4Elecmode2OcoupoutCouplingR);
    createParam(Rsmcav1Cav4Elecmode2OcoupoutCouplingWString, asynParamInt32, &p_Rsmcav1Cav4Elecmode2OcoupoutCouplingW);
    createParam(Rsmcav1Cav4ElecouterProd0KOutRString, asynParamInt32, &p_Rsmcav1Cav4ElecouterProd0KOutR);
    createParam(Rsmcav1Cav4ElecouterProd0KOutWString, asynParamInt32, &p_Rsmcav1Cav4ElecouterProd0KOutW);
    createParam(Rsmcav1ComprsatCtlRString, asynParamInt32, &p_Rsmcav1ComprsatCtlR);
    createParam(Rsmcav1ComprsatCtlWString, asynParamInt32, &p_Rsmcav1ComprsatCtlW);
    createParam(Rsmcav4MechprngivbRString, asynParamInt32, &p_Rsmcav4MechprngivbR);
    createParam(Rsmcav4MechprngivbWString, asynParamInt32, &p_Rsmcav4MechprngivbW);
    createParam(RsmdacIqPhaseRString, asynParamInt32, &p_RsmdacIqPhaseR);
    createParam(RsmdacIqPhaseWString, asynParamInt32, &p_RsmdacIqPhaseW);
    createParam(Rsmshell0DsplpNotchlp1BkxRString, asynParamInt32, &p_Rsmshell0DsplpNotchlp1BkxR);
    createParam(Rsmshell0DsplpNotchlp1BkxWString, asynParamInt32, &p_Rsmshell0DsplpNotchlp1BkxW);
    createParam(Rsmshell1DsppiezosfConstsRString, asynParamInt32, &p_Rsmshell1DsppiezosfConstsR);
    createParam(Rsmshell1DsppiezosfConstsWString, asynParamInt32, &p_Rsmshell1DsppiezosfConstsW);
    createParam(ScanTriggerWeRString, asynParamInt32, &p_ScanTriggerWeR);
    createParam(ScanTriggerWeWString, asynParamInt32, &p_ScanTriggerWeW);
    createParam(ScannerDebugRString, asynParamInt32, &p_ScannerDebugR);
    createParam(ScannerDebugWString, asynParamInt32, &p_ScannerDebugW);
    createParam(ScannerResultRString, asynParamInt32, &p_ScannerResultR);
    createParam(SfpAddressSetRString, asynParamInt32, &p_SfpAddressSetR);
    createParam(SfpAddressSetWString, asynParamInt32, &p_SfpAddressSetW);
    createParam(Shell0DspfdbkCorempProccoeffRString, asynParamInt32, &p_Shell0DspfdbkCorempProccoeffR);
    createParam(Shell0DspfdbkCorempProccoeffWString, asynParamInt32, &p_Shell0DspfdbkCorempProccoeffW);
    createParam(Shell0DspfdbkCorempProcphOffsetRString, asynParamInt32, &p_Shell0DspfdbkCorempProcphOffsetR);
    createParam(Shell0DspfdbkCorempProcphOffsetWString, asynParamInt32, &p_Shell0DspfdbkCorempProcphOffsetW);
    createParam(Shell0DspfdbkCorempProcselEnRString, asynParamInt32, &p_Shell0DspfdbkCorempProcselEnR);
    createParam(Shell0DspfdbkCorempProcselEnWString, asynParamInt32, &p_Shell0DspfdbkCorempProcselEnW);
    createParam(Shell0DspmoduloRString, asynParamInt32, &p_Shell0DspmoduloR);
    createParam(Shell0DspmoduloWString, asynParamInt32, &p_Shell0DspmoduloW);
    createParam(Shell0DspphaseStepRString, asynParamInt32, &p_Shell0DspphaseStepR);
    createParam(Shell0DspphaseStepWString, asynParamInt32, &p_Shell0DspphaseStepW);
    createParam(Shell0DsptagRString, asynParamInt32, &p_Shell0DsptagR);
    createParam(Shell0DsptagWString, asynParamInt32, &p_Shell0DsptagW);
    createParam(Shell1DspchanKeepRString, asynParamInt32, &p_Shell1DspchanKeepR);
    createParam(Shell1DspchanKeepWString, asynParamInt32, &p_Shell1DspchanKeepW);
    createParam(Shell1DspfdbkCorempProcsetmp0RString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp0R);
    createParam(Shell1DspfdbkCorempProcsetmp0WString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp0W);
    createParam(Shell1DspfdbkCorempProcsetmp1RString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp1R);
    createParam(Shell1DspfdbkCorempProcsetmp1WString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp1W);
    createParam(Shell1DspfdbkCorempProcsetmp2RString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp2R);
    createParam(Shell1DspfdbkCorempProcsetmp2WString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp2W);
    createParam(Shell1DspfdbkCorempProcsetmp3RString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp3R);
    createParam(Shell1DspfdbkCorempProcsetmp3WString, asynParamInt32, &p_Shell1DspfdbkCorempProcsetmp3W);
    createParam(Shell1DspwaveShiftRString, asynParamInt32, &p_Shell1DspwaveShiftR);
    createParam(Shell1DspwaveShiftWString, asynParamInt32, &p_Shell1DspwaveShiftW);
    createParam(Shell0SlowDataRString, asynParamInt32, &p_Shell0SlowDataR);
    createParam(Shell1SlowDataRString, asynParamInt32, &p_Shell1SlowDataR);
    createParam(SlowChainOutRString, asynParamInt32, &p_SlowChainOutR);
    createParam(SsaStimgPeriodRString, asynParamInt32, &p_SsaStimgPeriodR);
    createParam(SsaStimgPeriodWString, asynParamInt32, &p_SsaStimgPeriodW);
    createParam(SsaStimpertstepRString, asynParamInt32, &p_SsaStimpertstepR);
    createParam(SsaStimpertstepWString, asynParamInt32, &p_SsaStimpertstepW);
    createParam(SsaStimEnRString, asynParamInt32, &p_SsaStimEnR);
    createParam(SsaStimEnWString, asynParamInt32, &p_SsaStimEnW);
    createParam(SyncAd7794CsetRString, asynParamInt32, &p_SyncAd7794CsetR);
    createParam(SyncAd7794CsetWString, asynParamInt32, &p_SyncAd7794CsetW);
    createParam(TagNowRString, asynParamInt32, &p_TagNowR);
    createParam(TagNowWString, asynParamInt32, &p_TagNowW);
    createParam(TraceIBufRString, asynParamInt32, &p_TraceIBufR);
    createParam(TraceIqBufRString, asynParamInt32, &p_TraceIqBufR);
    createParam(TraceQBufRString, asynParamInt32, &p_TraceQBufR);
    createParam(TraceResetWeRString, asynParamInt32, &p_TraceResetWeR);
    createParam(TraceResetWeWString, asynParamInt32, &p_TraceResetWeW);
    createParam(TraceStatus1RString, asynParamInt32, &p_TraceStatus1R);
    createParam(TraceStatus2RString, asynParamInt32, &p_TraceStatus2R);
    createParam(TrigInternalRString, asynParamInt32, &p_TrigInternalR);
    createParam(TrigInternalWString, asynParamInt32, &p_TrigInternalW);
    createParam(TrigModeRString, asynParamInt32, &p_TrigModeR);
    createParam(TrigModeWString, asynParamInt32, &p_TrigModeW);
    createParam(U15SdioAsSdoRString, asynParamInt32, &p_U15SdioAsSdoR);
    createParam(U15SdoAddrRString, asynParamInt32, &p_U15SdoAddrR);
    createParam(U15SpiDataAddrRRString, asynParamInt32, &p_U15SpiDataAddrRR);
    createParam(U15SpiDataAddrRWString, asynParamInt32, &p_U15SpiDataAddrRW);
    createParam(U15SpiReadAndStartRRString, asynParamInt32, &p_U15SpiReadAndStartRR);
    createParam(U15SpiReadAndStartRWString, asynParamInt32, &p_U15SpiReadAndStartRW);
    createParam(U15SpiReadyRString, asynParamInt32, &p_U15SpiReadyR);
    createParam(U18SdioAsSdoRString, asynParamInt32, &p_U18SdioAsSdoR);
    createParam(U18SdoAddrRString, asynParamInt32, &p_U18SdoAddrR);
    createParam(U18SpiReadyRString, asynParamInt32, &p_U18SpiReadyR);
    createParam(U2Doutbits31To0RString, asynParamInt32, &p_U2Doutbits31To0R);
    createParam(U2Doutbits63To32RString, asynParamInt32, &p_U2Doutbits63To32R);
    createParam(U2IserdesResetRRString, asynParamInt32, &p_U2IserdesResetRR);
    createParam(U2IserdesResetRWString, asynParamInt32, &p_U2IserdesResetRW);
    createParam(U3Doutbits31To0RString, asynParamInt32, &p_U3Doutbits31To0R);
    createParam(U3Doutbits63To32RString, asynParamInt32, &p_U3Doutbits63To32R);
    createParam(U3ClkResetRRString, asynParamInt32, &p_U3ClkResetRR);
    createParam(U3ClkResetRWString, asynParamInt32, &p_U3ClkResetRW);
    createParam(U3IserdesResetRRString, asynParamInt32, &p_U3IserdesResetRR);
    createParam(U3IserdesResetRWString, asynParamInt32, &p_U3IserdesResetRW);
    createParam(Wave0OutRString, asynParamInt32, &p_Wave0OutR);
    createParam(Wave0SrcRString, asynParamInt32, &p_Wave0SrcR);
    createParam(Wave0SrcWString, asynParamInt32, &p_Wave0SrcW);
    createParam(Wave1OutRString, asynParamInt32, &p_Wave1OutR);
    createParam(Wave1SrcRString, asynParamInt32, &p_Wave1SrcR);
    createParam(Wave1SrcWString, asynParamInt32, &p_Wave1SrcW);
    createParam(WaveformsAvailableRString, asynParamInt32, &p_WaveformsAvailableR);
    createParam(U15SpiRdbkRString, asynParamInt32, &p_U15SpiRdbkR);
    createParam(U18SpiRdbkRString, asynParamInt32, &p_U18SpiRdbkR);

    // Message size is the number of read registers, plus 1 nonce for every 175 read registers
    PolledRegMsgSize_ = scllrfPRCReadRegCount + (scllrfPRCReadRegCount / 175) + 1;
	// A canned request to read all registers
    pPolledRegMsg_ = new FpgaReg[PolledRegMsgSize_]
	{
		{ 0, 0 },
		{ flagReadMask | HellRAdr, blankData },
		{ flagReadMask | OWoRAdr, blankData },
		{ flagReadMask | RldRAdr, blankData },
		{ flagReadMask | H0D0A0D0ARAdr, blankData },
		{ flagReadMask | LlspiStatusRAdr, blankData },
		{ flagReadMask | LlspiResultRAdr, blankData },
		{ flagReadMask | ClkStatusOutRAdr, blankData },
		{ flagReadMask | FfffffffRAdr, blankData },
		{ flagReadMask | FrequencyAdcRAdr, blankData },
		{ flagReadMask | Frequency4XoutRAdr, blankData },
		{ flagReadMask | FrequencyClkout3RAdr, blankData },
		{ flagReadMask | FrequencyDcoRAdr, blankData },
		{ flagReadMask | U2Doutbits31To0RAdr, blankData },
		{ flagReadMask | U2Doutbits63To32RAdr, blankData },
		{ flagReadMask | IdelayValueOutU2Bits19To0RAdr, blankData },
		{ flagReadMask | IdelayValueOutU2Bits39To20RAdr, blankData },
		{ flagReadMask | U3Doutbits31To0RAdr, blankData },
		{ flagReadMask | U3Doutbits63To32RAdr, blankData },
		{ flagReadMask | IdelayValueOutU3Bits19To0RAdr, blankData },
		{ flagReadMask | IdelayValueOutU3Bits39To20RAdr, blankData },
		{ flagReadMask | Wave0OutRAdr, blankData },
		{ flagReadMask | Wave1OutRAdr, blankData },
		{ flagReadMask | AdcTestWave1OutRAdr, blankData },
		{ flagReadMask | AdcTestWave2OutRAdr, blankData },
		{ flagReadMask | AdcTestWave3OutRAdr, blankData },
		{ flagReadMask | AdcTestWave4OutRAdr, blankData },
		{ flagReadMask | CtraceRunningRAdr, blankData },
		{ flagReadMask | FrequencyGtxTxRAdr, blankData },
		{ flagReadMask | FrequencyGtxRxRAdr, blankData },
		{ flagReadMask | HistStatusRAdr, blankData },
		{ flagReadMask | PhasexStatusRAdr, blankData },
		{ flagReadMask | ClkPhaseDiffOutU2RAdr, blankData },
		{ flagReadMask | ClkPhaseDiffOutU3RAdr, blankData },
		{ flagReadMask | CrcErrorsRAdr, blankData },
		{ flagReadMask | U15SdoAddrRAdr, blankData },
		{ flagReadMask | U15SpiReadyRAdr, blankData },
		{ flagReadMask | U18SdoAddrRAdr, blankData },
		{ flagReadMask | U18SdioAsSdoRAdr, blankData },
		{ flagReadMask | AdcTestTrigCntRAdr, blankData },
		{ flagReadMask | WaveformsAvailableRAdr, blankData },
		{ flagReadMask | BanyanStatusRAdr, blankData },
		{ flagReadMask | SlowChainOutRAdr, blankData },
		{ flagReadMask | TraceStatus1RAdr, blankData },
		{ flagReadMask | TraceStatus2RAdr, blankData },
		{ flagReadMask | LlrfCircleReadyRAdr, blankData },
		{ flagReadMask | IdelayBaseRAdr, blankData },
		{ flagReadMask | HistDoutRAdr, blankData },
		{ flagReadMask | PhasexDoutRAdr, blankData },
		{ flagReadMask | BanyanBufRAdr, blankData },
		{ flagReadMask | ScannerResultRAdr, blankData },
		{ flagReadMask | TraceIqBufRAdr, blankData },
		{ flagReadMask | TraceIBufRAdr, blankData },
		{ flagReadMask | TraceQBufRAdr, blankData },
		{ flagReadMask | QsfpBufRAdr, blankData },
		{ flagReadMask | LlrfCircleDataRAdr, blankData },
		{ flagReadMask | Shell0SlowDataRAdr, blankData },
		{ flagReadMask | Shell1SlowDataRAdr, blankData },
		{ flagReadMask | NoiseCouplekOutRAdr, blankData },
		{ flagReadMask | PropConstRAdr, blankData },
		{ flagReadMask | C0Cav4Elecdot0KOutRAdr, blankData },
		{ flagReadMask | C0Cav4Elecdot1KOutRAdr, blankData },
		{ flagReadMask | Cav0Cav4Elecdot2KOutRAdr, blankData },
		{ flagReadMask | Digdsprsmcav0Cav4ElecouterProd0KOutRAdr, blankData },
		{ flagReadMask | Cav0Cav4ElecouterProd1KOutRAdr, blankData },
		{ flagReadMask | C0Cav4ElecouterProd2KOutRAdr, blankData },
		{ flagReadMask | Cav0PiezoCouplekOutRAdr, blankData },
		{ flagReadMask | C1Cav4Elecdot0KOutRAdr, blankData },
		{ flagReadMask | Cav1Cav4Elecdot1KOutRAdr, blankData },
		{ flagReadMask | C1Cav4Elecdot2KOutRAdr, blankData },
		{ flagReadMask | Rsmcav1Cav4ElecouterProd0KOutRAdr, blankData },
		{ flagReadMask | Cav1Cav4ElecouterProd1KOutRAdr, blankData },
		{ flagReadMask | C1Cav4ElecouterProd2KOutRAdr, blankData },
		{ flagReadMask | C1PiezoCouplekOutRAdr, blankData },
		{ flagReadMask | C0DelayPcXxxRAdr, blankData },
		{ flagReadMask | C1DelayPcXxxRAdr, blankData },
		{ flagReadMask | C0DsppiezosfConstsRAdr, blankData },
		{ flagReadMask | Rsmshell1DsppiezosfConstsRAdr, blankData },
		{ flagReadMask | Shell0DspfdbkCorempProccoeffRAdr, blankData },
		{ flagReadMask | C0DspfdbkCorempProclimRAdr, blankData },
		{ flagReadMask | C0DspfdbkCorempProcsetmp0RAdr, blankData },
		{ flagReadMask | C0DspfdbkCorempProcsetmp1RAdr, blankData },
		{ flagReadMask | C0DspfdbkCorempProcsetmp2RAdr, blankData },
		{ flagReadMask | C0DspfdbkCorempProcsetmp3RAdr, blankData },
		{ flagReadMask | Digdsprsmshell1DspfdbkCorempProccoeffRAdr, blankData },
		{ flagReadMask | C1DspfdbkCorempProclimRAdr, blankData },
		{ flagReadMask | Shell1DspfdbkCorempProcsetmp0RAdr, blankData },
		{ flagReadMask | Shell1DspfdbkCorempProcsetmp1RAdr, blankData },
		{ flagReadMask | Shell1DspfdbkCorempProcsetmp2RAdr, blankData },
		{ flagReadMask | Shell1DspfdbkCorempProcsetmp3RAdr, blankData },
		{ flagReadMask | C0Cav4ElecdriveCoupleoutCouplingRAdr, blankData },
		{ flagReadMask | Rsmcav0Cav4ElecdriveCoupleophoffRAdr, blankData },
		{ flagReadMask | Cav0Cav4Elecmode0OcoupoutCouplingRAdr, blankData },
		{ flagReadMask | Rsmcav0Cav4Elecmode0OcoupophoffRAdr, blankData },
		{ flagReadMask | Cav0Cav4Elecmode1OcoupoutCouplingRAdr, blankData },
		{ flagReadMask | Cav0Cav4Elecmode1OcoupophoffRAdr, blankData },
		{ flagReadMask | C0Cav4Elecmode2OcoupoutCouplingRAdr, blankData },
		{ flagReadMask | C0Cav4Elecmode2OcoupophoffRAdr, blankData },
		{ flagReadMask | Cav1Cav4ElecdriveCoupleoutCouplingRAdr, blankData },
		{ flagReadMask | C1Cav4ElecdriveCoupleophoffRAdr, blankData },
		{ flagReadMask | C1Cav4Elecmode0OcoupoutCouplingRAdr, blankData },
		{ flagReadMask | Cav1Cav4Elecmode0OcoupophoffRAdr, blankData },
		{ flagReadMask | Cav1Cav4Elecmode1OcoupoutCouplingRAdr, blankData },
		{ flagReadMask | C1Cav4Elecmode1OcoupophoffRAdr, blankData },
		{ flagReadMask | Rsmcav1Cav4Elecmode2OcoupoutCouplingRAdr, blankData },
		{ flagReadMask | C1Cav4Elecmode2OcoupophoffRAdr, blankData },
		{ flagReadMask | Digdsprsmshell0DsplpNotchlp1AkxRAdr, blankData },
		{ flagReadMask | C0DsplpNotchlp1AkyRAdr, blankData },
		{ flagReadMask | Rsmshell0DsplpNotchlp1BkxRAdr, blankData },
		{ flagReadMask | C0DsplpNotchlp1BkyRAdr, blankData },
		{ flagReadMask | C1DsplpNotchlp1AkxRAdr, blankData },
		{ flagReadMask | Atopdigdsprsmshell1DsplpNotchlp1AkyRAdr, blankData },
		{ flagReadMask | C1DsplpNotchlp1BkxRAdr, blankData },
		{ flagReadMask | C1DsplpNotchlp1BkyRAdr, blankData },
		{ flagReadMask | AdcMmcmRAdr, blankData },
		{ flagReadMask | U15SpiDataAddrRRAdr, blankData },
		{ flagReadMask | U15SpiReadAndStartRRAdr, blankData },
		{ flagReadMask | Digcfgu18SpiDataAddrRRAdr, blankData },
		{ flagReadMask | Digcfgu18SpiReadAndStartRRAdr, blankData },
		{ flagReadMask | Atopdigcfgu2ClkResetRRAdr, blankData },
		{ flagReadMask | U2IserdesResetRRAdr, blankData },
		{ flagReadMask | U3ClkResetRRAdr, blankData },
		{ flagReadMask | U3IserdesResetRRAdr, blankData },
		{ flagReadMask | Digcfgu4ResetRRAdr, blankData },
		{ flagReadMask | BanyanMaskRAdr, blankData },
		{ flagReadMask | BitslipRAdr, blankData },
		{ flagReadMask | ClkStatusWeRAdr, blankData },
		{ flagReadMask | DigcfgidelayctrlResetRRAdr, blankData },
		{ flagReadMask | LlspiWeRAdr, blankData },
		{ flagReadMask | MmcmResetRRAdr, blankData },
		{ flagReadMask | PeriphConfigRAdr, blankData },
		{ flagReadMask | PhasexTrigRAdr, blankData },
		{ flagReadMask | DigcfgrawadcTrigRAdr, blankData },
		{ flagReadMask | ScanTriggerWeRAdr, blankData },
		{ flagReadMask | ScannerDebugRAdr, blankData },
		{ flagReadMask | SyncAd7794CsetRAdr, blankData },
		{ flagReadMask | DigcfgsyncTps62210CsetRAdr, blankData },
		{ flagReadMask | AdcTestModeRAdr, blankData },
		{ flagReadMask | AdcTestResetRAdr, blankData },
		{ flagReadMask | DigdspamplitudeRAdr, blankData },
		{ flagReadMask | AverageLenRAdr, blankData },
		{ flagReadMask | BufTrigRAdr, blankData },
		{ flagReadMask | CicPeriodRAdr, blankData },
		{ flagReadMask | CicShiftRAdr, blankData },
		{ flagReadMask | CircleBufFlipRAdr, blankData },
		{ flagReadMask | DacDdsResetRAdr, blankData },
		{ flagReadMask | DigdspdacModeRAdr, blankData },
		{ flagReadMask | DdsaModuloRAdr, blankData },
		{ flagReadMask | DdsaPhstepHRAdr, blankData },
		{ flagReadMask | DigdspddsaPhstepLRAdr, blankData },
		{ flagReadMask | HistCountWStrobeRAdr, blankData },
		{ flagReadMask | LlrfDspDacEnRAdr, blankData },
		{ flagReadMask | LoAmpRAdr, blankData },
		{ flagReadMask | DigdspmoduloRAdr, blankData },
		{ flagReadMask | DigdspphaseStepHRAdr, blankData },
		{ flagReadMask | PhaseStepLRAdr, blankData },
		{ flagReadMask | CavSelRAdr, blankData },
		{ flagReadMask | PrlCfgRAdr, blankData },
		{ flagReadMask | PrcDspprlGainRAdr, blankData },
		{ flagReadMask | Beam0ModuloRAdr, blankData },
		{ flagReadMask | Rsmbeam0PhaseInitRAdr, blankData },
		{ flagReadMask | C0PhaseStepRAdr, blankData },
		{ flagReadMask | C1ModuloRAdr, blankData },
		{ flagReadMask | C1PhaseInitRAdr, blankData },
		{ flagReadMask | Rsmbeam1PhaseStepRAdr, blankData },
		{ flagReadMask | Cav4MechprngivaRAdr, blankData },
		{ flagReadMask | Rsmcav4MechprngivbRAdr, blankData },
		{ flagReadMask | Cav4MechprngrandomRunRAdr, blankData },
		{ flagReadMask | Cav0ACavoffsRAdr, blankData },
		{ flagReadMask | C0AForoffsRAdr, blankData },
		{ flagReadMask | C0ARfloffsRAdr, blankData },
		{ flagReadMask | C0AmpLpbwRAdr, blankData },
		{ flagReadMask | C0Cav4Elecfq0CoarseFreqRAdr, blankData },
		{ flagReadMask | C0Cav4Elecfq1CoarseFreqRAdr, blankData },
		{ flagReadMask | C0Cav4Elecfq2CoarseFreqRAdr, blankData },
		{ 0, 0 },
		{ flagReadMask | Rsmcav0Cav4Elecmode0BeamCouplingRAdr, blankData },
		{ flagReadMask | C0Cav4Elecmode0BwRAdr, blankData },
		{ flagReadMask | C0Cav4Elecmode0DriveCouplingRAdr, blankData },
		{ flagReadMask | Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingRAdr, blankData },
		{ flagReadMask | Cav0Cav4Elecmode1BwRAdr, blankData },
		{ flagReadMask | C0Cav4Elecmode1DriveCouplingRAdr, blankData },
		{ flagReadMask | Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingRAdr, blankData },
		{ flagReadMask | C0Cav4Elecmode2BwRAdr, blankData },
		{ flagReadMask | C0Cav4Elecmode2DriveCouplingRAdr, blankData },
		{ flagReadMask | C0Cav4ElecmoduloRAdr, blankData },
		{ flagReadMask | Cav0Cav4ElecphaseStepRAdr, blankData },
		{ flagReadMask | C0ComprsatCtlRAdr, blankData },
		{ flagReadMask | Cav0PrngivaRAdr, blankData },
		{ flagReadMask | C0PrngivbRAdr, blankData },
		{ flagReadMask | C0PrngrandomRunRAdr, blankData },
		{ flagReadMask | C1ACavoffsRAdr, blankData },
		{ flagReadMask | Digdsprsmcav1AForoffsRAdr, blankData },
		{ flagReadMask | C1ARfloffsRAdr, blankData },
		{ flagReadMask | Rsmcav1AmpLpbwRAdr, blankData },
		{ flagReadMask | C1Cav4Elecfq0CoarseFreqRAdr, blankData },
		{ flagReadMask | C1Cav4Elecfq1CoarseFreqRAdr, blankData },
		{ flagReadMask | C1Cav4Elecfq2CoarseFreqRAdr, blankData },
		{ flagReadMask | C1Cav4Elecmode0BeamCouplingRAdr, blankData },
		{ flagReadMask | Cav1Cav4Elecmode0BwRAdr, blankData },
		{ flagReadMask | C1Cav4Elecmode0DriveCouplingRAdr, blankData },
		{ flagReadMask | C1Cav4Elecmode1BeamCouplingRAdr, blankData },
		{ flagReadMask | Rsmcav1Cav4Elecmode1BwRAdr, blankData },
		{ flagReadMask | C1Cav4Elecmode1DriveCouplingRAdr, blankData },
		{ flagReadMask | Rsmcav1Cav4Elecmode2BeamCouplingRAdr, blankData },
		{ flagReadMask | Cav1Cav4Elecmode2BwRAdr, blankData },
		{ flagReadMask | C1Cav4ElecmoduloRAdr, blankData },
		{ flagReadMask | C1Cav4ElecphaseStepRAdr, blankData },
		{ flagReadMask | Rsmcav1ComprsatCtlRAdr, blankData },
		{ flagReadMask | C1PrngivaRAdr, blankData },
		{ flagReadMask | Cav1PrngivbRAdr, blankData },
		{ flagReadMask | C1PrngrandomRunRAdr, blankData },
		{ flagReadMask | RsmdacIqPhaseRAdr, blankData },
		{ flagReadMask | C0DspchanKeepRAdr, blankData },
		{ flagReadMask | C0DspfdbkCorecoarseScaleRAdr, blankData },
		{ flagReadMask | Shell0DspfdbkCorempProcphOffsetRAdr, blankData },
		{ flagReadMask | Shell0DspfdbkCorempProcselEnRAdr, blankData },
		{ flagReadMask | C0DspfdbkCorempProcselThreshRAdr, blankData },
		{ flagReadMask | Shell0DspmoduloRAdr, blankData },
		{ flagReadMask | Shell0DspphaseStepRAdr, blankData },
		{ flagReadMask | C0DsppiezopiezoDcRAdr, blankData },
		{ flagReadMask | Shell0DsptagRAdr, blankData },
		{ flagReadMask | C0DspuseFiberIqRAdr, blankData },
		{ flagReadMask | C0DspwaveSampPerRAdr, blankData },
		{ flagReadMask | C0DspwaveShiftRAdr, blankData },
		{ flagReadMask | Shell1DspchanKeepRAdr, blankData },
		{ flagReadMask | C1DspfdbkCorecoarseScaleRAdr, blankData },
		{ flagReadMask | C1DspfdbkCorempProcphOffsetRAdr, blankData },
		{ flagReadMask | C1DspfdbkCorempProcselEnRAdr, blankData },
		{ flagReadMask | C1DspfdbkCorempProcselThreshRAdr, blankData },
		{ flagReadMask | C1DspmoduloRAdr, blankData },
		{ flagReadMask | C1DspphaseStepRAdr, blankData },
		{ flagReadMask | C1DsppiezopiezoDcRAdr, blankData },
		{ flagReadMask | C1DsptagRAdr, blankData },
		{ flagReadMask | C1DspuseFiberIqRAdr, blankData },
		{ flagReadMask | C1DspwaveSampPerRAdr, blankData },
		{ flagReadMask | Shell1DspwaveShiftRAdr, blankData },
		{ flagReadMask | AtopdigdsprewindRAdr, blankData },
		{ flagReadMask | AmpstepRAdr, blankData },
		{ flagReadMask | SsaStimEnRAdr, blankData },
		{ flagReadMask | SsaStimgPeriodRAdr, blankData },
		{ flagReadMask | SsaStimpertstepRAdr, blankData },
		{ flagReadMask | DigdsptraceKeepRAdr, blankData },
		{ flagReadMask | TraceResetWeRAdr, blankData },
		{ flagReadMask | TrigInternalRAdr, blankData },
		{ flagReadMask | TrigModeRAdr, blankData },
		{ flagReadMask | Wave0SrcRAdr, blankData },
		{ flagReadMask | Wave1SrcRAdr, blankData },
		{ flagReadMask | DomainJumpRealignRAdr, blankData },
		{ flagReadMask | IccCfgRAdr, blankData },
		{ flagReadMask | QsfpI2CRegRAdr, blankData },
		{ flagReadMask | SfpAddressSetRAdr, blankData },
		{ flagReadMask | TagNowRAdr, blankData },
	};

	htonFpgaRegArray(pPolledRegMsg_, PolledRegMsgSize_);

    epicsThreadSleep(defaultPollPeriod);
    printf("%s created %ld of %ld parameters.\n",__PRETTY_FUNCTION__,NUM_SCLLRFPRC_PARAMS, paramTableAdds+NUM_SCLLRFPRC_PARAMS);

    wakeupPoller();
    wakeupReader();
}

scllrfPRCDriver::~scllrfPRCDriver()
{
	isShuttingDown_ = true;
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller();
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller(); // call this twice in case the poller was never set to run
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupReader();
	pasynOctetSyncIO->disconnect(pOctetAsynUser_);
	pasynCommonSyncIO->disconnectDevice(pCommonAsynUser_);
	pasynCommonSyncIO->disconnect(pCommonAsynUser_);
}

/** Called when you have the asyn parameter name and want the corresponding
 * register address.
  * \param[in] function From pAsynUser->reason, corresponding to a registered parameter.
  * \param[in] pToFpga Pointer to the {Address, Data} structure where the register address will be written
  * \param[in] nElements Number of elements to read. */
asynStatus scllrfPRCDriver::functionToRegister(const int function, FpgaReg *pToFpga)
{
	asynStatus status = asynSuccess;

    if( function == p_AdcMmcmR )
    {
		pToFpga->addr = AdcMmcmRAdr|flagReadMask;
    }
    else
    if( function == p_AdcMmcmW )
    {
		pToFpga->addr = AdcMmcmWAdr;
    }
    else
    if( function == p_AdcTestModeR )
    {
		pToFpga->addr = AdcTestModeRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestModeW )
    {
		pToFpga->addr = AdcTestModeWAdr;
    }
    else
    if( function == p_AdcTestResetR )
    {
		pToFpga->addr = AdcTestResetRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestResetW )
    {
		pToFpga->addr = AdcTestResetWAdr;
    }
    else
    if( function == p_AdcTestTrigCntR )
    {
		pToFpga->addr = AdcTestTrigCntRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave1OutR )
    {
		pToFpga->addr = AdcTestWave1OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave2OutR )
    {
		pToFpga->addr = AdcTestWave2OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave3OutR )
    {
		pToFpga->addr = AdcTestWave3OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave4OutR )
    {
		pToFpga->addr = AdcTestWave4OutRAdr|flagReadMask;
    }
    else
    if( function == p_AmpstepR )
    {
		pToFpga->addr = AmpstepRAdr|flagReadMask;
    }
    else
    if( function == p_AmpstepW )
    {
		pToFpga->addr = AmpstepWAdr;
    }
    else
    if( function == p_Atopdigcfgu2ClkResetRR )
    {
		pToFpga->addr = Atopdigcfgu2ClkResetRRAdr|flagReadMask;
    }
    else
    if( function == p_Atopdigcfgu2ClkResetRW )
    {
		pToFpga->addr = Atopdigcfgu2ClkResetRWAdr;
    }
    else
    if( function == p_AtopdigdsprewindR )
    {
		pToFpga->addr = AtopdigdsprewindRAdr|flagReadMask;
    }
    else
    if( function == p_AtopdigdsprewindW )
    {
		pToFpga->addr = AtopdigdsprewindWAdr;
    }
    else
    if( function == p_Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingR )
    {
		pToFpga->addr = Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingW )
    {
		pToFpga->addr = Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingWAdr;
    }
    else
    if( function == p_Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingR )
    {
		pToFpga->addr = Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingW )
    {
		pToFpga->addr = Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingWAdr;
    }
    else
    if( function == p_Atopdigdsprsmshell1DsplpNotchlp1AkyR )
    {
		pToFpga->addr = Atopdigdsprsmshell1DsplpNotchlp1AkyRAdr|flagReadMask;
    }
    else
    if( function == p_Atopdigdsprsmshell1DsplpNotchlp1AkyW )
    {
		pToFpga->addr = Atopdigdsprsmshell1DsplpNotchlp1AkyWAdr;
    }
    else
    if( function == p_AverageLenR )
    {
		pToFpga->addr = AverageLenRAdr|flagReadMask;
    }
    else
    if( function == p_AverageLenW )
    {
		pToFpga->addr = AverageLenWAdr;
    }
    else
    if( function == p_BanyanBufR )
    {
		pToFpga->addr = BanyanBufRAdr|flagReadMask;
    }
    else
    if( function == p_BanyanMaskR )
    {
		pToFpga->addr = BanyanMaskRAdr|flagReadMask;
    }
    else
    if( function == p_BanyanMaskW )
    {
		pToFpga->addr = BanyanMaskWAdr;
    }
    else
    if( function == p_BanyanStatusR )
    {
		pToFpga->addr = BanyanStatusRAdr|flagReadMask;
    }
    else
    if( function == p_Beam0ModuloR )
    {
		pToFpga->addr = Beam0ModuloRAdr|flagReadMask;
    }
    else
    if( function == p_Beam0ModuloW )
    {
		pToFpga->addr = Beam0ModuloWAdr;
    }
    else
    if( function == p_BitslipR )
    {
		pToFpga->addr = BitslipRAdr|flagReadMask;
    }
    else
    if( function == p_BitslipW )
    {
		pToFpga->addr = BitslipWAdr;
    }
    else
    if( function == p_BufTrigR )
    {
		pToFpga->addr = BufTrigRAdr|flagReadMask;
    }
    else
    if( function == p_BufTrigW )
    {
		pToFpga->addr = BufTrigWAdr;
    }
    else
    if( function == p_C0AForoffsR )
    {
		pToFpga->addr = C0AForoffsRAdr|flagReadMask;
    }
    else
    if( function == p_C0AForoffsW )
    {
		pToFpga->addr = C0AForoffsWAdr;
    }
    else
    if( function == p_C0ARfloffsR )
    {
		pToFpga->addr = C0ARfloffsRAdr|flagReadMask;
    }
    else
    if( function == p_C0ARfloffsW )
    {
		pToFpga->addr = C0ARfloffsWAdr;
    }
    else
    if( function == p_C0AmpLpbwR )
    {
		pToFpga->addr = C0AmpLpbwRAdr|flagReadMask;
    }
    else
    if( function == p_C0AmpLpbwW )
    {
		pToFpga->addr = C0AmpLpbwWAdr;
    }
    else
    if( function == p_C0Cav4Elecdot0KOutR )
    {
		pToFpga->addr = C0Cav4Elecdot0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecdot0KOutW )
    {
		pToFpga->addr = C0Cav4Elecdot0KOutWAdr;
    }
    else
    if( function == p_C0Cav4Elecdot1KOutR )
    {
		pToFpga->addr = C0Cav4Elecdot1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecdot1KOutW )
    {
		pToFpga->addr = C0Cav4Elecdot1KOutWAdr;
    }
    else
    if( function == p_C0Cav4ElecdriveCoupleoutCouplingR )
    {
		pToFpga->addr = C0Cav4ElecdriveCoupleoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4ElecdriveCoupleoutCouplingW )
    {
		pToFpga->addr = C0Cav4ElecdriveCoupleoutCouplingWAdr;
    }
    else
    if( function == p_C0Cav4Elecfq0CoarseFreqR )
    {
		pToFpga->addr = C0Cav4Elecfq0CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecfq0CoarseFreqW )
    {
		pToFpga->addr = C0Cav4Elecfq0CoarseFreqWAdr;
    }
    else
    if( function == p_C0Cav4Elecfq1CoarseFreqR )
    {
		pToFpga->addr = C0Cav4Elecfq1CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecfq1CoarseFreqW )
    {
		pToFpga->addr = C0Cav4Elecfq1CoarseFreqWAdr;
    }
    else
    if( function == p_C0Cav4Elecfq2CoarseFreqR )
    {
		pToFpga->addr = C0Cav4Elecfq2CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecfq2CoarseFreqW )
    {
		pToFpga->addr = C0Cav4Elecfq2CoarseFreqWAdr;
    }
    else
    if( function == p_C0Cav4Elecmode0BwR )
    {
		pToFpga->addr = C0Cav4Elecmode0BwRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecmode0BwW )
    {
		pToFpga->addr = C0Cav4Elecmode0BwWAdr;
    }
    else
    if( function == p_C0Cav4Elecmode0DriveCouplingR )
    {
		pToFpga->addr = C0Cav4Elecmode0DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecmode0DriveCouplingW )
    {
		pToFpga->addr = C0Cav4Elecmode0DriveCouplingWAdr;
    }
    else
    if( function == p_C0Cav4Elecmode1DriveCouplingR )
    {
		pToFpga->addr = C0Cav4Elecmode1DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecmode1DriveCouplingW )
    {
		pToFpga->addr = C0Cav4Elecmode1DriveCouplingWAdr;
    }
    else
    if( function == p_C0Cav4Elecmode2BwR )
    {
		pToFpga->addr = C0Cav4Elecmode2BwRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecmode2BwW )
    {
		pToFpga->addr = C0Cav4Elecmode2BwWAdr;
    }
    else
    if( function == p_C0Cav4Elecmode2DriveCouplingR )
    {
		pToFpga->addr = C0Cav4Elecmode2DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecmode2DriveCouplingW )
    {
		pToFpga->addr = C0Cav4Elecmode2DriveCouplingWAdr;
    }
    else
    if( function == p_C0Cav4Elecmode2OcoupophoffR )
    {
		pToFpga->addr = C0Cav4Elecmode2OcoupophoffRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecmode2OcoupophoffW )
    {
		pToFpga->addr = C0Cav4Elecmode2OcoupophoffWAdr;
    }
    else
    if( function == p_C0Cav4Elecmode2OcoupoutCouplingR )
    {
		pToFpga->addr = C0Cav4Elecmode2OcoupoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4Elecmode2OcoupoutCouplingW )
    {
		pToFpga->addr = C0Cav4Elecmode2OcoupoutCouplingWAdr;
    }
    else
    if( function == p_C0Cav4ElecmoduloR )
    {
		pToFpga->addr = C0Cav4ElecmoduloRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4ElecmoduloW )
    {
		pToFpga->addr = C0Cav4ElecmoduloWAdr;
    }
    else
    if( function == p_C0Cav4ElecouterProd2KOutR )
    {
		pToFpga->addr = C0Cav4ElecouterProd2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_C0Cav4ElecouterProd2KOutW )
    {
		pToFpga->addr = C0Cav4ElecouterProd2KOutWAdr;
    }
    else
    if( function == p_C0ComprsatCtlR )
    {
		pToFpga->addr = C0ComprsatCtlRAdr|flagReadMask;
    }
    else
    if( function == p_C0ComprsatCtlW )
    {
		pToFpga->addr = C0ComprsatCtlWAdr;
    }
    else
    if( function == p_C0DelayPcXxxR )
    {
		pToFpga->addr = C0DelayPcXxxRAdr|flagReadMask;
    }
    else
    if( function == p_C0DelayPcXxxW )
    {
		pToFpga->addr = C0DelayPcXxxWAdr;
    }
    else
    if( function == p_C0DspchanKeepR )
    {
		pToFpga->addr = C0DspchanKeepRAdr|flagReadMask;
    }
    else
    if( function == p_C0DspchanKeepW )
    {
		pToFpga->addr = C0DspchanKeepWAdr;
    }
    else
    if( function == p_C0DspfdbkCorecoarseScaleR )
    {
		pToFpga->addr = C0DspfdbkCorecoarseScaleRAdr|flagReadMask;
    }
    else
    if( function == p_C0DspfdbkCorecoarseScaleW )
    {
		pToFpga->addr = C0DspfdbkCorecoarseScaleWAdr;
    }
    else
    if( function == p_C0DspfdbkCorempProclimR )
    {
		pToFpga->addr = C0DspfdbkCorempProclimRAdr|flagReadMask;
    }
    else
    if( function == p_C0DspfdbkCorempProclimW )
    {
		pToFpga->addr = C0DspfdbkCorempProclimWAdr;
    }
    else
    if( function == p_C0DspfdbkCorempProcselThreshR )
    {
		pToFpga->addr = C0DspfdbkCorempProcselThreshRAdr|flagReadMask;
    }
    else
    if( function == p_C0DspfdbkCorempProcselThreshW )
    {
		pToFpga->addr = C0DspfdbkCorempProcselThreshWAdr;
    }
    else
        if( function == p_C0DspfdbkCorempProcsetmp0R )
        {
    		pToFpga->addr = C0DspfdbkCorempProcsetmp0RAdr|flagReadMask;
        }
        else
        if( function == p_C0DspfdbkCorempProcsetmp0W )
        {
    		pToFpga->addr = C0DspfdbkCorempProcsetmp0WAdr;
        }
        else
            if( function == p_C0DspfdbkCorempProcsetmp1R )
            {
        		pToFpga->addr = C0DspfdbkCorempProcsetmp1RAdr|flagReadMask;
            }
            else
            if( function == p_C0DspfdbkCorempProcsetmp1W )
            {
        		pToFpga->addr = C0DspfdbkCorempProcsetmp1WAdr;
            }
            else
                if( function == p_C0DspfdbkCorempProcsetmp2R )
                {
            		pToFpga->addr = C0DspfdbkCorempProcsetmp2RAdr|flagReadMask;
                }
                else
                if( function == p_C0DspfdbkCorempProcsetmp2W )
                {
            		pToFpga->addr = C0DspfdbkCorempProcsetmp2WAdr;
                }
                else
                    if( function == p_C0DspfdbkCorempProcsetmp3R )
                    {
                		pToFpga->addr = C0DspfdbkCorempProcsetmp3RAdr|flagReadMask;
                    }
                    else
                    if( function == p_C0DspfdbkCorempProcsetmp3W )
                    {
                		pToFpga->addr = C0DspfdbkCorempProcsetmp3WAdr;
                    }
                    else
    if( function == p_C0DsplpNotchlp1AkyR )
    {
		pToFpga->addr = C0DsplpNotchlp1AkyRAdr|flagReadMask;
    }
    else
    if( function == p_C0DsplpNotchlp1AkyW )
    {
		pToFpga->addr = C0DsplpNotchlp1AkyWAdr;
    }
    else
    if( function == p_C0DsplpNotchlp1BkyR )
    {
		pToFpga->addr = C0DsplpNotchlp1BkyRAdr|flagReadMask;
    }
    else
    if( function == p_C0DsplpNotchlp1BkyW )
    {
		pToFpga->addr = C0DsplpNotchlp1BkyWAdr;
    }
    else
    if( function == p_C0DsppiezopiezoDcR )
    {
		pToFpga->addr = C0DsppiezopiezoDcRAdr|flagReadMask;
    }
    else
    if( function == p_C0DsppiezopiezoDcW )
    {
		pToFpga->addr = C0DsppiezopiezoDcWAdr;
    }
    else
    if( function == p_C0DsppiezosfConstsR )
    {
		pToFpga->addr = C0DsppiezosfConstsRAdr|flagReadMask;
    }
    else
    if( function == p_C0DsppiezosfConstsW )
    {
		pToFpga->addr = C0DsppiezosfConstsWAdr;
    }
    else
    if( function == p_C0DspuseFiberIqR )
    {
		pToFpga->addr = C0DspuseFiberIqRAdr|flagReadMask;
    }
    else
    if( function == p_C0DspuseFiberIqW )
    {
		pToFpga->addr = C0DspuseFiberIqWAdr;
    }
    else
    if( function == p_C0DspwaveSampPerR )
    {
		pToFpga->addr = C0DspwaveSampPerRAdr|flagReadMask;
    }
    else
    if( function == p_C0DspwaveSampPerW )
    {
		pToFpga->addr = C0DspwaveSampPerWAdr;
    }
    else
    if( function == p_C0DspwaveShiftR )
    {
		pToFpga->addr = C0DspwaveShiftRAdr|flagReadMask;
    }
    else
    if( function == p_C0DspwaveShiftW )
    {
		pToFpga->addr = C0DspwaveShiftWAdr;
    }
    else
    if( function == p_C0PhaseStepR )
    {
		pToFpga->addr = C0PhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_C0PhaseStepW )
    {
		pToFpga->addr = C0PhaseStepWAdr;
    }
    else
    if( function == p_C0PrngivbR )
    {
		pToFpga->addr = C0PrngivbRAdr|flagReadMask;
    }
    else
    if( function == p_C0PrngivbW )
    {
		pToFpga->addr = C0PrngivbWAdr;
    }
    else
    if( function == p_C0PrngrandomRunR )
    {
		pToFpga->addr = C0PrngrandomRunRAdr|flagReadMask;
    }
    else
    if( function == p_C0PrngrandomRunW )
    {
		pToFpga->addr = C0PrngrandomRunWAdr;
    }
    else
    if( function == p_C1ACavoffsR )
    {
		pToFpga->addr = C1ACavoffsRAdr|flagReadMask;
    }
    else
    if( function == p_C1ACavoffsW )
    {
		pToFpga->addr = C1ACavoffsWAdr;
    }
    else
    if( function == p_C1ARfloffsR )
    {
		pToFpga->addr = C1ARfloffsRAdr|flagReadMask;
    }
    else
    if( function == p_C1ARfloffsW )
    {
		pToFpga->addr = C1ARfloffsWAdr;
    }
    else
    if( function == p_C1Cav4Elecdot0KOutR )
    {
		pToFpga->addr = C1Cav4Elecdot0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecdot0KOutW )
    {
		pToFpga->addr = C1Cav4Elecdot0KOutWAdr;
    }
    else
    if( function == p_C1Cav4Elecdot2KOutR )
    {
		pToFpga->addr = C1Cav4Elecdot2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecdot2KOutW )
    {
		pToFpga->addr = C1Cav4Elecdot2KOutWAdr;
    }
    else
    if( function == p_C1Cav4ElecdriveCoupleophoffR )
    {
		pToFpga->addr = C1Cav4ElecdriveCoupleophoffRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4ElecdriveCoupleophoffW )
    {
		pToFpga->addr = C1Cav4ElecdriveCoupleophoffWAdr;
    }
    else
    if( function == p_C1Cav4Elecfq0CoarseFreqR )
    {
		pToFpga->addr = C1Cav4Elecfq0CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecfq0CoarseFreqW )
    {
		pToFpga->addr = C1Cav4Elecfq0CoarseFreqWAdr;
    }
    else
    if( function == p_C1Cav4Elecfq1CoarseFreqR )
    {
		pToFpga->addr = C1Cav4Elecfq1CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecfq1CoarseFreqW )
    {
		pToFpga->addr = C1Cav4Elecfq1CoarseFreqWAdr;
    }
    else
    if( function == p_C1Cav4Elecfq2CoarseFreqR )
    {
		pToFpga->addr = C1Cav4Elecfq2CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecfq2CoarseFreqW )
    {
		pToFpga->addr = C1Cav4Elecfq2CoarseFreqWAdr;
    }
    else
    if( function == p_C1Cav4Elecmode0BeamCouplingR )
    {
		pToFpga->addr = C1Cav4Elecmode0BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecmode0BeamCouplingW )
    {
		pToFpga->addr = C1Cav4Elecmode0BeamCouplingWAdr;
    }
    else
    if( function == p_C1Cav4Elecmode0DriveCouplingR )
    {
		pToFpga->addr = C1Cav4Elecmode0DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecmode0DriveCouplingW )
    {
		pToFpga->addr = C1Cav4Elecmode0DriveCouplingWAdr;
    }
    else
    if( function == p_C1Cav4Elecmode0OcoupoutCouplingR )
    {
		pToFpga->addr = C1Cav4Elecmode0OcoupoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecmode0OcoupoutCouplingW )
    {
		pToFpga->addr = C1Cav4Elecmode0OcoupoutCouplingWAdr;
    }
    else
    if( function == p_C1Cav4Elecmode1BeamCouplingR )
    {
		pToFpga->addr = C1Cav4Elecmode1BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecmode1BeamCouplingW )
    {
		pToFpga->addr = C1Cav4Elecmode1BeamCouplingWAdr;
    }
    else
    if( function == p_C1Cav4Elecmode1DriveCouplingR )
    {
		pToFpga->addr = C1Cav4Elecmode1DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecmode1DriveCouplingW )
    {
		pToFpga->addr = C1Cav4Elecmode1DriveCouplingWAdr;
    }
    else
    if( function == p_C1Cav4Elecmode1OcoupophoffR )
    {
		pToFpga->addr = C1Cav4Elecmode1OcoupophoffRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecmode1OcoupophoffW )
    {
		pToFpga->addr = C1Cav4Elecmode1OcoupophoffWAdr;
    }
    else
    if( function == p_C1Cav4Elecmode2OcoupophoffR )
    {
		pToFpga->addr = C1Cav4Elecmode2OcoupophoffRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4Elecmode2OcoupophoffW )
    {
		pToFpga->addr = C1Cav4Elecmode2OcoupophoffWAdr;
    }
    else
    if( function == p_C1Cav4ElecmoduloR )
    {
		pToFpga->addr = C1Cav4ElecmoduloRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4ElecmoduloW )
    {
		pToFpga->addr = C1Cav4ElecmoduloWAdr;
    }
    else
    if( function == p_C1Cav4ElecouterProd2KOutR )
    {
		pToFpga->addr = C1Cav4ElecouterProd2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4ElecouterProd2KOutW )
    {
		pToFpga->addr = C1Cav4ElecouterProd2KOutWAdr;
    }
    else
    if( function == p_C1Cav4ElecphaseStepR )
    {
		pToFpga->addr = C1Cav4ElecphaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_C1Cav4ElecphaseStepW )
    {
		pToFpga->addr = C1Cav4ElecphaseStepWAdr;
    }
    else
    if( function == p_C1DelayPcXxxR )
    {
		pToFpga->addr = C1DelayPcXxxRAdr|flagReadMask;
    }
    else
    if( function == p_C1DelayPcXxxW )
    {
		pToFpga->addr = C1DelayPcXxxWAdr;
    }
    else
    if( function == p_C1DspfdbkCorecoarseScaleR )
    {
		pToFpga->addr = C1DspfdbkCorecoarseScaleRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspfdbkCorecoarseScaleW )
    {
		pToFpga->addr = C1DspfdbkCorecoarseScaleWAdr;
    }
    else
    if( function == p_C1DspfdbkCorempProclimR )
    {
		pToFpga->addr = C1DspfdbkCorempProclimRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspfdbkCorempProclimW )
    {
		pToFpga->addr = C1DspfdbkCorempProclimWAdr;
    }
    else
    if( function == p_C1DspfdbkCorempProcphOffsetR )
    {
		pToFpga->addr = C1DspfdbkCorempProcphOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspfdbkCorempProcphOffsetW )
    {
		pToFpga->addr = C1DspfdbkCorempProcphOffsetWAdr;
    }
    else
    if( function == p_C1DspfdbkCorempProcselEnR )
    {
		pToFpga->addr = C1DspfdbkCorempProcselEnRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspfdbkCorempProcselEnW )
    {
		pToFpga->addr = C1DspfdbkCorempProcselEnWAdr;
    }
    else
    if( function == p_C1DspfdbkCorempProcselThreshR )
    {
		pToFpga->addr = C1DspfdbkCorempProcselThreshRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspfdbkCorempProcselThreshW )
    {
		pToFpga->addr = C1DspfdbkCorempProcselThreshWAdr;
    }
    else
    if( function == p_C1DsplpNotchlp1AkxR )
    {
		pToFpga->addr = C1DsplpNotchlp1AkxRAdr|flagReadMask;
    }
    else
    if( function == p_C1DsplpNotchlp1AkxW )
    {
		pToFpga->addr = C1DsplpNotchlp1AkxWAdr;
    }
    else
    if( function == p_C1DsplpNotchlp1BkxR )
    {
		pToFpga->addr = C1DsplpNotchlp1BkxRAdr|flagReadMask;
    }
    else
    if( function == p_C1DsplpNotchlp1BkxW )
    {
		pToFpga->addr = C1DsplpNotchlp1BkxWAdr;
    }
    else
    if( function == p_C1DsplpNotchlp1BkyR )
    {
		pToFpga->addr = C1DsplpNotchlp1BkyRAdr|flagReadMask;
    }
    else
    if( function == p_C1DsplpNotchlp1BkyW )
    {
		pToFpga->addr = C1DsplpNotchlp1BkyWAdr;
    }
    else
    if( function == p_C1DspmoduloR )
    {
		pToFpga->addr = C1DspmoduloRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspmoduloW )
    {
		pToFpga->addr = C1DspmoduloWAdr;
    }
    else
    if( function == p_C1DspphaseStepR )
    {
		pToFpga->addr = C1DspphaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspphaseStepW )
    {
		pToFpga->addr = C1DspphaseStepWAdr;
    }
    else
    if( function == p_C1DsppiezopiezoDcR )
    {
		pToFpga->addr = C1DsppiezopiezoDcRAdr|flagReadMask;
    }
    else
    if( function == p_C1DsppiezopiezoDcW )
    {
		pToFpga->addr = C1DsppiezopiezoDcWAdr;
    }
    else
    if( function == p_C1DsptagR )
    {
		pToFpga->addr = C1DsptagRAdr|flagReadMask;
    }
    else
    if( function == p_C1DsptagW )
    {
		pToFpga->addr = C1DsptagWAdr;
    }
    else
    if( function == p_C1DspuseFiberIqR )
    {
		pToFpga->addr = C1DspuseFiberIqRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspuseFiberIqW )
    {
		pToFpga->addr = C1DspuseFiberIqWAdr;
    }
    else
    if( function == p_C1DspwaveSampPerR )
    {
		pToFpga->addr = C1DspwaveSampPerRAdr|flagReadMask;
    }
    else
    if( function == p_C1DspwaveSampPerW )
    {
		pToFpga->addr = C1DspwaveSampPerWAdr;
    }
    else
    if( function == p_C1ModuloR )
    {
		pToFpga->addr = C1ModuloRAdr|flagReadMask;
    }
    else
    if( function == p_C1ModuloW )
    {
		pToFpga->addr = C1ModuloWAdr;
    }
    else
    if( function == p_C1PhaseInitR )
    {
		pToFpga->addr = C1PhaseInitRAdr|flagReadMask;
    }
    else
    if( function == p_C1PhaseInitW )
    {
		pToFpga->addr = C1PhaseInitWAdr;
    }
    else
    if( function == p_C1PiezoCouplekOutR )
    {
		pToFpga->addr = C1PiezoCouplekOutRAdr|flagReadMask;
    }
    else
    if( function == p_C1PiezoCouplekOutW )
    {
		pToFpga->addr = C1PiezoCouplekOutWAdr;
    }
    else
    if( function == p_C1PrngivaR )
    {
		pToFpga->addr = C1PrngivaRAdr|flagReadMask;
    }
    else
    if( function == p_C1PrngivaW )
    {
		pToFpga->addr = C1PrngivaWAdr;
    }
    else
    if( function == p_C1PrngrandomRunR )
    {
		pToFpga->addr = C1PrngrandomRunRAdr|flagReadMask;
    }
    else
    if( function == p_C1PrngrandomRunW )
    {
		pToFpga->addr = C1PrngrandomRunWAdr;
    }
    else
    if( function == p_Cav0ACavoffsR )
    {
		pToFpga->addr = Cav0ACavoffsRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0ACavoffsW )
    {
		pToFpga->addr = Cav0ACavoffsWAdr;
    }
    else
    if( function == p_Cav0Cav4Elecdot2KOutR )
    {
		pToFpga->addr = Cav0Cav4Elecdot2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0Cav4Elecdot2KOutW )
    {
		pToFpga->addr = Cav0Cav4Elecdot2KOutWAdr;
    }
    else
    if( function == p_Cav0Cav4Elecmode0OcoupoutCouplingR )
    {
		pToFpga->addr = Cav0Cav4Elecmode0OcoupoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0Cav4Elecmode0OcoupoutCouplingW )
    {
		pToFpga->addr = Cav0Cav4Elecmode0OcoupoutCouplingWAdr;
    }
    else
    if( function == p_Cav0Cav4Elecmode1BwR )
    {
		pToFpga->addr = Cav0Cav4Elecmode1BwRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0Cav4Elecmode1BwW )
    {
		pToFpga->addr = Cav0Cav4Elecmode1BwWAdr;
    }
    else
    if( function == p_Cav0Cav4Elecmode1OcoupophoffR )
    {
		pToFpga->addr = Cav0Cav4Elecmode1OcoupophoffRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0Cav4Elecmode1OcoupophoffW )
    {
		pToFpga->addr = Cav0Cav4Elecmode1OcoupophoffWAdr;
    }
    else
    if( function == p_Cav0Cav4Elecmode1OcoupoutCouplingR )
    {
		pToFpga->addr = Cav0Cav4Elecmode1OcoupoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0Cav4Elecmode1OcoupoutCouplingW )
    {
		pToFpga->addr = Cav0Cav4Elecmode1OcoupoutCouplingWAdr;
    }
    else
    if( function == p_Cav0Cav4ElecouterProd1KOutR )
    {
		pToFpga->addr = Cav0Cav4ElecouterProd1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0Cav4ElecouterProd1KOutW )
    {
		pToFpga->addr = Cav0Cav4ElecouterProd1KOutWAdr;
    }
    else
    if( function == p_Cav0Cav4ElecphaseStepR )
    {
		pToFpga->addr = Cav0Cav4ElecphaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0Cav4ElecphaseStepW )
    {
		pToFpga->addr = Cav0Cav4ElecphaseStepWAdr;
    }
    else
    if( function == p_Cav0PiezoCouplekOutR )
    {
		pToFpga->addr = Cav0PiezoCouplekOutRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0PiezoCouplekOutW )
    {
		pToFpga->addr = Cav0PiezoCouplekOutWAdr;
    }
    else
    if( function == p_Cav0PrngivaR )
    {
		pToFpga->addr = Cav0PrngivaRAdr|flagReadMask;
    }
    else
    if( function == p_Cav0PrngivaW )
    {
		pToFpga->addr = Cav0PrngivaWAdr;
    }
    else
    if( function == p_Cav1Cav4Elecdot1KOutR )
    {
		pToFpga->addr = Cav1Cav4Elecdot1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1Cav4Elecdot1KOutW )
    {
		pToFpga->addr = Cav1Cav4Elecdot1KOutWAdr;
    }
    else
    if( function == p_Cav1Cav4ElecdriveCoupleoutCouplingR )
    {
		pToFpga->addr = Cav1Cav4ElecdriveCoupleoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1Cav4ElecdriveCoupleoutCouplingW )
    {
		pToFpga->addr = Cav1Cav4ElecdriveCoupleoutCouplingWAdr;
    }
    else
    if( function == p_Cav1Cav4Elecmode0BwR )
    {
		pToFpga->addr = Cav1Cav4Elecmode0BwRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1Cav4Elecmode0BwW )
    {
		pToFpga->addr = Cav1Cav4Elecmode0BwWAdr;
    }
    else
    if( function == p_Cav1Cav4Elecmode0OcoupophoffR )
    {
		pToFpga->addr = Cav1Cav4Elecmode0OcoupophoffRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1Cav4Elecmode0OcoupophoffW )
    {
		pToFpga->addr = Cav1Cav4Elecmode0OcoupophoffWAdr;
    }
    else
    if( function == p_Cav1Cav4Elecmode1OcoupoutCouplingR )
    {
		pToFpga->addr = Cav1Cav4Elecmode1OcoupoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1Cav4Elecmode1OcoupoutCouplingW )
    {
		pToFpga->addr = Cav1Cav4Elecmode1OcoupoutCouplingWAdr;
    }
    else
    if( function == p_Cav1Cav4Elecmode2BwR )
    {
		pToFpga->addr = Cav1Cav4Elecmode2BwRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1Cav4Elecmode2BwW )
    {
		pToFpga->addr = Cav1Cav4Elecmode2BwWAdr;
    }
    else
    if( function == p_Cav1Cav4ElecouterProd1KOutR )
    {
		pToFpga->addr = Cav1Cav4ElecouterProd1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1Cav4ElecouterProd1KOutW )
    {
		pToFpga->addr = Cav1Cav4ElecouterProd1KOutWAdr;
    }
    else
    if( function == p_Cav1PrngivbR )
    {
		pToFpga->addr = Cav1PrngivbRAdr|flagReadMask;
    }
    else
    if( function == p_Cav1PrngivbW )
    {
		pToFpga->addr = Cav1PrngivbWAdr;
    }
    else
    if( function == p_Cav4MechprngivaR )
    {
		pToFpga->addr = Cav4MechprngivaRAdr|flagReadMask;
    }
    else
    if( function == p_Cav4MechprngivaW )
    {
		pToFpga->addr = Cav4MechprngivaWAdr;
    }
    else
    if( function == p_Cav4MechprngrandomRunR )
    {
		pToFpga->addr = Cav4MechprngrandomRunRAdr|flagReadMask;
    }
    else
    if( function == p_Cav4MechprngrandomRunW )
    {
		pToFpga->addr = Cav4MechprngrandomRunWAdr;
    }
    else
    if( function == p_CavSelR )
    {
		pToFpga->addr = CavSelRAdr|flagReadMask;
    }
    else
    if( function == p_CavSelW )
    {
		pToFpga->addr = CavSelWAdr;
    }
    else
    if( function == p_CicPeriodR )
    {
		pToFpga->addr = CicPeriodRAdr|flagReadMask;
    }
    else
    if( function == p_CicPeriodW )
    {
		pToFpga->addr = CicPeriodWAdr;
    }
    else
    if( function == p_CicShiftR )
    {
		pToFpga->addr = CicShiftRAdr|flagReadMask;
    }
    else
    if( function == p_CicShiftW )
    {
		pToFpga->addr = CicShiftWAdr;
    }
    else
    if( function == p_CircleBufFlipR )
    {
		pToFpga->addr = CircleBufFlipRAdr|flagReadMask;
    }
    else
    if( function == p_CircleBufFlipW )
    {
		pToFpga->addr = CircleBufFlipWAdr;
    }
    else
    if( function == p_ClkPhaseDiffOutU2R )
    {
		pToFpga->addr = ClkPhaseDiffOutU2RAdr|flagReadMask;
    }
    else
    if( function == p_ClkPhaseDiffOutU3R )
    {
		pToFpga->addr = ClkPhaseDiffOutU3RAdr|flagReadMask;
    }
    else
    if( function == p_ClkStatusOutR )
    {
		pToFpga->addr = ClkStatusOutRAdr|flagReadMask;
    }
    else
    if( function == p_ClkStatusWeR )
    {
		pToFpga->addr = ClkStatusWeRAdr|flagReadMask;
    }
    else
    if( function == p_ClkStatusWeW )
    {
		pToFpga->addr = ClkStatusWeWAdr;
    }
    else
    if( function == p_CrcErrorsR )
    {
		pToFpga->addr = CrcErrorsRAdr|flagReadMask;
    }
    else
    if( function == p_CtraceRunningR )
    {
		pToFpga->addr = CtraceRunningRAdr|flagReadMask;
    }
    else
    if( function == p_DacDdsResetR )
    {
		pToFpga->addr = DacDdsResetRAdr|flagReadMask;
    }
    else
    if( function == p_DacDdsResetW )
    {
		pToFpga->addr = DacDdsResetWAdr;
    }
    else
    if( function == p_DdsaModuloR )
    {
		pToFpga->addr = DdsaModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DdsaModuloW )
    {
		pToFpga->addr = DdsaModuloWAdr;
    }
    else
    if( function == p_DdsaPhstepHR )
    {
		pToFpga->addr = DdsaPhstepHRAdr|flagReadMask;
    }
    else
    if( function == p_DdsaPhstepHW )
    {
		pToFpga->addr = DdsaPhstepHWAdr;
    }
    else
    if( function == p_DigcfgidelayctrlResetRR )
    {
		pToFpga->addr = DigcfgidelayctrlResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigcfgidelayctrlResetRW )
    {
		pToFpga->addr = DigcfgidelayctrlResetRWAdr;
    }
    else
    if( function == p_DigcfgrawadcTrigR )
    {
		pToFpga->addr = DigcfgrawadcTrigRAdr|flagReadMask;
    }
    else
    if( function == p_DigcfgrawadcTrigW )
    {
		pToFpga->addr = DigcfgrawadcTrigWAdr;
    }
    else
    if( function == p_DigcfgsyncTps62210CsetR )
    {
		pToFpga->addr = DigcfgsyncTps62210CsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigcfgsyncTps62210CsetW )
    {
		pToFpga->addr = DigcfgsyncTps62210CsetWAdr;
    }
    else
    if( function == p_Digcfgu18SpiDataAddrRR )
    {
		pToFpga->addr = Digcfgu18SpiDataAddrRRAdr|flagReadMask;
    }
    else
    if( function == p_Digcfgu18SpiDataAddrRW )
    {
		pToFpga->addr = Digcfgu18SpiDataAddrRWAdr;
    }
    else
    if( function == p_Digcfgu18SpiReadAndStartRR )
    {
		pToFpga->addr = Digcfgu18SpiReadAndStartRRAdr|flagReadMask;
    }
    else
    if( function == p_Digcfgu18SpiReadAndStartRW )
    {
		pToFpga->addr = Digcfgu18SpiReadAndStartRWAdr;
    }
    else
    if( function == p_Digcfgu4ResetRR )
    {
		pToFpga->addr = Digcfgu4ResetRRAdr|flagReadMask;
    }
    else
    if( function == p_Digcfgu4ResetRW )
    {
		pToFpga->addr = Digcfgu4ResetRWAdr;
    }
    else
    if( function == p_DigdspamplitudeR )
    {
		pToFpga->addr = DigdspamplitudeRAdr|flagReadMask;
    }
    else
    if( function == p_DigdspamplitudeW )
    {
		pToFpga->addr = DigdspamplitudeWAdr;
    }
    else
    if( function == p_DigdspdacModeR )
    {
		pToFpga->addr = DigdspdacModeRAdr|flagReadMask;
    }
    else
    if( function == p_DigdspdacModeW )
    {
		pToFpga->addr = DigdspdacModeWAdr;
    }
    else
    if( function == p_DigdspddsaPhstepLR )
    {
		pToFpga->addr = DigdspddsaPhstepLRAdr|flagReadMask;
    }
    else
    if( function == p_DigdspddsaPhstepLW )
    {
		pToFpga->addr = DigdspddsaPhstepLWAdr;
    }
    else
    if( function == p_DigdspmoduloR )
    {
		pToFpga->addr = DigdspmoduloRAdr|flagReadMask;
    }
    else
    if( function == p_DigdspmoduloW )
    {
		pToFpga->addr = DigdspmoduloWAdr;
    }
    else
    if( function == p_DigdspphaseStepHR )
    {
		pToFpga->addr = DigdspphaseStepHRAdr|flagReadMask;
    }
    else
    if( function == p_DigdspphaseStepHW )
    {
		pToFpga->addr = DigdspphaseStepHWAdr;
    }
    else
    if( function == p_Digdsprsmcav0Cav4ElecouterProd0KOutR )
    {
		pToFpga->addr = Digdsprsmcav0Cav4ElecouterProd0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_Digdsprsmcav0Cav4ElecouterProd0KOutW )
    {
		pToFpga->addr = Digdsprsmcav0Cav4ElecouterProd0KOutWAdr;
    }
    else
    if( function == p_Digdsprsmcav1AForoffsR )
    {
		pToFpga->addr = Digdsprsmcav1AForoffsRAdr|flagReadMask;
    }
    else
    if( function == p_Digdsprsmcav1AForoffsW )
    {
		pToFpga->addr = Digdsprsmcav1AForoffsWAdr;
    }
    else
    if( function == p_Digdsprsmshell0DsplpNotchlp1AkxR )
    {
		pToFpga->addr = Digdsprsmshell0DsplpNotchlp1AkxRAdr|flagReadMask;
    }
    else
    if( function == p_Digdsprsmshell0DsplpNotchlp1AkxW )
    {
		pToFpga->addr = Digdsprsmshell0DsplpNotchlp1AkxWAdr;
    }
    else
    if( function == p_Digdsprsmshell1DspfdbkCorempProccoeffR )
    {
		pToFpga->addr = Digdsprsmshell1DspfdbkCorempProccoeffRAdr|flagReadMask;
    }
    else
    if( function == p_Digdsprsmshell1DspfdbkCorempProccoeffW )
    {
		pToFpga->addr = Digdsprsmshell1DspfdbkCorempProccoeffWAdr;
    }
    else
    if( function == p_DigdsptraceKeepR )
    {
		pToFpga->addr = DigdsptraceKeepRAdr|flagReadMask;
    }
    else
    if( function == p_DigdsptraceKeepW )
    {
		pToFpga->addr = DigdsptraceKeepWAdr;
    }
    else
    if( function == p_DomainJumpRealignR )
    {
		pToFpga->addr = DomainJumpRealignRAdr|flagReadMask;
    }
    else
    if( function == p_DomainJumpRealignW )
    {
		pToFpga->addr = DomainJumpRealignWAdr;
    }
    else
    if( function == p_FfffffffR )
    {
		pToFpga->addr = FfffffffRAdr|flagReadMask;
    }
    else
    if( function == p_Frequency4XoutR )
    {
		pToFpga->addr = Frequency4XoutRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyAdcR )
    {
		pToFpga->addr = FrequencyAdcRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyClkout3R )
    {
		pToFpga->addr = FrequencyClkout3RAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyDcoR )
    {
		pToFpga->addr = FrequencyDcoRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyGtxRxR )
    {
		pToFpga->addr = FrequencyGtxRxRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyGtxTxR )
    {
		pToFpga->addr = FrequencyGtxTxRAdr|flagReadMask;
    }
    else
    if( function == p_H0D0A0D0AR )
    {
		pToFpga->addr = H0D0A0D0ARAdr|flagReadMask;
    }
    else
    if( function == p_HellR )
    {
		pToFpga->addr = HellRAdr|flagReadMask;
    }
    else
    if( function == p_HistCountWStrobeR )
    {
		pToFpga->addr = HistCountWStrobeRAdr|flagReadMask;
    }
    else
    if( function == p_HistCountWStrobeW )
    {
		pToFpga->addr = HistCountWStrobeWAdr;
    }
    else
    if( function == p_HistDoutR )
    {
		pToFpga->addr = HistDoutRAdr|flagReadMask;
    }
    else
    if( function == p_HistStatusR )
    {
		pToFpga->addr = HistStatusRAdr|flagReadMask;
    }
    else
    if( function == p_IccCfgR )
    {
		pToFpga->addr = IccCfgRAdr|flagReadMask;
    }
    else
    if( function == p_IccCfgW )
    {
		pToFpga->addr = IccCfgWAdr;
    }
    else
    if( function == p_IdelayBaseR )
    {
		pToFpga->addr = IdelayBaseRAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU2Bits19To0R )
    {
		pToFpga->addr = IdelayValueOutU2Bits19To0RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU2Bits39To20R )
    {
		pToFpga->addr = IdelayValueOutU2Bits39To20RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU3Bits19To0R )
    {
		pToFpga->addr = IdelayValueOutU3Bits19To0RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU3Bits39To20R )
    {
		pToFpga->addr = IdelayValueOutU3Bits39To20RAdr|flagReadMask;
    }
    else
    if( function == p_LlrfCircleDataR )
    {
		pToFpga->addr = LlrfCircleDataRAdr|flagReadMask;
    }
    else
    if( function == p_LlrfCircleReadyR )
    {
		pToFpga->addr = LlrfCircleReadyRAdr|flagReadMask;
    }
    else
    if( function == p_LlrfDspDacEnR )
    {
		pToFpga->addr = LlrfDspDacEnRAdr|flagReadMask;
    }
    else
    if( function == p_LlrfDspDacEnW )
    {
		pToFpga->addr = LlrfDspDacEnWAdr;
    }
    else
    if( function == p_LlspiResultR )
    {
		pToFpga->addr = LlspiResultRAdr|flagReadMask;
    }
    else
    if( function == p_LlspiStatusR )
    {
		pToFpga->addr = LlspiStatusRAdr|flagReadMask;
    }
    else
    if( function == p_LlspiWeR )
    {
		pToFpga->addr = LlspiWeRAdr|flagReadMask;
    }
    else
    if( function == p_LlspiWeW )
    {
		pToFpga->addr = LlspiWeWAdr;
    }
    else
    if( function == p_LoAmpR )
    {
		pToFpga->addr = LoAmpRAdr|flagReadMask;
    }
    else
    if( function == p_LoAmpW )
    {
		pToFpga->addr = LoAmpWAdr;
    }
    else
    if( function == p_MmcmResetRR )
    {
		pToFpga->addr = MmcmResetRRAdr|flagReadMask;
    }
    else
    if( function == p_MmcmResetRW )
    {
		pToFpga->addr = MmcmResetRWAdr;
    }
    else
    if( function == p_NoiseCouplekOutR )
    {
		pToFpga->addr = NoiseCouplekOutRAdr|flagReadMask;
    }
    else
    if( function == p_NoiseCouplekOutW )
    {
		pToFpga->addr = NoiseCouplekOutWAdr;
    }
    else
    if( function == p_OWoR )
    {
		pToFpga->addr = OWoRAdr|flagReadMask;
    }
    else
    if( function == p_PeriphConfigR )
    {
		pToFpga->addr = PeriphConfigRAdr|flagReadMask;
    }
    else
    if( function == p_PeriphConfigW )
    {
		pToFpga->addr = PeriphConfigWAdr;
    }
    else
    if( function == p_PhaseStepLR )
    {
		pToFpga->addr = PhaseStepLRAdr|flagReadMask;
    }
    else
    if( function == p_PhaseStepLW )
    {
		pToFpga->addr = PhaseStepLWAdr;
    }
    else
    if( function == p_PhasexDoutR )
    {
		pToFpga->addr = PhasexDoutRAdr|flagReadMask;
    }
    else
    if( function == p_PhasexStatusR )
    {
		pToFpga->addr = PhasexStatusRAdr|flagReadMask;
    }
    else
    if( function == p_PhasexTrigR )
    {
		pToFpga->addr = PhasexTrigRAdr|flagReadMask;
    }
    else
    if( function == p_PhasexTrigW )
    {
		pToFpga->addr = PhasexTrigWAdr;
    }
    else
    if( function == p_PrcDspprlGainR )
    {
		pToFpga->addr = PrcDspprlGainRAdr|flagReadMask;
    }
    else
    if( function == p_PrcDspprlGainW )
    {
		pToFpga->addr = PrcDspprlGainWAdr;
    }
    else
    if( function == p_PrlCfgR )
    {
		pToFpga->addr = PrlCfgRAdr|flagReadMask;
    }
    else
    if( function == p_PrlCfgW )
    {
		pToFpga->addr = PrlCfgWAdr;
    }
    else
    if( function == p_PropConstR )
    {
		pToFpga->addr = PropConstRAdr|flagReadMask;
    }
    else
    if( function == p_PropConstW )
    {
		pToFpga->addr = PropConstWAdr;
    }
    else
    if( function == p_QsfpBufR )
    {
		pToFpga->addr = QsfpBufRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpI2CRegR )
    {
		pToFpga->addr = QsfpI2CRegRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpI2CRegW )
    {
		pToFpga->addr = QsfpI2CRegWAdr;
    }
    else
    if( function == p_RldR )
    {
		pToFpga->addr = RldRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmbeam0PhaseInitR )
    {
		pToFpga->addr = Rsmbeam0PhaseInitRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmbeam0PhaseInitW )
    {
		pToFpga->addr = Rsmbeam0PhaseInitWAdr;
    }
    else
    if( function == p_Rsmbeam1PhaseStepR )
    {
		pToFpga->addr = Rsmbeam1PhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmbeam1PhaseStepW )
    {
		pToFpga->addr = Rsmbeam1PhaseStepWAdr;
    }
    else
    if( function == p_Rsmcav0Cav4ElecdriveCoupleophoffR )
    {
		pToFpga->addr = Rsmcav0Cav4ElecdriveCoupleophoffRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav0Cav4ElecdriveCoupleophoffW )
    {
		pToFpga->addr = Rsmcav0Cav4ElecdriveCoupleophoffWAdr;
    }
    else
    if( function == p_Rsmcav0Cav4Elecmode0BeamCouplingR )
    {
		pToFpga->addr = Rsmcav0Cav4Elecmode0BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav0Cav4Elecmode0BeamCouplingW )
    {
		pToFpga->addr = Rsmcav0Cav4Elecmode0BeamCouplingWAdr;
    }
    else
    if( function == p_Rsmcav0Cav4Elecmode0OcoupophoffR )
    {
		pToFpga->addr = Rsmcav0Cav4Elecmode0OcoupophoffRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav0Cav4Elecmode0OcoupophoffW )
    {
		pToFpga->addr = Rsmcav0Cav4Elecmode0OcoupophoffWAdr;
    }
    else
    if( function == p_Rsmcav1AmpLpbwR )
    {
		pToFpga->addr = Rsmcav1AmpLpbwRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav1AmpLpbwW )
    {
		pToFpga->addr = Rsmcav1AmpLpbwWAdr;
    }
    else
    if( function == p_Rsmcav1Cav4Elecmode1BwR )
    {
		pToFpga->addr = Rsmcav1Cav4Elecmode1BwRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav1Cav4Elecmode1BwW )
    {
		pToFpga->addr = Rsmcav1Cav4Elecmode1BwWAdr;
    }
    else
    if( function == p_Rsmcav1Cav4Elecmode2BeamCouplingR )
    {
		pToFpga->addr = Rsmcav1Cav4Elecmode2BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav1Cav4Elecmode2BeamCouplingW )
    {
		pToFpga->addr = Rsmcav1Cav4Elecmode2BeamCouplingWAdr;
    }
    else
    if( function == p_Rsmcav1Cav4Elecmode2OcoupoutCouplingR )
    {
		pToFpga->addr = Rsmcav1Cav4Elecmode2OcoupoutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav1Cav4Elecmode2OcoupoutCouplingW )
    {
		pToFpga->addr = Rsmcav1Cav4Elecmode2OcoupoutCouplingWAdr;
    }
    else
    if( function == p_Rsmcav1Cav4ElecouterProd0KOutR )
    {
		pToFpga->addr = Rsmcav1Cav4ElecouterProd0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav1Cav4ElecouterProd0KOutW )
    {
		pToFpga->addr = Rsmcav1Cav4ElecouterProd0KOutWAdr;
    }
    else
    if( function == p_Rsmcav1ComprsatCtlR )
    {
		pToFpga->addr = Rsmcav1ComprsatCtlRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav1ComprsatCtlW )
    {
		pToFpga->addr = Rsmcav1ComprsatCtlWAdr;
    }
    else
    if( function == p_Rsmcav4MechprngivbR )
    {
		pToFpga->addr = Rsmcav4MechprngivbRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmcav4MechprngivbW )
    {
		pToFpga->addr = Rsmcav4MechprngivbWAdr;
    }
    else
    if( function == p_RsmdacIqPhaseR )
    {
		pToFpga->addr = RsmdacIqPhaseRAdr|flagReadMask;
    }
    else
    if( function == p_RsmdacIqPhaseW )
    {
		pToFpga->addr = RsmdacIqPhaseWAdr;
    }
    else
    if( function == p_Rsmshell0DsplpNotchlp1BkxR )
    {
		pToFpga->addr = Rsmshell0DsplpNotchlp1BkxRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmshell0DsplpNotchlp1BkxW )
    {
		pToFpga->addr = Rsmshell0DsplpNotchlp1BkxWAdr;
    }
    else
    if( function == p_Rsmshell1DsppiezosfConstsR )
    {
		pToFpga->addr = Rsmshell1DsppiezosfConstsRAdr|flagReadMask;
    }
    else
    if( function == p_Rsmshell1DsppiezosfConstsW )
    {
		pToFpga->addr = Rsmshell1DsppiezosfConstsWAdr;
    }
    else
    if( function == p_ScanTriggerWeR )
    {
		pToFpga->addr = ScanTriggerWeRAdr|flagReadMask;
    }
    else
    if( function == p_ScanTriggerWeW )
    {
		pToFpga->addr = ScanTriggerWeWAdr;
    }
    else
    if( function == p_ScannerDebugR )
    {
		pToFpga->addr = ScannerDebugRAdr|flagReadMask;
    }
    else
    if( function == p_ScannerDebugW )
    {
		pToFpga->addr = ScannerDebugWAdr;
    }
    else
    if( function == p_ScannerResultR )
    {
		pToFpga->addr = ScannerResultRAdr|flagReadMask;
    }
    else
    if( function == p_SfpAddressSetR )
    {
		pToFpga->addr = SfpAddressSetRAdr|flagReadMask;
    }
    else
    if( function == p_SfpAddressSetW )
    {
		pToFpga->addr = SfpAddressSetWAdr;
    }
    else
    if( function == p_Shell0DspfdbkCorempProccoeffR )
    {
		pToFpga->addr = Shell0DspfdbkCorempProccoeffRAdr|flagReadMask;
    }
    else
    if( function == p_Shell0DspfdbkCorempProccoeffW )
    {
		pToFpga->addr = Shell0DspfdbkCorempProccoeffWAdr;
    }
    else
    if( function == p_Shell0DspfdbkCorempProcphOffsetR )
    {
		pToFpga->addr = Shell0DspfdbkCorempProcphOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_Shell0DspfdbkCorempProcphOffsetW )
    {
		pToFpga->addr = Shell0DspfdbkCorempProcphOffsetWAdr;
    }
    else
    if( function == p_Shell0DspfdbkCorempProcselEnR )
    {
		pToFpga->addr = Shell0DspfdbkCorempProcselEnRAdr|flagReadMask;
    }
    else
    if( function == p_Shell0DspfdbkCorempProcselEnW )
    {
		pToFpga->addr = Shell0DspfdbkCorempProcselEnWAdr;
    }
    else
    if( function == p_Shell0DspmoduloR )
    {
		pToFpga->addr = Shell0DspmoduloRAdr|flagReadMask;
    }
    else
    if( function == p_Shell0DspmoduloW )
    {
		pToFpga->addr = Shell0DspmoduloWAdr;
    }
    else
    if( function == p_Shell0DspphaseStepR )
    {
		pToFpga->addr = Shell0DspphaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_Shell0DspphaseStepW )
    {
		pToFpga->addr = Shell0DspphaseStepWAdr;
    }
    else
    if( function == p_Shell0DsptagR )
    {
		pToFpga->addr = Shell0DsptagRAdr|flagReadMask;
    }
    else
    if( function == p_Shell0DsptagW )
    {
		pToFpga->addr = Shell0DsptagWAdr;
    }
    else
    if( function == p_Shell1DspchanKeepR )
    {
		pToFpga->addr = Shell1DspchanKeepRAdr|flagReadMask;
    }
    else
    if( function == p_Shell1DspchanKeepW )
    {
		pToFpga->addr = Shell1DspchanKeepWAdr;
    }
    else
        if( function == p_Shell1DspfdbkCorempProcsetmp0R )
        {
    		pToFpga->addr = Shell1DspfdbkCorempProcsetmp0RAdr|flagReadMask;
        }
        else
        if( function == p_Shell1DspfdbkCorempProcsetmp0W )
        {
    		pToFpga->addr = Shell1DspfdbkCorempProcsetmp0WAdr;
        }
        else
            if( function == p_Shell1DspfdbkCorempProcsetmp1R )
            {
        		pToFpga->addr = Shell1DspfdbkCorempProcsetmp1RAdr|flagReadMask;
            }
            else
            if( function == p_Shell1DspfdbkCorempProcsetmp1W )
            {
        		pToFpga->addr = Shell1DspfdbkCorempProcsetmp1WAdr;
            }
            else
                if( function == p_Shell1DspfdbkCorempProcsetmp2R )
                {
            		pToFpga->addr = Shell1DspfdbkCorempProcsetmp2RAdr|flagReadMask;
                }
                else
                if( function == p_Shell1DspfdbkCorempProcsetmp2W )
                {
            		pToFpga->addr = Shell1DspfdbkCorempProcsetmp2WAdr;
                }
                else
                    if( function == p_Shell1DspfdbkCorempProcsetmp3R )
                    {
                		pToFpga->addr = Shell1DspfdbkCorempProcsetmp3RAdr|flagReadMask;
                    }
                    else
                    if( function == p_Shell1DspfdbkCorempProcsetmp3W )
                    {
                		pToFpga->addr = Shell1DspfdbkCorempProcsetmp3WAdr;
                    }
                    else
    if( function == p_Shell1DspwaveShiftR )
    {
		pToFpga->addr = Shell1DspwaveShiftRAdr|flagReadMask;
    }
    else
    if( function == p_Shell1DspwaveShiftW )
    {
		pToFpga->addr = Shell1DspwaveShiftWAdr;
    }
    else
    if( function == p_Shell0SlowDataR )
    {
		pToFpga->addr = Shell0SlowDataRAdr|flagReadMask;
    }
    else
    if( function == p_Shell1SlowDataR )
    {
		pToFpga->addr = Shell1SlowDataRAdr|flagReadMask;
    }
    else
    if( function == p_SlowChainOutR )
    {
		pToFpga->addr = SlowChainOutRAdr|flagReadMask;
    }
    else
    if( function == p_SsaStimgPeriodR )
    {
		pToFpga->addr = SsaStimgPeriodRAdr|flagReadMask;
    }
    else
    if( function == p_SsaStimgPeriodW )
    {
		pToFpga->addr = SsaStimgPeriodWAdr;
    }
    else
    if( function == p_SsaStimpertstepR )
    {
		pToFpga->addr = SsaStimpertstepRAdr|flagReadMask;
    }
    else
    if( function == p_SsaStimpertstepW )
    {
		pToFpga->addr = SsaStimpertstepWAdr;
    }
    else
    if( function == p_SsaStimEnR )
    {
		pToFpga->addr = SsaStimEnRAdr|flagReadMask;
    }
    else
    if( function == p_SsaStimEnW )
    {
		pToFpga->addr = SsaStimEnWAdr;
    }
    else
    if( function == p_SyncAd7794CsetR )
    {
		pToFpga->addr = SyncAd7794CsetRAdr|flagReadMask;
    }
    else
    if( function == p_SyncAd7794CsetW )
    {
		pToFpga->addr = SyncAd7794CsetWAdr;
    }
    else
    if( function == p_TagNowR )
    {
		pToFpga->addr = TagNowRAdr|flagReadMask;
    }
    else
    if( function == p_TagNowW )
    {
		pToFpga->addr = TagNowWAdr;
    }
    else
    if( function == p_TraceIBufR )
    {
		pToFpga->addr = TraceIBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceIqBufR )
    {
		pToFpga->addr = TraceIqBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceQBufR )
    {
		pToFpga->addr = TraceQBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceResetWeR )
    {
		pToFpga->addr = TraceResetWeRAdr|flagReadMask;
    }
    else
    if( function == p_TraceResetWeW )
    {
		pToFpga->addr = TraceResetWeWAdr;
    }
    else
    if( function == p_TraceStatus1R )
    {
		pToFpga->addr = TraceStatus1RAdr|flagReadMask;
    }
    else
    if( function == p_TraceStatus2R )
    {
		pToFpga->addr = TraceStatus2RAdr|flagReadMask;
    }
    else
    if( function == p_TrigInternalR )
    {
		pToFpga->addr = TrigInternalRAdr|flagReadMask;
    }
    else
    if( function == p_TrigInternalW )
    {
		pToFpga->addr = TrigInternalWAdr;
    }
    else
    if( function == p_TrigModeR )
    {
		pToFpga->addr = TrigModeRAdr|flagReadMask;
    }
    else
    if( function == p_TrigModeW )
    {
		pToFpga->addr = TrigModeWAdr;
    }
    else
    if( function == p_U15SdioAsSdoR )
    {
		pToFpga->addr = U15SdioAsSdoRAdr|flagReadMask;
    }
    else
    if( function == p_U15SdoAddrR )
    {
		pToFpga->addr = U15SdoAddrRAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiDataAddrRR )
    {
		pToFpga->addr = U15SpiDataAddrRRAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiDataAddrRW )
    {
		pToFpga->addr = U15SpiDataAddrRWAdr;
    }
    else
    if( function == p_U15SpiReadAndStartRR )
    {
		pToFpga->addr = U15SpiReadAndStartRRAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiReadAndStartRW )
    {
		pToFpga->addr = U15SpiReadAndStartRWAdr;
    }
    else
    if( function == p_U15SpiReadyR )
    {
		pToFpga->addr = U15SpiReadyRAdr|flagReadMask;
    }
    else
    if( function == p_U18SdioAsSdoR )
    {
		pToFpga->addr = U18SdioAsSdoRAdr|flagReadMask;
    }
    else
    if( function == p_U18SdoAddrR )
    {
		pToFpga->addr = U18SdoAddrRAdr|flagReadMask;
    }
    else
    if( function == p_U18SpiReadyR )
    {
		pToFpga->addr = U18SpiReadyRAdr|flagReadMask;
    }
    else
    if( function == p_U2Doutbits31To0R )
    {
		pToFpga->addr = U2Doutbits31To0RAdr|flagReadMask;
    }
    else
    if( function == p_U2Doutbits63To32R )
    {
		pToFpga->addr = U2Doutbits63To32RAdr|flagReadMask;
    }
    else
    if( function == p_U2IserdesResetRR )
    {
		pToFpga->addr = U2IserdesResetRRAdr|flagReadMask;
    }
    else
    if( function == p_U2IserdesResetRW )
    {
		pToFpga->addr = U2IserdesResetRWAdr;
    }
    else
    if( function == p_U3Doutbits31To0R )
    {
		pToFpga->addr = U3Doutbits31To0RAdr|flagReadMask;
    }
    else
    if( function == p_U3Doutbits63To32R )
    {
		pToFpga->addr = U3Doutbits63To32RAdr|flagReadMask;
    }
    else
    if( function == p_U3ClkResetRR )
    {
		pToFpga->addr = U3ClkResetRRAdr|flagReadMask;
    }
    else
    if( function == p_U3ClkResetRW )
    {
		pToFpga->addr = U3ClkResetRWAdr;
    }
    else
    if( function == p_U3IserdesResetRR )
    {
		pToFpga->addr = U3IserdesResetRRAdr|flagReadMask;
    }
    else
    if( function == p_U3IserdesResetRW )
    {
		pToFpga->addr = U3IserdesResetRWAdr;
    }
    else
    if( function == p_Wave0OutR )
    {
		pToFpga->addr = Wave0OutRAdr|flagReadMask;
    }
    else
    if( function == p_Wave0SrcR )
    {
		pToFpga->addr = Wave0SrcRAdr|flagReadMask;
    }
    else
    if( function == p_Wave0SrcW )
    {
		pToFpga->addr = Wave0SrcWAdr;
    }
    else
    if( function == p_Wave1OutR )
    {
		pToFpga->addr = Wave1OutRAdr|flagReadMask;
    }
    else
    if( function == p_Wave1SrcR )
    {
		pToFpga->addr = Wave1SrcRAdr|flagReadMask;
    }
    else
    if( function == p_Wave1SrcW )
    {
		pToFpga->addr = Wave1SrcWAdr;
    }
    else
    if( function == p_WaveformsAvailableR )
    {
		pToFpga->addr = WaveformsAvailableRAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiRdbkR )
    {
		pToFpga->addr = U15SpiRdbkRAdr|flagReadMask;
    }
    else
    if( function == p_U18SpiRdbkR )
    {
		pToFpga->addr = U18SpiRdbkRAdr|flagReadMask;
    }
    else
    	status = asynError;

    return status;
}

/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCDriver::processRegReadback(const FpgaReg *pFromFpga, bool &waveIsReady)
{
	unsigned int i;
	asynStatus status = asynSuccess;
	assert(pFromFpga->addr&flagReadMask); // This function is only for read registers
	epicsInt32 errorCount;
	int32_t signExtBits = 0;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
	break;

    case HellRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_HellR,
				(pFromFpga->data & HellMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HellRString,
				(unsigned ) pFromFpga->data & HellMask);
	break;

    case OWoRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_OWoR,
				(pFromFpga->data & OWoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				OWoRString,
				(unsigned ) pFromFpga->data & OWoMask);
	break;

    case RldRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RldR,
				(pFromFpga->data & RldMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RldRString,
				(unsigned ) pFromFpga->data & RldMask);
	break;

    case H0D0A0D0ARAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_H0D0A0D0AR,
				(pFromFpga->data & H0D0A0D0AMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				H0D0A0D0ARString,
				(unsigned ) pFromFpga->data & H0D0A0D0AMask);
	break;

    case LlspiStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LlspiStatusR,
				(pFromFpga->data & LlspiStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiStatusRString,
				(unsigned ) pFromFpga->data & LlspiStatusMask);
	break;

    case LlspiResultRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LlspiResultR,
				(pFromFpga->data & LlspiResultMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiResultRString,
				(unsigned ) pFromFpga->data & LlspiResultMask);
	break;

    case ClkStatusOutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ClkStatusOutR,
				(pFromFpga->data & ClkStatusOutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkStatusOutRString,
				(unsigned ) pFromFpga->data & ClkStatusOutMask);
	break;

    case FfffffffRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FfffffffR,
				(pFromFpga->data & FfffffffMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FfffffffRString,
				(unsigned ) pFromFpga->data & FfffffffMask);
	break;

    case FrequencyAdcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FrequencyAdcR,
				(pFromFpga->data & FrequencyAdcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyAdcRString,
				(unsigned ) pFromFpga->data & FrequencyAdcMask);
	break;

    case Frequency4XoutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Frequency4XoutR,
				(pFromFpga->data & Frequency4XoutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Frequency4XoutRString,
				(unsigned ) pFromFpga->data & Frequency4XoutMask);
	break;

    case FrequencyClkout3RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FrequencyClkout3R,
				(pFromFpga->data & FrequencyClkout3Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyClkout3RString,
				(unsigned ) pFromFpga->data & FrequencyClkout3Mask);
	break;

    case FrequencyDcoRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FrequencyDcoR,
				(pFromFpga->data & FrequencyDcoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyDcoRString,
				(unsigned ) pFromFpga->data & FrequencyDcoMask);
	break;

    case U2Doutbits31To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U2Doutbits31To0R,
				(pFromFpga->data & U2Doutbits31To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2Doutbits31To0RString,
				(unsigned ) pFromFpga->data & U2Doutbits31To0Mask);
	break;

    case U2Doutbits63To32RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U2Doutbits63To32R,
				(pFromFpga->data & U2Doutbits63To32Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2Doutbits63To32RString,
				(unsigned ) pFromFpga->data & U2Doutbits63To32Mask);
	break;

    case IdelayValueOutU2Bits19To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU2Bits19To0R,
				(pFromFpga->data & IdelayValueOutU2Bits19To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU2Bits19To0RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU2Bits19To0Mask);
	break;

    case IdelayValueOutU2Bits39To20RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU2Bits39To20R,
				(pFromFpga->data & IdelayValueOutU2Bits39To20Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU2Bits39To20RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU2Bits39To20Mask);
	break;

    case U3Doutbits31To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U3Doutbits31To0R,
				(pFromFpga->data & U3Doutbits31To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3Doutbits31To0RString,
				(unsigned ) pFromFpga->data & U3Doutbits31To0Mask);
	break;

    case U3Doutbits63To32RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U3Doutbits63To32R,
				(pFromFpga->data & U3Doutbits63To32Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3Doutbits63To32RString,
				(unsigned ) pFromFpga->data & U3Doutbits63To32Mask);
	break;

    case IdelayValueOutU3Bits19To0RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU3Bits19To0R,
				(pFromFpga->data & IdelayValueOutU3Bits19To0Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU3Bits19To0RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU3Bits19To0Mask);
	break;

    case IdelayValueOutU3Bits39To20RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayValueOutU3Bits39To20R,
				(pFromFpga->data & IdelayValueOutU3Bits39To20Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU3Bits39To20RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU3Bits39To20Mask);
	break;

    case Wave0OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Wave0OutR,
				(pFromFpga->data & Wave0OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave0OutRString,
				(unsigned ) pFromFpga->data & Wave0OutMask);
	break;

    case Wave1OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Wave1OutR,
				(pFromFpga->data & Wave1OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave1OutRString,
				(unsigned ) pFromFpga->data & Wave1OutMask);
	break;

    case AdcTestWave1OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWave1OutR,
				(pFromFpga->data & AdcTestWave1OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave1OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave1OutMask);
	break;

    case AdcTestWave2OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWave2OutR,
				(pFromFpga->data & AdcTestWave2OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave2OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave2OutMask);
	break;

    case AdcTestWave3OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWave3OutR,
				(pFromFpga->data & AdcTestWave3OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave3OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave3OutMask);
	break;

    case AdcTestWave4OutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestWave4OutR,
				(pFromFpga->data & AdcTestWave4OutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave4OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave4OutMask);
	break;

    case CtraceRunningRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CtraceRunningR,
				(pFromFpga->data & CtraceRunningMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CtraceRunningRString,
				(unsigned ) pFromFpga->data & CtraceRunningMask);
	break;

    case FrequencyGtxTxRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FrequencyGtxTxR,
				(pFromFpga->data & FrequencyGtxTxMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyGtxTxRString,
				(unsigned ) pFromFpga->data & FrequencyGtxTxMask);
	break;

    case FrequencyGtxRxRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_FrequencyGtxRxR,
				(pFromFpga->data & FrequencyGtxRxMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyGtxRxRString,
				(unsigned ) pFromFpga->data & FrequencyGtxRxMask);
	break;

    case HistStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_HistStatusR,
				(pFromFpga->data & HistStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HistStatusRString,
				(unsigned ) pFromFpga->data & HistStatusMask);
	break;

    case PhasexStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PhasexStatusR,
				(pFromFpga->data & PhasexStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhasexStatusRString,
				(unsigned ) pFromFpga->data & PhasexStatusMask);
	break;

    case ClkPhaseDiffOutU2RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ClkPhaseDiffOutU2R,
				(pFromFpga->data & ClkPhaseDiffOutU2Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkPhaseDiffOutU2RString,
				(unsigned ) pFromFpga->data & ClkPhaseDiffOutU2Mask);
	break;

    case ClkPhaseDiffOutU3RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ClkPhaseDiffOutU3R,
				(pFromFpga->data & ClkPhaseDiffOutU3Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkPhaseDiffOutU3RString,
				(unsigned ) pFromFpga->data & ClkPhaseDiffOutU3Mask);
	break;

    case CrcErrorsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CrcErrorsR,
				(pFromFpga->data & CrcErrorsMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CrcErrorsRString,
				(unsigned ) pFromFpga->data & CrcErrorsMask);
	break;

    case U15SdoAddrRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U15SdoAddrR,
				(pFromFpga->data & U15SdoAddrMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SdoAddrRString,
				(unsigned ) pFromFpga->data & U15SdoAddrMask);
	// shared address with U15SpiRdbkRAdr  56 == 56
		status = (asynStatus) setIntegerParam(p_U15SpiRdbkR,
				(pFromFpga->data & U15SpiRdbkMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiRdbkRString,
				(unsigned ) pFromFpga->data & U15SpiRdbkMask);
	break;

    case U15SpiReadyRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U15SpiReadyR,
				(pFromFpga->data & U15SpiReadyMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiReadyRString,
				(unsigned ) pFromFpga->data & U15SpiReadyMask);
	// shared address with U15SdioAsSdoRAdr  57 == 57
		status = (asynStatus) setIntegerParam(p_U15SdioAsSdoR,
				(pFromFpga->data & U15SdioAsSdoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SdioAsSdoRString,
				(unsigned ) pFromFpga->data & U15SdioAsSdoMask);
	break;

    case U18SdoAddrRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U18SdoAddrR,
				(pFromFpga->data & U18SdoAddrMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SdoAddrRString,
				(unsigned ) pFromFpga->data & U18SdoAddrMask);
	// shared address with U18SpiRdbkRAdr  60 == 60
		status = (asynStatus) setIntegerParam(p_U18SpiRdbkR,
				(pFromFpga->data & U18SpiRdbkMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SpiRdbkRString,
				(unsigned ) pFromFpga->data & U18SpiRdbkMask);
	break;

    case U18SdioAsSdoRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U18SdioAsSdoR,
				(pFromFpga->data & U18SdioAsSdoMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SdioAsSdoRString,
				(unsigned ) pFromFpga->data & U18SdioAsSdoMask);
	// shared address with U18SpiReadyRAdr  61 == 61
		status = (asynStatus) setIntegerParam(p_U18SpiReadyR,
				(pFromFpga->data & U18SpiReadyMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SpiReadyRString,
				(unsigned ) pFromFpga->data & U18SpiReadyMask);
	break;

    case AdcTestTrigCntRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestTrigCntR,
				(pFromFpga->data & AdcTestTrigCntMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestTrigCntRString,
				(unsigned ) pFromFpga->data & AdcTestTrigCntMask);
	break;

    case WaveformsAvailableRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_WaveformsAvailableR,
				(pFromFpga->data & WaveformsAvailableMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				WaveformsAvailableRString,
				(unsigned ) pFromFpga->data & WaveformsAvailableMask);
	break;

    case BanyanStatusRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_BanyanStatusR,
				(pFromFpga->data & BanyanStatusMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanStatusRString,
				(unsigned ) pFromFpga->data & BanyanStatusMask);
	break;

    case SlowChainOutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SlowChainOutR,
				(pFromFpga->data & SlowChainOutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SlowChainOutRString,
				(unsigned ) pFromFpga->data & SlowChainOutMask);
	break;

    case TraceStatus1RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceStatus1R,
				(pFromFpga->data & TraceStatus1Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus1RString,
				(unsigned ) pFromFpga->data & TraceStatus1Mask);
	break;

    case TraceStatus2RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceStatus2R,
				(pFromFpga->data & TraceStatus2Mask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus2RString,
				(unsigned ) pFromFpga->data & TraceStatus2Mask);
	break;

    case LlrfCircleReadyRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LlrfCircleReadyR,
				(pFromFpga->data & LlrfCircleReadyMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlrfCircleReadyRString,
				(unsigned ) pFromFpga->data & LlrfCircleReadyMask);
	break;

    case IdelayBaseRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IdelayBaseR,
				(pFromFpga->data & IdelayBaseMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayBaseRString,
				(unsigned ) pFromFpga->data & IdelayBaseMask);
	break;

    case HistDoutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_HistDoutR,
				(pFromFpga->data & HistDoutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HistDoutRString,
				(unsigned ) pFromFpga->data & HistDoutMask);
	break;

    case PhasexDoutRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PhasexDoutR,
				(pFromFpga->data & PhasexDoutMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhasexDoutRString,
				(unsigned ) pFromFpga->data & PhasexDoutMask);
	break;

    case BanyanBufRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_BanyanBufR,
				(pFromFpga->data & BanyanBufMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanBufRString,
				(unsigned ) pFromFpga->data & BanyanBufMask);
	break;

    case ScannerResultRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ScannerResultR,
				(pFromFpga->data & ScannerResultMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ScannerResultRString,
				(unsigned ) pFromFpga->data & ScannerResultMask);
	break;

    case TraceIqBufRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((TraceIqBufMask + 1 ) >> 1))? ~TraceIqBufMask : 0;
		status = (asynStatus) setIntegerParam(p_TraceIqBufR,
				(pFromFpga->data & TraceIqBufMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceIqBufRString,
				(unsigned ) pFromFpga->data & TraceIqBufMask);
	break;

    case TraceIBufRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((TraceIBufMask + 1 ) >> 1))? ~TraceIBufMask : 0;
		status = (asynStatus) setIntegerParam(p_TraceIBufR,
				(pFromFpga->data & TraceIBufMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceIBufRString,
				(unsigned ) pFromFpga->data & TraceIBufMask);
	break;

    case TraceQBufRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((TraceQBufMask + 1 ) >> 1))? ~TraceQBufMask : 0;
		status = (asynStatus) setIntegerParam(p_TraceQBufR,
				(pFromFpga->data & TraceQBufMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceQBufRString,
				(unsigned ) pFromFpga->data & TraceQBufMask);
	break;

    case QsfpBufRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_QsfpBufR,
				(pFromFpga->data & QsfpBufMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpBufRString,
				(unsigned ) pFromFpga->data & QsfpBufMask);
	break;

    case LlrfCircleDataRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((LlrfCircleDataMask + 1 ) >> 1))? ~LlrfCircleDataMask : 0;
		status = (asynStatus) setIntegerParam(p_LlrfCircleDataR,
				(pFromFpga->data & LlrfCircleDataMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlrfCircleDataRString,
				(unsigned ) pFromFpga->data & LlrfCircleDataMask);
	break;

    case Shell0SlowDataRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell0SlowDataR,
				(pFromFpga->data & Shell0SlowDataMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0SlowDataRString,
				(unsigned ) pFromFpga->data & Shell0SlowDataMask);
	break;

    case Shell1SlowDataRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell1SlowDataR,
				(pFromFpga->data & Shell1SlowDataMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1SlowDataRString,
				(unsigned ) pFromFpga->data & Shell1SlowDataMask);
	break;

    case NoiseCouplekOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((NoiseCouplekOutMask + 1 ) >> 1))? ~NoiseCouplekOutMask : 0;
		status = (asynStatus) setIntegerParam(p_NoiseCouplekOutR,
				(pFromFpga->data & NoiseCouplekOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				NoiseCouplekOutRString,
				(unsigned ) pFromFpga->data & NoiseCouplekOutMask);
	break;

    case PropConstRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PropConstR,
				(pFromFpga->data & PropConstMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PropConstRString,
				(unsigned ) pFromFpga->data & PropConstMask);
	break;

    case C0Cav4Elecdot0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecdot0KOutMask + 1 ) >> 1))? ~C0Cav4Elecdot0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecdot0KOutR,
				(pFromFpga->data & C0Cav4Elecdot0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecdot0KOutRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecdot0KOutMask);
	break;

    case C0Cav4Elecdot1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecdot1KOutMask + 1 ) >> 1))? ~C0Cav4Elecdot1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecdot1KOutR,
				(pFromFpga->data & C0Cav4Elecdot1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecdot1KOutRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecdot1KOutMask);
	break;

    case Cav0Cav4Elecdot2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0Cav4Elecdot2KOutMask + 1 ) >> 1))? ~Cav0Cav4Elecdot2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0Cav4Elecdot2KOutR,
				(pFromFpga->data & Cav0Cav4Elecdot2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecdot2KOutRString,
				(unsigned ) pFromFpga->data & Cav0Cav4Elecdot2KOutMask);
	break;

    case Digdsprsmcav0Cav4ElecouterProd0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Digdsprsmcav0Cav4ElecouterProd0KOutMask + 1 ) >> 1))? ~Digdsprsmcav0Cav4ElecouterProd0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_Digdsprsmcav0Cav4ElecouterProd0KOutR,
				(pFromFpga->data & Digdsprsmcav0Cav4ElecouterProd0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmcav0Cav4ElecouterProd0KOutRString,
				(unsigned ) pFromFpga->data & Digdsprsmcav0Cav4ElecouterProd0KOutMask);
	break;

    case Cav0Cav4ElecouterProd1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0Cav4ElecouterProd1KOutMask + 1 ) >> 1))? ~Cav0Cav4ElecouterProd1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0Cav4ElecouterProd1KOutR,
				(pFromFpga->data & Cav0Cav4ElecouterProd1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4ElecouterProd1KOutRString,
				(unsigned ) pFromFpga->data & Cav0Cav4ElecouterProd1KOutMask);
	break;

    case C0Cav4ElecouterProd2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4ElecouterProd2KOutMask + 1 ) >> 1))? ~C0Cav4ElecouterProd2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4ElecouterProd2KOutR,
				(pFromFpga->data & C0Cav4ElecouterProd2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecouterProd2KOutRString,
				(unsigned ) pFromFpga->data & C0Cav4ElecouterProd2KOutMask);
	break;

    case Cav0PiezoCouplekOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0PiezoCouplekOutMask + 1 ) >> 1))? ~Cav0PiezoCouplekOutMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0PiezoCouplekOutR,
				(pFromFpga->data & Cav0PiezoCouplekOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0PiezoCouplekOutRString,
				(unsigned ) pFromFpga->data & Cav0PiezoCouplekOutMask);
	break;

    case C1Cav4Elecdot0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecdot0KOutMask + 1 ) >> 1))? ~C1Cav4Elecdot0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecdot0KOutR,
				(pFromFpga->data & C1Cav4Elecdot0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecdot0KOutRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecdot0KOutMask);
	break;

    case Cav1Cav4Elecdot1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav1Cav4Elecdot1KOutMask + 1 ) >> 1))? ~Cav1Cav4Elecdot1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav1Cav4Elecdot1KOutR,
				(pFromFpga->data & Cav1Cav4Elecdot1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecdot1KOutRString,
				(unsigned ) pFromFpga->data & Cav1Cav4Elecdot1KOutMask);
	break;

    case C1Cav4Elecdot2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecdot2KOutMask + 1 ) >> 1))? ~C1Cav4Elecdot2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecdot2KOutR,
				(pFromFpga->data & C1Cav4Elecdot2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecdot2KOutRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecdot2KOutMask);
	break;

    case Rsmcav1Cav4ElecouterProd0KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav1Cav4ElecouterProd0KOutMask + 1 ) >> 1))? ~Rsmcav1Cav4ElecouterProd0KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav1Cav4ElecouterProd0KOutR,
				(pFromFpga->data & Rsmcav1Cav4ElecouterProd0KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4ElecouterProd0KOutRString,
				(unsigned ) pFromFpga->data & Rsmcav1Cav4ElecouterProd0KOutMask);
	break;

    case Cav1Cav4ElecouterProd1KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav1Cav4ElecouterProd1KOutMask + 1 ) >> 1))? ~Cav1Cav4ElecouterProd1KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav1Cav4ElecouterProd1KOutR,
				(pFromFpga->data & Cav1Cav4ElecouterProd1KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4ElecouterProd1KOutRString,
				(unsigned ) pFromFpga->data & Cav1Cav4ElecouterProd1KOutMask);
	break;

    case C1Cav4ElecouterProd2KOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4ElecouterProd2KOutMask + 1 ) >> 1))? ~C1Cav4ElecouterProd2KOutMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4ElecouterProd2KOutR,
				(pFromFpga->data & C1Cav4ElecouterProd2KOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecouterProd2KOutRString,
				(unsigned ) pFromFpga->data & C1Cav4ElecouterProd2KOutMask);
	break;

    case C1PiezoCouplekOutRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1PiezoCouplekOutMask + 1 ) >> 1))? ~C1PiezoCouplekOutMask : 0;
		status = (asynStatus) setIntegerParam(p_C1PiezoCouplekOutR,
				(pFromFpga->data & C1PiezoCouplekOutMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PiezoCouplekOutRString,
				(unsigned ) pFromFpga->data & C1PiezoCouplekOutMask);
	break;

    case C0DelayPcXxxRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DelayPcXxxR,
				(pFromFpga->data & C0DelayPcXxxMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DelayPcXxxRString,
				(unsigned ) pFromFpga->data & C0DelayPcXxxMask);
	break;

    case C1DelayPcXxxRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DelayPcXxxR,
				(pFromFpga->data & C1DelayPcXxxMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DelayPcXxxRString,
				(unsigned ) pFromFpga->data & C1DelayPcXxxMask);
	break;

    case C0DsppiezosfConstsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DsppiezosfConstsR,
				(pFromFpga->data & C0DsppiezosfConstsMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsppiezosfConstsRString,
				(unsigned ) pFromFpga->data & C0DsppiezosfConstsMask);
	break;

    case Rsmshell1DsppiezosfConstsRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Rsmshell1DsppiezosfConstsR,
				(pFromFpga->data & Rsmshell1DsppiezosfConstsMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmshell1DsppiezosfConstsRString,
				(unsigned ) pFromFpga->data & Rsmshell1DsppiezosfConstsMask);
	break;

    case Shell0DspfdbkCorempProccoeffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Shell0DspfdbkCorempProccoeffMask + 1 ) >> 1))? ~Shell0DspfdbkCorempProccoeffMask : 0;
		status = (asynStatus) setIntegerParam(p_Shell0DspfdbkCorempProccoeffR,
				(pFromFpga->data & Shell0DspfdbkCorempProccoeffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProccoeffRString,
				(unsigned ) pFromFpga->data & Shell0DspfdbkCorempProccoeffMask);
	break;

    case C0DspfdbkCorempProclimRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DspfdbkCorempProclimMask + 1 ) >> 1))? ~C0DspfdbkCorempProclimMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DspfdbkCorempProclimR,
				(pFromFpga->data & C0DspfdbkCorempProclimMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProclimRString,
				(unsigned ) pFromFpga->data & C0DspfdbkCorempProclimMask);
	break;

    case C0DspfdbkCorempProcsetmp0RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~C0DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DspfdbkCorempProcsetmp0R,
				(pFromFpga->data & C0DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp0RString,
				(unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
	break;

    case C0DspfdbkCorempProcsetmp1RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~C0DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DspfdbkCorempProcsetmp1R,
				(pFromFpga->data & C0DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp1RString,
				(unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
	break;

    case C0DspfdbkCorempProcsetmp2RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~C0DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DspfdbkCorempProcsetmp2R,
				(pFromFpga->data & C0DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp2RString,
				(unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
	break;

    case C0DspfdbkCorempProcsetmp3RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~C0DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DspfdbkCorempProcsetmp3R,
				(pFromFpga->data & C0DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp3RString,
				(unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
	break;

    case Digdsprsmshell1DspfdbkCorempProccoeffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Digdsprsmshell1DspfdbkCorempProccoeffMask + 1 ) >> 1))? ~Digdsprsmshell1DspfdbkCorempProccoeffMask : 0;
		status = (asynStatus) setIntegerParam(p_Digdsprsmshell1DspfdbkCorempProccoeffR,
				(pFromFpga->data & Digdsprsmshell1DspfdbkCorempProccoeffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmshell1DspfdbkCorempProccoeffRString,
				(unsigned ) pFromFpga->data & Digdsprsmshell1DspfdbkCorempProccoeffMask);
	break;

    case C1DspfdbkCorempProclimRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1DspfdbkCorempProclimMask + 1 ) >> 1))? ~C1DspfdbkCorempProclimMask : 0;
		status = (asynStatus) setIntegerParam(p_C1DspfdbkCorempProclimR,
				(pFromFpga->data & C1DspfdbkCorempProclimMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProclimRString,
				(unsigned ) pFromFpga->data & C1DspfdbkCorempProclimMask);
	break;

    case Shell1DspfdbkCorempProcsetmp0RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Shell1DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~Shell1DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_Shell1DspfdbkCorempProcsetmp0R,
				(pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp0RString,
				(unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
	break;

    case Shell1DspfdbkCorempProcsetmp1RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Shell1DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~Shell1DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_Shell1DspfdbkCorempProcsetmp1R,
				(pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp1RString,
				(unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
	break;

    case Shell1DspfdbkCorempProcsetmp2RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Shell1DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~Shell1DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_Shell1DspfdbkCorempProcsetmp2R,
				(pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp2RString,
				(unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
	break;

    case Shell1DspfdbkCorempProcsetmp3RAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Shell1DspfdbkCorempProcsetmpMask + 1 ) >> 1))? ~Shell1DspfdbkCorempProcsetmpMask : 0;
		status = (asynStatus) setIntegerParam(p_Shell1DspfdbkCorempProcsetmp3R,
				(pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp3RString,
				(unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
	break;

    case C0Cav4ElecdriveCoupleoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4ElecdriveCoupleoutCouplingMask + 1 ) >> 1))? ~C0Cav4ElecdriveCoupleoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4ElecdriveCoupleoutCouplingR,
				(pFromFpga->data & C0Cav4ElecdriveCoupleoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecdriveCoupleoutCouplingRString,
				(unsigned ) pFromFpga->data & C0Cav4ElecdriveCoupleoutCouplingMask);
	break;

    case Rsmcav0Cav4ElecdriveCoupleophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav0Cav4ElecdriveCoupleophoffMask + 1 ) >> 1))? ~Rsmcav0Cav4ElecdriveCoupleophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav0Cav4ElecdriveCoupleophoffR,
				(pFromFpga->data & Rsmcav0Cav4ElecdriveCoupleophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4ElecdriveCoupleophoffRString,
				(unsigned ) pFromFpga->data & Rsmcav0Cav4ElecdriveCoupleophoffMask);
	break;

    case Cav0Cav4Elecmode0OcoupoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0Cav4Elecmode0OcoupoutCouplingMask + 1 ) >> 1))? ~Cav0Cav4Elecmode0OcoupoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0Cav4Elecmode0OcoupoutCouplingR,
				(pFromFpga->data & Cav0Cav4Elecmode0OcoupoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode0OcoupoutCouplingRString,
				(unsigned ) pFromFpga->data & Cav0Cav4Elecmode0OcoupoutCouplingMask);
	break;

    case Rsmcav0Cav4Elecmode0OcoupophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav0Cav4Elecmode0OcoupophoffMask + 1 ) >> 1))? ~Rsmcav0Cav4Elecmode0OcoupophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav0Cav4Elecmode0OcoupophoffR,
				(pFromFpga->data & Rsmcav0Cav4Elecmode0OcoupophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4Elecmode0OcoupophoffRString,
				(unsigned ) pFromFpga->data & Rsmcav0Cav4Elecmode0OcoupophoffMask);
	break;

    case Cav0Cav4Elecmode1OcoupoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0Cav4Elecmode1OcoupoutCouplingMask + 1 ) >> 1))? ~Cav0Cav4Elecmode1OcoupoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0Cav4Elecmode1OcoupoutCouplingR,
				(pFromFpga->data & Cav0Cav4Elecmode1OcoupoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1OcoupoutCouplingRString,
				(unsigned ) pFromFpga->data & Cav0Cav4Elecmode1OcoupoutCouplingMask);
	break;

    case Cav0Cav4Elecmode1OcoupophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0Cav4Elecmode1OcoupophoffMask + 1 ) >> 1))? ~Cav0Cav4Elecmode1OcoupophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0Cav4Elecmode1OcoupophoffR,
				(pFromFpga->data & Cav0Cav4Elecmode1OcoupophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1OcoupophoffRString,
				(unsigned ) pFromFpga->data & Cav0Cav4Elecmode1OcoupophoffMask);
	break;

    case C0Cav4Elecmode2OcoupoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecmode2OcoupoutCouplingMask + 1 ) >> 1))? ~C0Cav4Elecmode2OcoupoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecmode2OcoupoutCouplingR,
				(pFromFpga->data & C0Cav4Elecmode2OcoupoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2OcoupoutCouplingRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecmode2OcoupoutCouplingMask);
	break;

    case C0Cav4Elecmode2OcoupophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecmode2OcoupophoffMask + 1 ) >> 1))? ~C0Cav4Elecmode2OcoupophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecmode2OcoupophoffR,
				(pFromFpga->data & C0Cav4Elecmode2OcoupophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2OcoupophoffRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecmode2OcoupophoffMask);
	break;

    case Cav1Cav4ElecdriveCoupleoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav1Cav4ElecdriveCoupleoutCouplingMask + 1 ) >> 1))? ~Cav1Cav4ElecdriveCoupleoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav1Cav4ElecdriveCoupleoutCouplingR,
				(pFromFpga->data & Cav1Cav4ElecdriveCoupleoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4ElecdriveCoupleoutCouplingRString,
				(unsigned ) pFromFpga->data & Cav1Cav4ElecdriveCoupleoutCouplingMask);
	break;

    case C1Cav4ElecdriveCoupleophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4ElecdriveCoupleophoffMask + 1 ) >> 1))? ~C1Cav4ElecdriveCoupleophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4ElecdriveCoupleophoffR,
				(pFromFpga->data & C1Cav4ElecdriveCoupleophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecdriveCoupleophoffRString,
				(unsigned ) pFromFpga->data & C1Cav4ElecdriveCoupleophoffMask);
	break;

    case C1Cav4Elecmode0OcoupoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecmode0OcoupoutCouplingMask + 1 ) >> 1))? ~C1Cav4Elecmode0OcoupoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecmode0OcoupoutCouplingR,
				(pFromFpga->data & C1Cav4Elecmode0OcoupoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0OcoupoutCouplingRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecmode0OcoupoutCouplingMask);
	break;

    case Cav1Cav4Elecmode0OcoupophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav1Cav4Elecmode0OcoupophoffMask + 1 ) >> 1))? ~Cav1Cav4Elecmode0OcoupophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav1Cav4Elecmode0OcoupophoffR,
				(pFromFpga->data & Cav1Cav4Elecmode0OcoupophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode0OcoupophoffRString,
				(unsigned ) pFromFpga->data & Cav1Cav4Elecmode0OcoupophoffMask);
	break;

    case Cav1Cav4Elecmode1OcoupoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav1Cav4Elecmode1OcoupoutCouplingMask + 1 ) >> 1))? ~Cav1Cav4Elecmode1OcoupoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav1Cav4Elecmode1OcoupoutCouplingR,
				(pFromFpga->data & Cav1Cav4Elecmode1OcoupoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode1OcoupoutCouplingRString,
				(unsigned ) pFromFpga->data & Cav1Cav4Elecmode1OcoupoutCouplingMask);
	break;

    case C1Cav4Elecmode1OcoupophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecmode1OcoupophoffMask + 1 ) >> 1))? ~C1Cav4Elecmode1OcoupophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecmode1OcoupophoffR,
				(pFromFpga->data & C1Cav4Elecmode1OcoupophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1OcoupophoffRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecmode1OcoupophoffMask);
	break;

    case Rsmcav1Cav4Elecmode2OcoupoutCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav1Cav4Elecmode2OcoupoutCouplingMask + 1 ) >> 1))? ~Rsmcav1Cav4Elecmode2OcoupoutCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav1Cav4Elecmode2OcoupoutCouplingR,
				(pFromFpga->data & Rsmcav1Cav4Elecmode2OcoupoutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode2OcoupoutCouplingRString,
				(unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode2OcoupoutCouplingMask);
	break;

    case C1Cav4Elecmode2OcoupophoffRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecmode2OcoupophoffMask + 1 ) >> 1))? ~C1Cav4Elecmode2OcoupophoffMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecmode2OcoupophoffR,
				(pFromFpga->data & C1Cav4Elecmode2OcoupophoffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode2OcoupophoffRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecmode2OcoupophoffMask);
	break;

    case Digdsprsmshell0DsplpNotchlp1AkxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Digdsprsmshell0DsplpNotchlp1AkxMask + 1 ) >> 1))? ~Digdsprsmshell0DsplpNotchlp1AkxMask : 0;
		status = (asynStatus) setIntegerParam(p_Digdsprsmshell0DsplpNotchlp1AkxR,
				(pFromFpga->data & Digdsprsmshell0DsplpNotchlp1AkxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmshell0DsplpNotchlp1AkxRString,
				(unsigned ) pFromFpga->data & Digdsprsmshell0DsplpNotchlp1AkxMask);
	break;

    case C0DsplpNotchlp1AkyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DsplpNotchlp1AkyMask + 1 ) >> 1))? ~C0DsplpNotchlp1AkyMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DsplpNotchlp1AkyR,
				(pFromFpga->data & C0DsplpNotchlp1AkyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsplpNotchlp1AkyRString,
				(unsigned ) pFromFpga->data & C0DsplpNotchlp1AkyMask);
	break;

    case Rsmshell0DsplpNotchlp1BkxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmshell0DsplpNotchlp1BkxMask + 1 ) >> 1))? ~Rsmshell0DsplpNotchlp1BkxMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmshell0DsplpNotchlp1BkxR,
				(pFromFpga->data & Rsmshell0DsplpNotchlp1BkxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmshell0DsplpNotchlp1BkxRString,
				(unsigned ) pFromFpga->data & Rsmshell0DsplpNotchlp1BkxMask);
	break;

    case C0DsplpNotchlp1BkyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DsplpNotchlp1BkyMask + 1 ) >> 1))? ~C0DsplpNotchlp1BkyMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DsplpNotchlp1BkyR,
				(pFromFpga->data & C0DsplpNotchlp1BkyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsplpNotchlp1BkyRString,
				(unsigned ) pFromFpga->data & C0DsplpNotchlp1BkyMask);
	break;

    case C1DsplpNotchlp1AkxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1DsplpNotchlp1AkxMask + 1 ) >> 1))? ~C1DsplpNotchlp1AkxMask : 0;
		status = (asynStatus) setIntegerParam(p_C1DsplpNotchlp1AkxR,
				(pFromFpga->data & C1DsplpNotchlp1AkxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1AkxRString,
				(unsigned ) pFromFpga->data & C1DsplpNotchlp1AkxMask);
	break;

    case Atopdigdsprsmshell1DsplpNotchlp1AkyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Atopdigdsprsmshell1DsplpNotchlp1AkyMask + 1 ) >> 1))? ~Atopdigdsprsmshell1DsplpNotchlp1AkyMask : 0;
		status = (asynStatus) setIntegerParam(p_Atopdigdsprsmshell1DsplpNotchlp1AkyR,
				(pFromFpga->data & Atopdigdsprsmshell1DsplpNotchlp1AkyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmshell1DsplpNotchlp1AkyRString,
				(unsigned ) pFromFpga->data & Atopdigdsprsmshell1DsplpNotchlp1AkyMask);
	break;

    case C1DsplpNotchlp1BkxRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1DsplpNotchlp1BkxMask + 1 ) >> 1))? ~C1DsplpNotchlp1BkxMask : 0;
		status = (asynStatus) setIntegerParam(p_C1DsplpNotchlp1BkxR,
				(pFromFpga->data & C1DsplpNotchlp1BkxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1BkxRString,
				(unsigned ) pFromFpga->data & C1DsplpNotchlp1BkxMask);
	break;

    case C1DsplpNotchlp1BkyRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1DsplpNotchlp1BkyMask + 1 ) >> 1))? ~C1DsplpNotchlp1BkyMask : 0;
		status = (asynStatus) setIntegerParam(p_C1DsplpNotchlp1BkyR,
				(pFromFpga->data & C1DsplpNotchlp1BkyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1BkyRString,
				(unsigned ) pFromFpga->data & C1DsplpNotchlp1BkyMask);
	break;

    case AdcMmcmRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcMmcmR,
				(pFromFpga->data & AdcMmcmMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmRString,
				(unsigned ) pFromFpga->data & AdcMmcmMask);
	break;

    case U15SpiDataAddrRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U15SpiDataAddrRR,
				(pFromFpga->data & U15SpiDataAddrRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiDataAddrRRString,
				(unsigned ) pFromFpga->data & U15SpiDataAddrRMask);
	break;

    case U15SpiReadAndStartRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U15SpiReadAndStartRR,
				(pFromFpga->data & U15SpiReadAndStartRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiReadAndStartRRString,
				(unsigned ) pFromFpga->data & U15SpiReadAndStartRMask);
	break;

    case Digcfgu18SpiDataAddrRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Digcfgu18SpiDataAddrRR,
				(pFromFpga->data & Digcfgu18SpiDataAddrRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu18SpiDataAddrRRString,
				(unsigned ) pFromFpga->data & Digcfgu18SpiDataAddrRMask);
	break;

    case Digcfgu18SpiReadAndStartRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Digcfgu18SpiReadAndStartRR,
				(pFromFpga->data & Digcfgu18SpiReadAndStartRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu18SpiReadAndStartRRString,
				(unsigned ) pFromFpga->data & Digcfgu18SpiReadAndStartRMask);
	break;

    case Atopdigcfgu2ClkResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Atopdigcfgu2ClkResetRR,
				(pFromFpga->data & Atopdigcfgu2ClkResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigcfgu2ClkResetRRString,
				(unsigned ) pFromFpga->data & Atopdigcfgu2ClkResetRMask);
	break;

    case U2IserdesResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U2IserdesResetRR,
				(pFromFpga->data & U2IserdesResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2IserdesResetRRString,
				(unsigned ) pFromFpga->data & U2IserdesResetRMask);
	break;

    case U3ClkResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U3ClkResetRR,
				(pFromFpga->data & U3ClkResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3ClkResetRRString,
				(unsigned ) pFromFpga->data & U3ClkResetRMask);
	break;

    case U3IserdesResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_U3IserdesResetRR,
				(pFromFpga->data & U3IserdesResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3IserdesResetRRString,
				(unsigned ) pFromFpga->data & U3IserdesResetRMask);
	break;

    case Digcfgu4ResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Digcfgu4ResetRR,
				(pFromFpga->data & Digcfgu4ResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu4ResetRRString,
				(unsigned ) pFromFpga->data & Digcfgu4ResetRMask);
	break;

    case BanyanMaskRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_BanyanMaskR,
				(pFromFpga->data & BanyanMaskMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanMaskRString,
				(unsigned ) pFromFpga->data & BanyanMaskMask);
	break;

    case BitslipRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_BitslipR,
				(pFromFpga->data & BitslipMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BitslipRString,
				(unsigned ) pFromFpga->data & BitslipMask);
	break;

    case ClkStatusWeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ClkStatusWeR,
				(pFromFpga->data & ClkStatusWeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkStatusWeRString,
				(unsigned ) pFromFpga->data & ClkStatusWeMask);
	break;

    case DigcfgidelayctrlResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigcfgidelayctrlResetRR,
				(pFromFpga->data & DigcfgidelayctrlResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgidelayctrlResetRRString,
				(unsigned ) pFromFpga->data & DigcfgidelayctrlResetRMask);
	break;

    case LlspiWeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LlspiWeR,
				(pFromFpga->data & LlspiWeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiWeRString,
				(unsigned ) pFromFpga->data & LlspiWeMask);
	break;

    case MmcmResetRRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_MmcmResetRR,
				(pFromFpga->data & MmcmResetRMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				MmcmResetRRString,
				(unsigned ) pFromFpga->data & MmcmResetRMask);
	break;

    case PeriphConfigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PeriphConfigR,
				(pFromFpga->data & PeriphConfigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PeriphConfigRString,
				(unsigned ) pFromFpga->data & PeriphConfigMask);
	break;

    case PhasexTrigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PhasexTrigR,
				(pFromFpga->data & PhasexTrigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhasexTrigRString,
				(unsigned ) pFromFpga->data & PhasexTrigMask);
	break;

    case DigcfgrawadcTrigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigcfgrawadcTrigR,
				(pFromFpga->data & DigcfgrawadcTrigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgrawadcTrigRString,
				(unsigned ) pFromFpga->data & DigcfgrawadcTrigMask);
	break;

    case ScanTriggerWeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ScanTriggerWeR,
				(pFromFpga->data & ScanTriggerWeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ScanTriggerWeRString,
				(unsigned ) pFromFpga->data & ScanTriggerWeMask);
	break;

    case ScannerDebugRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_ScannerDebugR,
				(pFromFpga->data & ScannerDebugMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ScannerDebugRString,
				(unsigned ) pFromFpga->data & ScannerDebugMask);
	break;

    case SyncAd7794CsetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SyncAd7794CsetR,
				(pFromFpga->data & SyncAd7794CsetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SyncAd7794CsetRString,
				(unsigned ) pFromFpga->data & SyncAd7794CsetMask);
	break;

    case DigcfgsyncTps62210CsetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigcfgsyncTps62210CsetR,
				(pFromFpga->data & DigcfgsyncTps62210CsetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgsyncTps62210CsetRString,
				(unsigned ) pFromFpga->data & DigcfgsyncTps62210CsetMask);
	break;

    case AdcTestModeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestModeR,
				(pFromFpga->data & AdcTestModeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestModeRString,
				(unsigned ) pFromFpga->data & AdcTestModeMask);
	break;

    case AdcTestResetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AdcTestResetR,
				(pFromFpga->data & AdcTestResetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestResetRString,
				(unsigned ) pFromFpga->data & AdcTestResetMask);
	break;

    case DigdspamplitudeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigdspamplitudeR,
				(pFromFpga->data & DigdspamplitudeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspamplitudeRString,
				(unsigned ) pFromFpga->data & DigdspamplitudeMask);
	break;

    case AverageLenRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AverageLenR,
				(pFromFpga->data & AverageLenMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AverageLenRString,
				(unsigned ) pFromFpga->data & AverageLenMask);
	break;

    case BufTrigRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_BufTrigR,
				(pFromFpga->data & BufTrigMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BufTrigRString,
				(unsigned ) pFromFpga->data & BufTrigMask);
	break;

    case CicPeriodRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CicPeriodR,
				(pFromFpga->data & CicPeriodMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CicPeriodRString,
				(unsigned ) pFromFpga->data & CicPeriodMask);
	break;

    case CicShiftRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CicShiftR,
				(pFromFpga->data & CicShiftMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CicShiftRString,
				(unsigned ) pFromFpga->data & CicShiftMask);
	break;

    case CircleBufFlipRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CircleBufFlipR,
				(pFromFpga->data & CircleBufFlipMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CircleBufFlipRString,
				(unsigned ) pFromFpga->data & CircleBufFlipMask);
	break;

    case DacDdsResetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DacDdsResetR,
				(pFromFpga->data & DacDdsResetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DacDdsResetRString,
				(unsigned ) pFromFpga->data & DacDdsResetMask);
	break;

    case DigdspdacModeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigdspdacModeR,
				(pFromFpga->data & DigdspdacModeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspdacModeRString,
				(unsigned ) pFromFpga->data & DigdspdacModeMask);
	break;

    case DdsaModuloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DdsaModuloR,
				(pFromFpga->data & DdsaModuloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DdsaModuloRString,
				(unsigned ) pFromFpga->data & DdsaModuloMask);
	break;

    case DdsaPhstepHRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DdsaPhstepHR,
				(pFromFpga->data & DdsaPhstepHMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DdsaPhstepHRString,
				(unsigned ) pFromFpga->data & DdsaPhstepHMask);
	break;

    case DigdspddsaPhstepLRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigdspddsaPhstepLR,
				(pFromFpga->data & DigdspddsaPhstepLMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspddsaPhstepLRString,
				(unsigned ) pFromFpga->data & DigdspddsaPhstepLMask);
	break;

    case HistCountWStrobeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_HistCountWStrobeR,
				(pFromFpga->data & HistCountWStrobeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HistCountWStrobeRString,
				(unsigned ) pFromFpga->data & HistCountWStrobeMask);
	break;

    case LlrfDspDacEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LlrfDspDacEnR,
				(pFromFpga->data & LlrfDspDacEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlrfDspDacEnRString,
				(unsigned ) pFromFpga->data & LlrfDspDacEnMask);
	break;

    case LoAmpRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_LoAmpR,
				(pFromFpga->data & LoAmpMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LoAmpRString,
				(unsigned ) pFromFpga->data & LoAmpMask);
	break;

    case DigdspmoduloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigdspmoduloR,
				(pFromFpga->data & DigdspmoduloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspmoduloRString,
				(unsigned ) pFromFpga->data & DigdspmoduloMask);
	break;

    case DigdspphaseStepHRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigdspphaseStepHR,
				(pFromFpga->data & DigdspphaseStepHMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspphaseStepHRString,
				(unsigned ) pFromFpga->data & DigdspphaseStepHMask);
	break;

    case PhaseStepLRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PhaseStepLR,
				(pFromFpga->data & PhaseStepLMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhaseStepLRString,
				(unsigned ) pFromFpga->data & PhaseStepLMask);
	break;

    case CavSelRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_CavSelR,
				(pFromFpga->data & CavSelMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CavSelRString,
				(unsigned ) pFromFpga->data & CavSelMask);
	break;

    case PrlCfgRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_PrlCfgR,
				(pFromFpga->data & PrlCfgMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PrlCfgRString,
				(unsigned ) pFromFpga->data & PrlCfgMask);
	break;

    case PrcDspprlGainRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((PrcDspprlGainMask + 1 ) >> 1))? ~PrcDspprlGainMask : 0;
		status = (asynStatus) setIntegerParam(p_PrcDspprlGainR,
				(pFromFpga->data & PrcDspprlGainMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PrcDspprlGainRString,
				(unsigned ) pFromFpga->data & PrcDspprlGainMask);
	break;

    case Beam0ModuloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Beam0ModuloR,
				(pFromFpga->data & Beam0ModuloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Beam0ModuloRString,
				(unsigned ) pFromFpga->data & Beam0ModuloMask);
	break;

    case Rsmbeam0PhaseInitRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Rsmbeam0PhaseInitR,
				(pFromFpga->data & Rsmbeam0PhaseInitMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmbeam0PhaseInitRString,
				(unsigned ) pFromFpga->data & Rsmbeam0PhaseInitMask);
	break;

    case C0PhaseStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0PhaseStepR,
				(pFromFpga->data & C0PhaseStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0PhaseStepRString,
				(unsigned ) pFromFpga->data & C0PhaseStepMask);
	break;

    case C1ModuloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1ModuloR,
				(pFromFpga->data & C1ModuloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1ModuloRString,
				(unsigned ) pFromFpga->data & C1ModuloMask);
	break;

    case C1PhaseInitRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1PhaseInitR,
				(pFromFpga->data & C1PhaseInitMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PhaseInitRString,
				(unsigned ) pFromFpga->data & C1PhaseInitMask);
	break;

    case Rsmbeam1PhaseStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Rsmbeam1PhaseStepR,
				(pFromFpga->data & Rsmbeam1PhaseStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmbeam1PhaseStepRString,
				(unsigned ) pFromFpga->data & Rsmbeam1PhaseStepMask);
	break;

    case Cav4MechprngivaRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Cav4MechprngivaR,
				(pFromFpga->data & Cav4MechprngivaMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav4MechprngivaRString,
				(unsigned ) pFromFpga->data & Cav4MechprngivaMask);
	break;

    case Rsmcav4MechprngivbRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Rsmcav4MechprngivbR,
				(pFromFpga->data & Rsmcav4MechprngivbMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav4MechprngivbRString,
				(unsigned ) pFromFpga->data & Rsmcav4MechprngivbMask);
	break;

    case Cav4MechprngrandomRunRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Cav4MechprngrandomRunR,
				(pFromFpga->data & Cav4MechprngrandomRunMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav4MechprngrandomRunRString,
				(unsigned ) pFromFpga->data & Cav4MechprngrandomRunMask);
	break;

    case Cav0ACavoffsRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0ACavoffsMask + 1 ) >> 1))? ~Cav0ACavoffsMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0ACavoffsR,
				(pFromFpga->data & Cav0ACavoffsMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0ACavoffsRString,
				(unsigned ) pFromFpga->data & Cav0ACavoffsMask);
	break;

    case C0AForoffsRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0AForoffsMask + 1 ) >> 1))? ~C0AForoffsMask : 0;
		status = (asynStatus) setIntegerParam(p_C0AForoffsR,
				(pFromFpga->data & C0AForoffsMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0AForoffsRString,
				(unsigned ) pFromFpga->data & C0AForoffsMask);
	break;

    case C0ARfloffsRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0ARfloffsMask + 1 ) >> 1))? ~C0ARfloffsMask : 0;
		status = (asynStatus) setIntegerParam(p_C0ARfloffsR,
				(pFromFpga->data & C0ARfloffsMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0ARfloffsRString,
				(unsigned ) pFromFpga->data & C0ARfloffsMask);
	break;

    case C0AmpLpbwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0AmpLpbwMask + 1 ) >> 1))? ~C0AmpLpbwMask : 0;
		status = (asynStatus) setIntegerParam(p_C0AmpLpbwR,
				(pFromFpga->data & C0AmpLpbwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0AmpLpbwRString,
				(unsigned ) pFromFpga->data & C0AmpLpbwMask);
	break;

    case C0Cav4Elecfq0CoarseFreqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecfq0CoarseFreqMask + 1 ) >> 1))? ~C0Cav4Elecfq0CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecfq0CoarseFreqR,
				(pFromFpga->data & C0Cav4Elecfq0CoarseFreqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq0CoarseFreqRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecfq0CoarseFreqMask);
	break;

    case C0Cav4Elecfq1CoarseFreqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecfq1CoarseFreqMask + 1 ) >> 1))? ~C0Cav4Elecfq1CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecfq1CoarseFreqR,
				(pFromFpga->data & C0Cav4Elecfq1CoarseFreqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq1CoarseFreqRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecfq1CoarseFreqMask);
	break;

    case C0Cav4Elecfq2CoarseFreqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecfq2CoarseFreqMask + 1 ) >> 1))? ~C0Cav4Elecfq2CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecfq2CoarseFreqR,
				(pFromFpga->data & C0Cav4Elecfq2CoarseFreqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq2CoarseFreqRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecfq2CoarseFreqMask);
	break;

    case Rsmcav0Cav4Elecmode0BeamCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav0Cav4Elecmode0BeamCouplingMask + 1 ) >> 1))? ~Rsmcav0Cav4Elecmode0BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav0Cav4Elecmode0BeamCouplingR,
				(pFromFpga->data & Rsmcav0Cav4Elecmode0BeamCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4Elecmode0BeamCouplingRString,
				(unsigned ) pFromFpga->data & Rsmcav0Cav4Elecmode0BeamCouplingMask);
	break;

    case C0Cav4Elecmode0BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecmode0BwMask + 1 ) >> 1))? ~C0Cav4Elecmode0BwMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecmode0BwR,
				(pFromFpga->data & C0Cav4Elecmode0BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode0BwRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecmode0BwMask);
	break;

    case C0Cav4Elecmode0DriveCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecmode0DriveCouplingMask + 1 ) >> 1))? ~C0Cav4Elecmode0DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecmode0DriveCouplingR,
				(pFromFpga->data & C0Cav4Elecmode0DriveCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode0DriveCouplingRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecmode0DriveCouplingMask);
	break;

    case Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask + 1 ) >> 1))? ~Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingR,
				(pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingRString,
				(unsigned ) pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask);
	break;

    case Cav0Cav4Elecmode1BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav0Cav4Elecmode1BwMask + 1 ) >> 1))? ~Cav0Cav4Elecmode1BwMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav0Cav4Elecmode1BwR,
				(pFromFpga->data & Cav0Cav4Elecmode1BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1BwRString,
				(unsigned ) pFromFpga->data & Cav0Cav4Elecmode1BwMask);
	break;

    case C0Cav4Elecmode1DriveCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecmode1DriveCouplingMask + 1 ) >> 1))? ~C0Cav4Elecmode1DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecmode1DriveCouplingR,
				(pFromFpga->data & C0Cav4Elecmode1DriveCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode1DriveCouplingRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecmode1DriveCouplingMask);
	break;

    case Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask + 1 ) >> 1))? ~Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingR,
				(pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingRString,
				(unsigned ) pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask);
	break;

    case C0Cav4Elecmode2BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecmode2BwMask + 1 ) >> 1))? ~C0Cav4Elecmode2BwMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecmode2BwR,
				(pFromFpga->data & C0Cav4Elecmode2BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2BwRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecmode2BwMask);
	break;

    case C0Cav4Elecmode2DriveCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0Cav4Elecmode2DriveCouplingMask + 1 ) >> 1))? ~C0Cav4Elecmode2DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C0Cav4Elecmode2DriveCouplingR,
				(pFromFpga->data & C0Cav4Elecmode2DriveCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2DriveCouplingRString,
				(unsigned ) pFromFpga->data & C0Cav4Elecmode2DriveCouplingMask);
	break;

    case C0Cav4ElecmoduloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0Cav4ElecmoduloR,
				(pFromFpga->data & C0Cav4ElecmoduloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecmoduloRString,
				(unsigned ) pFromFpga->data & C0Cav4ElecmoduloMask);
	break;

    case Cav0Cav4ElecphaseStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Cav0Cav4ElecphaseStepR,
				(pFromFpga->data & Cav0Cav4ElecphaseStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4ElecphaseStepRString,
				(unsigned ) pFromFpga->data & Cav0Cav4ElecphaseStepMask);
	break;

    case C0ComprsatCtlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0ComprsatCtlR,
				(pFromFpga->data & C0ComprsatCtlMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0ComprsatCtlRString,
				(unsigned ) pFromFpga->data & C0ComprsatCtlMask);
	break;

    case Cav0PrngivaRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Cav0PrngivaR,
				(pFromFpga->data & Cav0PrngivaMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0PrngivaRString,
				(unsigned ) pFromFpga->data & Cav0PrngivaMask);
	break;

    case C0PrngivbRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0PrngivbR,
				(pFromFpga->data & C0PrngivbMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0PrngivbRString,
				(unsigned ) pFromFpga->data & C0PrngivbMask);
	break;

    case C0PrngrandomRunRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0PrngrandomRunR,
				(pFromFpga->data & C0PrngrandomRunMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0PrngrandomRunRString,
				(unsigned ) pFromFpga->data & C0PrngrandomRunMask);
	break;

    case C1ACavoffsRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1ACavoffsMask + 1 ) >> 1))? ~C1ACavoffsMask : 0;
		status = (asynStatus) setIntegerParam(p_C1ACavoffsR,
				(pFromFpga->data & C1ACavoffsMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1ACavoffsRString,
				(unsigned ) pFromFpga->data & C1ACavoffsMask);
	break;

    case Digdsprsmcav1AForoffsRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Digdsprsmcav1AForoffsMask + 1 ) >> 1))? ~Digdsprsmcav1AForoffsMask : 0;
		status = (asynStatus) setIntegerParam(p_Digdsprsmcav1AForoffsR,
				(pFromFpga->data & Digdsprsmcav1AForoffsMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmcav1AForoffsRString,
				(unsigned ) pFromFpga->data & Digdsprsmcav1AForoffsMask);
	break;

    case C1ARfloffsRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1ARfloffsMask + 1 ) >> 1))? ~C1ARfloffsMask : 0;
		status = (asynStatus) setIntegerParam(p_C1ARfloffsR,
				(pFromFpga->data & C1ARfloffsMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1ARfloffsRString,
				(unsigned ) pFromFpga->data & C1ARfloffsMask);
	break;

    case Rsmcav1AmpLpbwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav1AmpLpbwMask + 1 ) >> 1))? ~Rsmcav1AmpLpbwMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav1AmpLpbwR,
				(pFromFpga->data & Rsmcav1AmpLpbwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1AmpLpbwRString,
				(unsigned ) pFromFpga->data & Rsmcav1AmpLpbwMask);
	break;

    case C1Cav4Elecfq0CoarseFreqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecfq0CoarseFreqMask + 1 ) >> 1))? ~C1Cav4Elecfq0CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecfq0CoarseFreqR,
				(pFromFpga->data & C1Cav4Elecfq0CoarseFreqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq0CoarseFreqRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecfq0CoarseFreqMask);
	break;

    case C1Cav4Elecfq1CoarseFreqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecfq1CoarseFreqMask + 1 ) >> 1))? ~C1Cav4Elecfq1CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecfq1CoarseFreqR,
				(pFromFpga->data & C1Cav4Elecfq1CoarseFreqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq1CoarseFreqRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecfq1CoarseFreqMask);
	break;

    case C1Cav4Elecfq2CoarseFreqRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecfq2CoarseFreqMask + 1 ) >> 1))? ~C1Cav4Elecfq2CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecfq2CoarseFreqR,
				(pFromFpga->data & C1Cav4Elecfq2CoarseFreqMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq2CoarseFreqRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecfq2CoarseFreqMask);
	break;

    case C1Cav4Elecmode0BeamCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecmode0BeamCouplingMask + 1 ) >> 1))? ~C1Cav4Elecmode0BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecmode0BeamCouplingR,
				(pFromFpga->data & C1Cav4Elecmode0BeamCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0BeamCouplingRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecmode0BeamCouplingMask);
	break;

    case Cav1Cav4Elecmode0BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav1Cav4Elecmode0BwMask + 1 ) >> 1))? ~Cav1Cav4Elecmode0BwMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav1Cav4Elecmode0BwR,
				(pFromFpga->data & Cav1Cav4Elecmode0BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode0BwRString,
				(unsigned ) pFromFpga->data & Cav1Cav4Elecmode0BwMask);
	break;

    case C1Cav4Elecmode0DriveCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecmode0DriveCouplingMask + 1 ) >> 1))? ~C1Cav4Elecmode0DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecmode0DriveCouplingR,
				(pFromFpga->data & C1Cav4Elecmode0DriveCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0DriveCouplingRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecmode0DriveCouplingMask);
	break;

    case C1Cav4Elecmode1BeamCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecmode1BeamCouplingMask + 1 ) >> 1))? ~C1Cav4Elecmode1BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecmode1BeamCouplingR,
				(pFromFpga->data & C1Cav4Elecmode1BeamCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1BeamCouplingRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecmode1BeamCouplingMask);
	break;

    case Rsmcav1Cav4Elecmode1BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav1Cav4Elecmode1BwMask + 1 ) >> 1))? ~Rsmcav1Cav4Elecmode1BwMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav1Cav4Elecmode1BwR,
				(pFromFpga->data & Rsmcav1Cav4Elecmode1BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode1BwRString,
				(unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode1BwMask);
	break;

    case C1Cav4Elecmode1DriveCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1Cav4Elecmode1DriveCouplingMask + 1 ) >> 1))? ~C1Cav4Elecmode1DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_C1Cav4Elecmode1DriveCouplingR,
				(pFromFpga->data & C1Cav4Elecmode1DriveCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1DriveCouplingRString,
				(unsigned ) pFromFpga->data & C1Cav4Elecmode1DriveCouplingMask);
	break;

    case Rsmcav1Cav4Elecmode2BeamCouplingRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Rsmcav1Cav4Elecmode2BeamCouplingMask + 1 ) >> 1))? ~Rsmcav1Cav4Elecmode2BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_Rsmcav1Cav4Elecmode2BeamCouplingR,
				(pFromFpga->data & Rsmcav1Cav4Elecmode2BeamCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode2BeamCouplingRString,
				(unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode2BeamCouplingMask);
	break;

    case Cav1Cav4Elecmode2BwRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Cav1Cav4Elecmode2BwMask + 1 ) >> 1))? ~Cav1Cav4Elecmode2BwMask : 0;
		status = (asynStatus) setIntegerParam(p_Cav1Cav4Elecmode2BwR,
				(pFromFpga->data & Cav1Cav4Elecmode2BwMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode2BwRString,
				(unsigned ) pFromFpga->data & Cav1Cav4Elecmode2BwMask);
	break;

    case C1Cav4ElecmoduloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Cav4ElecmoduloR,
				(pFromFpga->data & C1Cav4ElecmoduloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecmoduloRString,
				(unsigned ) pFromFpga->data & C1Cav4ElecmoduloMask);
	break;

    case C1Cav4ElecphaseStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1Cav4ElecphaseStepR,
				(pFromFpga->data & C1Cav4ElecphaseStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecphaseStepRString,
				(unsigned ) pFromFpga->data & C1Cav4ElecphaseStepMask);
	break;

    case Rsmcav1ComprsatCtlRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Rsmcav1ComprsatCtlR,
				(pFromFpga->data & Rsmcav1ComprsatCtlMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1ComprsatCtlRString,
				(unsigned ) pFromFpga->data & Rsmcav1ComprsatCtlMask);
	break;

    case C1PrngivaRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1PrngivaR,
				(pFromFpga->data & C1PrngivaMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PrngivaRString,
				(unsigned ) pFromFpga->data & C1PrngivaMask);
	break;

    case Cav1PrngivbRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Cav1PrngivbR,
				(pFromFpga->data & Cav1PrngivbMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1PrngivbRString,
				(unsigned ) pFromFpga->data & Cav1PrngivbMask);
	break;

    case C1PrngrandomRunRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1PrngrandomRunR,
				(pFromFpga->data & C1PrngrandomRunMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PrngrandomRunRString,
				(unsigned ) pFromFpga->data & C1PrngrandomRunMask);
	break;

    case RsmdacIqPhaseRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_RsmdacIqPhaseR,
				(pFromFpga->data & RsmdacIqPhaseMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RsmdacIqPhaseRString,
				(unsigned ) pFromFpga->data & RsmdacIqPhaseMask);
	break;

    case C0DspchanKeepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DspchanKeepR,
				(pFromFpga->data & C0DspchanKeepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspchanKeepRString,
				(unsigned ) pFromFpga->data & C0DspchanKeepMask);
	break;

    case C0DspfdbkCorecoarseScaleRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DspfdbkCorecoarseScaleR,
				(pFromFpga->data & C0DspfdbkCorecoarseScaleMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorecoarseScaleRString,
				(unsigned ) pFromFpga->data & C0DspfdbkCorecoarseScaleMask);
	break;

    case Shell0DspfdbkCorempProcphOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((Shell0DspfdbkCorempProcphOffsetMask + 1 ) >> 1))? ~Shell0DspfdbkCorempProcphOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_Shell0DspfdbkCorempProcphOffsetR,
				(pFromFpga->data & Shell0DspfdbkCorempProcphOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProcphOffsetRString,
				(unsigned ) pFromFpga->data & Shell0DspfdbkCorempProcphOffsetMask);
	break;

    case Shell0DspfdbkCorempProcselEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell0DspfdbkCorempProcselEnR,
				(pFromFpga->data & Shell0DspfdbkCorempProcselEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProcselEnRString,
				(unsigned ) pFromFpga->data & Shell0DspfdbkCorempProcselEnMask);
	break;

    case C0DspfdbkCorempProcselThreshRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C0DspfdbkCorempProcselThreshMask + 1 ) >> 1))? ~C0DspfdbkCorempProcselThreshMask : 0;
		status = (asynStatus) setIntegerParam(p_C0DspfdbkCorempProcselThreshR,
				(pFromFpga->data & C0DspfdbkCorempProcselThreshMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcselThreshRString,
				(unsigned ) pFromFpga->data & C0DspfdbkCorempProcselThreshMask);
	break;

    case Shell0DspmoduloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell0DspmoduloR,
				(pFromFpga->data & Shell0DspmoduloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspmoduloRString,
				(unsigned ) pFromFpga->data & Shell0DspmoduloMask);
	break;

    case Shell0DspphaseStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell0DspphaseStepR,
				(pFromFpga->data & Shell0DspphaseStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspphaseStepRString,
				(unsigned ) pFromFpga->data & Shell0DspphaseStepMask);
	break;

    case C0DsppiezopiezoDcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DsppiezopiezoDcR,
				(pFromFpga->data & C0DsppiezopiezoDcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsppiezopiezoDcRString,
				(unsigned ) pFromFpga->data & C0DsppiezopiezoDcMask);
	break;

    case Shell0DsptagRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell0DsptagR,
				(pFromFpga->data & Shell0DsptagMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DsptagRString,
				(unsigned ) pFromFpga->data & Shell0DsptagMask);
	break;

    case C0DspuseFiberIqRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DspuseFiberIqR,
				(pFromFpga->data & C0DspuseFiberIqMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspuseFiberIqRString,
				(unsigned ) pFromFpga->data & C0DspuseFiberIqMask);
	break;

    case C0DspwaveSampPerRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DspwaveSampPerR,
				(pFromFpga->data & C0DspwaveSampPerMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspwaveSampPerRString,
				(unsigned ) pFromFpga->data & C0DspwaveSampPerMask);
	break;

    case C0DspwaveShiftRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C0DspwaveShiftR,
				(pFromFpga->data & C0DspwaveShiftMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspwaveShiftRString,
				(unsigned ) pFromFpga->data & C0DspwaveShiftMask);
	break;

    case Shell1DspchanKeepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell1DspchanKeepR,
				(pFromFpga->data & Shell1DspchanKeepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspchanKeepRString,
				(unsigned ) pFromFpga->data & Shell1DspchanKeepMask);
	break;

    case C1DspfdbkCorecoarseScaleRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DspfdbkCorecoarseScaleR,
				(pFromFpga->data & C1DspfdbkCorecoarseScaleMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorecoarseScaleRString,
				(unsigned ) pFromFpga->data & C1DspfdbkCorecoarseScaleMask);
	break;

    case C1DspfdbkCorempProcphOffsetRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1DspfdbkCorempProcphOffsetMask + 1 ) >> 1))? ~C1DspfdbkCorempProcphOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_C1DspfdbkCorempProcphOffsetR,
				(pFromFpga->data & C1DspfdbkCorempProcphOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcphOffsetRString,
				(unsigned ) pFromFpga->data & C1DspfdbkCorempProcphOffsetMask);
	break;

    case C1DspfdbkCorempProcselEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DspfdbkCorempProcselEnR,
				(pFromFpga->data & C1DspfdbkCorempProcselEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcselEnRString,
				(unsigned ) pFromFpga->data & C1DspfdbkCorempProcselEnMask);
	break;

    case C1DspfdbkCorempProcselThreshRAdr|flagReadMask:
		signExtBits = (pFromFpga->data & ((C1DspfdbkCorempProcselThreshMask + 1 ) >> 1))? ~C1DspfdbkCorempProcselThreshMask : 0;
		status = (asynStatus) setIntegerParam(p_C1DspfdbkCorempProcselThreshR,
				(pFromFpga->data & C1DspfdbkCorempProcselThreshMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcselThreshRString,
				(unsigned ) pFromFpga->data & C1DspfdbkCorempProcselThreshMask);
	break;

    case C1DspmoduloRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DspmoduloR,
				(pFromFpga->data & C1DspmoduloMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspmoduloRString,
				(unsigned ) pFromFpga->data & C1DspmoduloMask);
	break;

    case C1DspphaseStepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DspphaseStepR,
				(pFromFpga->data & C1DspphaseStepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspphaseStepRString,
				(unsigned ) pFromFpga->data & C1DspphaseStepMask);
	break;

    case C1DsppiezopiezoDcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DsppiezopiezoDcR,
				(pFromFpga->data & C1DsppiezopiezoDcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsppiezopiezoDcRString,
				(unsigned ) pFromFpga->data & C1DsppiezopiezoDcMask);
	break;

    case C1DsptagRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DsptagR,
				(pFromFpga->data & C1DsptagMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsptagRString,
				(unsigned ) pFromFpga->data & C1DsptagMask);
	break;

    case C1DspuseFiberIqRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DspuseFiberIqR,
				(pFromFpga->data & C1DspuseFiberIqMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspuseFiberIqRString,
				(unsigned ) pFromFpga->data & C1DspuseFiberIqMask);
	break;

    case C1DspwaveSampPerRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_C1DspwaveSampPerR,
				(pFromFpga->data & C1DspwaveSampPerMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspwaveSampPerRString,
				(unsigned ) pFromFpga->data & C1DspwaveSampPerMask);
	break;

    case Shell1DspwaveShiftRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Shell1DspwaveShiftR,
				(pFromFpga->data & Shell1DspwaveShiftMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspwaveShiftRString,
				(unsigned ) pFromFpga->data & Shell1DspwaveShiftMask);
	break;

    case AtopdigdsprewindRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AtopdigdsprewindR,
				(pFromFpga->data & AtopdigdsprewindMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AtopdigdsprewindRString,
				(unsigned ) pFromFpga->data & AtopdigdsprewindMask);
	break;

    case AmpstepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_AmpstepR,
				(pFromFpga->data & AmpstepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AmpstepRString,
				(unsigned ) pFromFpga->data & AmpstepMask);
	break;

    case SsaStimEnRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SsaStimEnR,
				(pFromFpga->data & SsaStimEnMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimEnRString,
				(unsigned ) pFromFpga->data & SsaStimEnMask);
	break;

    case SsaStimgPeriodRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SsaStimgPeriodR,
				(pFromFpga->data & SsaStimgPeriodMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimgPeriodRString,
				(unsigned ) pFromFpga->data & SsaStimgPeriodMask);
	break;

    case SsaStimpertstepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SsaStimpertstepR,
				(pFromFpga->data & SsaStimpertstepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimpertstepRString,
				(unsigned ) pFromFpga->data & SsaStimpertstepMask);
	break;

    case DigdsptraceKeepRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DigdsptraceKeepR,
				(pFromFpga->data & DigdsptraceKeepMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdsptraceKeepRString,
				(unsigned ) pFromFpga->data & DigdsptraceKeepMask);
	break;

    case TraceResetWeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceResetWeR,
				(pFromFpga->data & TraceResetWeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceResetWeRString,
				(unsigned ) pFromFpga->data & TraceResetWeMask);
	break;

    case TrigInternalRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TrigInternalR,
				(pFromFpga->data & TrigInternalMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TrigInternalRString,
				(unsigned ) pFromFpga->data & TrigInternalMask);
	break;

    case TrigModeRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TrigModeR,
				(pFromFpga->data & TrigModeMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TrigModeRString,
				(unsigned ) pFromFpga->data & TrigModeMask);
	break;

    case Wave0SrcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Wave0SrcR,
				(pFromFpga->data & Wave0SrcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave0SrcRString,
				(unsigned ) pFromFpga->data & Wave0SrcMask);
	break;

    case Wave1SrcRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_Wave1SrcR,
				(pFromFpga->data & Wave1SrcMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave1SrcRString,
				(unsigned ) pFromFpga->data & Wave1SrcMask);
	break;

    case DomainJumpRealignRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_DomainJumpRealignR,
				(pFromFpga->data & DomainJumpRealignMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignRString,
				(unsigned ) pFromFpga->data & DomainJumpRealignMask);
	break;

    case IccCfgRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_IccCfgR,
				(pFromFpga->data & IccCfgMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgRString,
				(unsigned ) pFromFpga->data & IccCfgMask);
	break;

    case QsfpI2CRegRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_QsfpI2CRegR,
				(pFromFpga->data & QsfpI2CRegMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegRString,
				(unsigned ) pFromFpga->data & QsfpI2CRegMask);
	break;

    case SfpAddressSetRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_SfpAddressSetR,
				(pFromFpga->data & SfpAddressSetMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetRString,
				(unsigned ) pFromFpga->data & SfpAddressSetMask);
	break;

    case TagNowRAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TagNowR,
				(pFromFpga->data & TagNowMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowRString,
				(unsigned ) pFromFpga->data & TagNowMask);
		break;

	default:
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		break;
    }

    return status;
}


/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCDriver::processRegWriteResponse(const FpgaReg *pFromFpga)
{
	asynStatus status = asynSuccess;
	epicsInt32 valueSet[maxMsgSize/sizeof(FpgaReg)]; // Put the value sent to the FPGA here for comparison
	epicsInt32 errorCount;
//  variables that may be useful for checking array data
//	asynUser *pAsynArrayUser;
//	unsigned int i;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case NoiseCouplekOutWAdr:
		status = (asynStatus) getIntegerParam(p_NoiseCouplekOutW, valueSet);
		if( (valueSet[0] & NoiseCouplekOutMask) == (pFromFpga->data & NoiseCouplekOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				NoiseCouplekOutWString, (unsigned ) pFromFpga->data & NoiseCouplekOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				NoiseCouplekOutWString, valueSet[0] & NoiseCouplekOutMask, (unsigned ) pFromFpga->data & NoiseCouplekOutMask);
			status = asynError;
			setParamStatus(p_NoiseCouplekOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case PropConstWAdr:
		status = (asynStatus) getIntegerParam(p_PropConstW, valueSet);
		if( (valueSet[0] & PropConstMask) == (pFromFpga->data & PropConstMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PropConstWString, (unsigned ) pFromFpga->data & PropConstMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				PropConstWString, valueSet[0] & PropConstMask, (unsigned ) pFromFpga->data & PropConstMask);
			status = asynError;
			setParamStatus(p_PropConstW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecdot0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecdot0KOutW, valueSet);
		if( (valueSet[0] & C0Cav4Elecdot0KOutMask) == (pFromFpga->data & C0Cav4Elecdot0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecdot0KOutWString, (unsigned ) pFromFpga->data & C0Cav4Elecdot0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecdot0KOutWString, valueSet[0] & C0Cav4Elecdot0KOutMask, (unsigned ) pFromFpga->data & C0Cav4Elecdot0KOutMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecdot0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecdot1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecdot1KOutW, valueSet);
		if( (valueSet[0] & C0Cav4Elecdot1KOutMask) == (pFromFpga->data & C0Cav4Elecdot1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecdot1KOutWString, (unsigned ) pFromFpga->data & C0Cav4Elecdot1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecdot1KOutWString, valueSet[0] & C0Cav4Elecdot1KOutMask, (unsigned ) pFromFpga->data & C0Cav4Elecdot1KOutMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecdot1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0Cav4Elecdot2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0Cav4Elecdot2KOutW, valueSet);
		if( (valueSet[0] & Cav0Cav4Elecdot2KOutMask) == (pFromFpga->data & Cav0Cav4Elecdot2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecdot2KOutWString, (unsigned ) pFromFpga->data & Cav0Cav4Elecdot2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecdot2KOutWString, valueSet[0] & Cav0Cav4Elecdot2KOutMask, (unsigned ) pFromFpga->data & Cav0Cav4Elecdot2KOutMask);
			status = asynError;
			setParamStatus(p_Cav0Cav4Elecdot2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Digdsprsmcav0Cav4ElecouterProd0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_Digdsprsmcav0Cav4ElecouterProd0KOutW, valueSet);
		if( (valueSet[0] & Digdsprsmcav0Cav4ElecouterProd0KOutMask) == (pFromFpga->data & Digdsprsmcav0Cav4ElecouterProd0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmcav0Cav4ElecouterProd0KOutWString, (unsigned ) pFromFpga->data & Digdsprsmcav0Cav4ElecouterProd0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmcav0Cav4ElecouterProd0KOutWString, valueSet[0] & Digdsprsmcav0Cav4ElecouterProd0KOutMask, (unsigned ) pFromFpga->data & Digdsprsmcav0Cav4ElecouterProd0KOutMask);
			status = asynError;
			setParamStatus(p_Digdsprsmcav0Cav4ElecouterProd0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0Cav4ElecouterProd1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0Cav4ElecouterProd1KOutW, valueSet);
		if( (valueSet[0] & Cav0Cav4ElecouterProd1KOutMask) == (pFromFpga->data & Cav0Cav4ElecouterProd1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4ElecouterProd1KOutWString, (unsigned ) pFromFpga->data & Cav0Cav4ElecouterProd1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4ElecouterProd1KOutWString, valueSet[0] & Cav0Cav4ElecouterProd1KOutMask, (unsigned ) pFromFpga->data & Cav0Cav4ElecouterProd1KOutMask);
			status = asynError;
			setParamStatus(p_Cav0Cav4ElecouterProd1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4ElecouterProd2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4ElecouterProd2KOutW, valueSet);
		if( (valueSet[0] & C0Cav4ElecouterProd2KOutMask) == (pFromFpga->data & C0Cav4ElecouterProd2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecouterProd2KOutWString, (unsigned ) pFromFpga->data & C0Cav4ElecouterProd2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecouterProd2KOutWString, valueSet[0] & C0Cav4ElecouterProd2KOutMask, (unsigned ) pFromFpga->data & C0Cav4ElecouterProd2KOutMask);
			status = asynError;
			setParamStatus(p_C0Cav4ElecouterProd2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0PiezoCouplekOutWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0PiezoCouplekOutW, valueSet);
		if( (valueSet[0] & Cav0PiezoCouplekOutMask) == (pFromFpga->data & Cav0PiezoCouplekOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0PiezoCouplekOutWString, (unsigned ) pFromFpga->data & Cav0PiezoCouplekOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0PiezoCouplekOutWString, valueSet[0] & Cav0PiezoCouplekOutMask, (unsigned ) pFromFpga->data & Cav0PiezoCouplekOutMask);
			status = asynError;
			setParamStatus(p_Cav0PiezoCouplekOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecdot0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecdot0KOutW, valueSet);
		if( (valueSet[0] & C1Cav4Elecdot0KOutMask) == (pFromFpga->data & C1Cav4Elecdot0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecdot0KOutWString, (unsigned ) pFromFpga->data & C1Cav4Elecdot0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecdot0KOutWString, valueSet[0] & C1Cav4Elecdot0KOutMask, (unsigned ) pFromFpga->data & C1Cav4Elecdot0KOutMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecdot0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1Cav4Elecdot1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1Cav4Elecdot1KOutW, valueSet);
		if( (valueSet[0] & Cav1Cav4Elecdot1KOutMask) == (pFromFpga->data & Cav1Cav4Elecdot1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecdot1KOutWString, (unsigned ) pFromFpga->data & Cav1Cav4Elecdot1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecdot1KOutWString, valueSet[0] & Cav1Cav4Elecdot1KOutMask, (unsigned ) pFromFpga->data & Cav1Cav4Elecdot1KOutMask);
			status = asynError;
			setParamStatus(p_Cav1Cav4Elecdot1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecdot2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecdot2KOutW, valueSet);
		if( (valueSet[0] & C1Cav4Elecdot2KOutMask) == (pFromFpga->data & C1Cav4Elecdot2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecdot2KOutWString, (unsigned ) pFromFpga->data & C1Cav4Elecdot2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecdot2KOutWString, valueSet[0] & C1Cav4Elecdot2KOutMask, (unsigned ) pFromFpga->data & C1Cav4Elecdot2KOutMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecdot2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav1Cav4ElecouterProd0KOutWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav1Cav4ElecouterProd0KOutW, valueSet);
		if( (valueSet[0] & Rsmcav1Cav4ElecouterProd0KOutMask) == (pFromFpga->data & Rsmcav1Cav4ElecouterProd0KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4ElecouterProd0KOutWString, (unsigned ) pFromFpga->data & Rsmcav1Cav4ElecouterProd0KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4ElecouterProd0KOutWString, valueSet[0] & Rsmcav1Cav4ElecouterProd0KOutMask, (unsigned ) pFromFpga->data & Rsmcav1Cav4ElecouterProd0KOutMask);
			status = asynError;
			setParamStatus(p_Rsmcav1Cav4ElecouterProd0KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1Cav4ElecouterProd1KOutWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1Cav4ElecouterProd1KOutW, valueSet);
		if( (valueSet[0] & Cav1Cav4ElecouterProd1KOutMask) == (pFromFpga->data & Cav1Cav4ElecouterProd1KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4ElecouterProd1KOutWString, (unsigned ) pFromFpga->data & Cav1Cav4ElecouterProd1KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4ElecouterProd1KOutWString, valueSet[0] & Cav1Cav4ElecouterProd1KOutMask, (unsigned ) pFromFpga->data & Cav1Cav4ElecouterProd1KOutMask);
			status = asynError;
			setParamStatus(p_Cav1Cav4ElecouterProd1KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4ElecouterProd2KOutWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4ElecouterProd2KOutW, valueSet);
		if( (valueSet[0] & C1Cav4ElecouterProd2KOutMask) == (pFromFpga->data & C1Cav4ElecouterProd2KOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecouterProd2KOutWString, (unsigned ) pFromFpga->data & C1Cav4ElecouterProd2KOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecouterProd2KOutWString, valueSet[0] & C1Cav4ElecouterProd2KOutMask, (unsigned ) pFromFpga->data & C1Cav4ElecouterProd2KOutMask);
			status = asynError;
			setParamStatus(p_C1Cav4ElecouterProd2KOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1PiezoCouplekOutWAdr:
		status = (asynStatus) getIntegerParam(p_C1PiezoCouplekOutW, valueSet);
		if( (valueSet[0] & C1PiezoCouplekOutMask) == (pFromFpga->data & C1PiezoCouplekOutMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PiezoCouplekOutWString, (unsigned ) pFromFpga->data & C1PiezoCouplekOutMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1PiezoCouplekOutWString, valueSet[0] & C1PiezoCouplekOutMask, (unsigned ) pFromFpga->data & C1PiezoCouplekOutMask);
			status = asynError;
			setParamStatus(p_C1PiezoCouplekOutW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DelayPcXxxWAdr:
		status = (asynStatus) getIntegerParam(p_C0DelayPcXxxW, valueSet);
		if( (valueSet[0] & C0DelayPcXxxMask) == (pFromFpga->data & C0DelayPcXxxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DelayPcXxxWString, (unsigned ) pFromFpga->data & C0DelayPcXxxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DelayPcXxxWString, valueSet[0] & C0DelayPcXxxMask, (unsigned ) pFromFpga->data & C0DelayPcXxxMask);
			status = asynError;
			setParamStatus(p_C0DelayPcXxxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DelayPcXxxWAdr:
		status = (asynStatus) getIntegerParam(p_C1DelayPcXxxW, valueSet);
		if( (valueSet[0] & C1DelayPcXxxMask) == (pFromFpga->data & C1DelayPcXxxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DelayPcXxxWString, (unsigned ) pFromFpga->data & C1DelayPcXxxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DelayPcXxxWString, valueSet[0] & C1DelayPcXxxMask, (unsigned ) pFromFpga->data & C1DelayPcXxxMask);
			status = asynError;
			setParamStatus(p_C1DelayPcXxxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DsppiezosfConstsWAdr:
		status = (asynStatus) getIntegerParam(p_C0DsppiezosfConstsW, valueSet);
		if( (valueSet[0] & C0DsppiezosfConstsMask) == (pFromFpga->data & C0DsppiezosfConstsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsppiezosfConstsWString, (unsigned ) pFromFpga->data & C0DsppiezosfConstsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsppiezosfConstsWString, valueSet[0] & C0DsppiezosfConstsMask, (unsigned ) pFromFpga->data & C0DsppiezosfConstsMask);
			status = asynError;
			setParamStatus(p_C0DsppiezosfConstsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmshell1DsppiezosfConstsWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmshell1DsppiezosfConstsW, valueSet);
		if( (valueSet[0] & Rsmshell1DsppiezosfConstsMask) == (pFromFpga->data & Rsmshell1DsppiezosfConstsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmshell1DsppiezosfConstsWString, (unsigned ) pFromFpga->data & Rsmshell1DsppiezosfConstsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmshell1DsppiezosfConstsWString, valueSet[0] & Rsmshell1DsppiezosfConstsMask, (unsigned ) pFromFpga->data & Rsmshell1DsppiezosfConstsMask);
			status = asynError;
			setParamStatus(p_Rsmshell1DsppiezosfConstsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell0DspfdbkCorempProccoeffWAdr:
		status = (asynStatus) getIntegerParam(p_Shell0DspfdbkCorempProccoeffW, valueSet);
		if( (valueSet[0] & Shell0DspfdbkCorempProccoeffMask) == (pFromFpga->data & Shell0DspfdbkCorempProccoeffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProccoeffWString, (unsigned ) pFromFpga->data & Shell0DspfdbkCorempProccoeffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProccoeffWString, valueSet[0] & Shell0DspfdbkCorempProccoeffMask, (unsigned ) pFromFpga->data & Shell0DspfdbkCorempProccoeffMask);
			status = asynError;
			setParamStatus(p_Shell0DspfdbkCorempProccoeffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspfdbkCorempProclimWAdr:
		status = (asynStatus) getIntegerParam(p_C0DspfdbkCorempProclimW, valueSet);
		if( (valueSet[0] & C0DspfdbkCorempProclimMask) == (pFromFpga->data & C0DspfdbkCorempProclimMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProclimWString, (unsigned ) pFromFpga->data & C0DspfdbkCorempProclimMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProclimWString, valueSet[0] & C0DspfdbkCorempProclimMask, (unsigned ) pFromFpga->data & C0DspfdbkCorempProclimMask);
			status = asynError;
			setParamStatus(p_C0DspfdbkCorempProclimW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspfdbkCorempProcsetmp0WAdr:
		status = (asynStatus) getIntegerParam(p_C0DspfdbkCorempProcsetmp0W, valueSet);
		if( (valueSet[0] & C0DspfdbkCorempProcsetmpMask) == (pFromFpga->data & C0DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp0WString, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp0WString, valueSet[0] & C0DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_C0DspfdbkCorempProcsetmp0W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspfdbkCorempProcsetmp1WAdr:
		status = (asynStatus) getIntegerParam(p_C0DspfdbkCorempProcsetmp1W, valueSet);
		if( (valueSet[0] & C0DspfdbkCorempProcsetmpMask) == (pFromFpga->data & C0DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp1WString, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp1WString, valueSet[0] & C0DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_C0DspfdbkCorempProcsetmp1W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspfdbkCorempProcsetmp2WAdr:
		status = (asynStatus) getIntegerParam(p_C0DspfdbkCorempProcsetmp2W, valueSet);
		if( (valueSet[0] & C0DspfdbkCorempProcsetmpMask) == (pFromFpga->data & C0DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp2WString, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp2WString, valueSet[0] & C0DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_C0DspfdbkCorempProcsetmp2W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspfdbkCorempProcsetmp3WAdr:
		status = (asynStatus) getIntegerParam(p_C0DspfdbkCorempProcsetmp3W, valueSet);
		if( (valueSet[0] & C0DspfdbkCorempProcsetmpMask) == (pFromFpga->data & C0DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp3WString, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcsetmp3WString, valueSet[0] & C0DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_C0DspfdbkCorempProcsetmp3W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Digdsprsmshell1DspfdbkCorempProccoeffWAdr:
		status = (asynStatus) getIntegerParam(p_Digdsprsmshell1DspfdbkCorempProccoeffW, valueSet);
		if( (valueSet[0] & Digdsprsmshell1DspfdbkCorempProccoeffMask) == (pFromFpga->data & Digdsprsmshell1DspfdbkCorempProccoeffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmshell1DspfdbkCorempProccoeffWString, (unsigned ) pFromFpga->data & Digdsprsmshell1DspfdbkCorempProccoeffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmshell1DspfdbkCorempProccoeffWString, valueSet[0] & Digdsprsmshell1DspfdbkCorempProccoeffMask, (unsigned ) pFromFpga->data & Digdsprsmshell1DspfdbkCorempProccoeffMask);
			status = asynError;
			setParamStatus(p_Digdsprsmshell1DspfdbkCorempProccoeffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspfdbkCorempProclimWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspfdbkCorempProclimW, valueSet);
		if( (valueSet[0] & C1DspfdbkCorempProclimMask) == (pFromFpga->data & C1DspfdbkCorempProclimMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProclimWString, (unsigned ) pFromFpga->data & C1DspfdbkCorempProclimMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProclimWString, valueSet[0] & C1DspfdbkCorempProclimMask, (unsigned ) pFromFpga->data & C1DspfdbkCorempProclimMask);
			status = asynError;
			setParamStatus(p_C1DspfdbkCorempProclimW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell1DspfdbkCorempProcsetmp0WAdr:
		status = (asynStatus) getIntegerParam(p_Shell1DspfdbkCorempProcsetmp0W, valueSet);
		if( (valueSet[0] & Shell1DspfdbkCorempProcsetmpMask) == (pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp0WString, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp0WString, valueSet[0] & Shell1DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_Shell1DspfdbkCorempProcsetmp0W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell1DspfdbkCorempProcsetmp1WAdr:
		status = (asynStatus) getIntegerParam(p_Shell1DspfdbkCorempProcsetmp1W, valueSet);
		if( (valueSet[0] & Shell1DspfdbkCorempProcsetmpMask) == (pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp1WString, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp1WString, valueSet[0] & Shell1DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_Shell1DspfdbkCorempProcsetmp1W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell1DspfdbkCorempProcsetmp2WAdr:
		status = (asynStatus) getIntegerParam(p_Shell1DspfdbkCorempProcsetmp2W, valueSet);
		if( (valueSet[0] & Shell1DspfdbkCorempProcsetmpMask) == (pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp2WString, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp2WString, valueSet[0] & Shell1DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_Shell1DspfdbkCorempProcsetmp2W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell1DspfdbkCorempProcsetmp3WAdr:
		status = (asynStatus) getIntegerParam(p_Shell1DspfdbkCorempProcsetmp3W, valueSet);
		if( (valueSet[0] & Shell1DspfdbkCorempProcsetmpMask) == (pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp3WString, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspfdbkCorempProcsetmp3WString, valueSet[0] & Shell1DspfdbkCorempProcsetmpMask, (unsigned ) pFromFpga->data & Shell1DspfdbkCorempProcsetmpMask);
			status = asynError;
			setParamStatus(p_Shell1DspfdbkCorempProcsetmp3W, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4ElecdriveCoupleoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4ElecdriveCoupleoutCouplingW, valueSet);
		if( (valueSet[0] & C0Cav4ElecdriveCoupleoutCouplingMask) == (pFromFpga->data & C0Cav4ElecdriveCoupleoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecdriveCoupleoutCouplingWString, (unsigned ) pFromFpga->data & C0Cav4ElecdriveCoupleoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecdriveCoupleoutCouplingWString, valueSet[0] & C0Cav4ElecdriveCoupleoutCouplingMask, (unsigned ) pFromFpga->data & C0Cav4ElecdriveCoupleoutCouplingMask);
			status = asynError;
			setParamStatus(p_C0Cav4ElecdriveCoupleoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav0Cav4ElecdriveCoupleophoffWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav0Cav4ElecdriveCoupleophoffW, valueSet);
		if( (valueSet[0] & Rsmcav0Cav4ElecdriveCoupleophoffMask) == (pFromFpga->data & Rsmcav0Cav4ElecdriveCoupleophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4ElecdriveCoupleophoffWString, (unsigned ) pFromFpga->data & Rsmcav0Cav4ElecdriveCoupleophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4ElecdriveCoupleophoffWString, valueSet[0] & Rsmcav0Cav4ElecdriveCoupleophoffMask, (unsigned ) pFromFpga->data & Rsmcav0Cav4ElecdriveCoupleophoffMask);
			status = asynError;
			setParamStatus(p_Rsmcav0Cav4ElecdriveCoupleophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0Cav4Elecmode0OcoupoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0Cav4Elecmode0OcoupoutCouplingW, valueSet);
		if( (valueSet[0] & Cav0Cav4Elecmode0OcoupoutCouplingMask) == (pFromFpga->data & Cav0Cav4Elecmode0OcoupoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode0OcoupoutCouplingWString, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode0OcoupoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode0OcoupoutCouplingWString, valueSet[0] & Cav0Cav4Elecmode0OcoupoutCouplingMask, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode0OcoupoutCouplingMask);
			status = asynError;
			setParamStatus(p_Cav0Cav4Elecmode0OcoupoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav0Cav4Elecmode0OcoupophoffWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav0Cav4Elecmode0OcoupophoffW, valueSet);
		if( (valueSet[0] & Rsmcav0Cav4Elecmode0OcoupophoffMask) == (pFromFpga->data & Rsmcav0Cav4Elecmode0OcoupophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4Elecmode0OcoupophoffWString, (unsigned ) pFromFpga->data & Rsmcav0Cav4Elecmode0OcoupophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4Elecmode0OcoupophoffWString, valueSet[0] & Rsmcav0Cav4Elecmode0OcoupophoffMask, (unsigned ) pFromFpga->data & Rsmcav0Cav4Elecmode0OcoupophoffMask);
			status = asynError;
			setParamStatus(p_Rsmcav0Cav4Elecmode0OcoupophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0Cav4Elecmode1OcoupoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0Cav4Elecmode1OcoupoutCouplingW, valueSet);
		if( (valueSet[0] & Cav0Cav4Elecmode1OcoupoutCouplingMask) == (pFromFpga->data & Cav0Cav4Elecmode1OcoupoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1OcoupoutCouplingWString, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode1OcoupoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1OcoupoutCouplingWString, valueSet[0] & Cav0Cav4Elecmode1OcoupoutCouplingMask, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode1OcoupoutCouplingMask);
			status = asynError;
			setParamStatus(p_Cav0Cav4Elecmode1OcoupoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0Cav4Elecmode1OcoupophoffWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0Cav4Elecmode1OcoupophoffW, valueSet);
		if( (valueSet[0] & Cav0Cav4Elecmode1OcoupophoffMask) == (pFromFpga->data & Cav0Cav4Elecmode1OcoupophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1OcoupophoffWString, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode1OcoupophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1OcoupophoffWString, valueSet[0] & Cav0Cav4Elecmode1OcoupophoffMask, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode1OcoupophoffMask);
			status = asynError;
			setParamStatus(p_Cav0Cav4Elecmode1OcoupophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecmode2OcoupoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecmode2OcoupoutCouplingW, valueSet);
		if( (valueSet[0] & C0Cav4Elecmode2OcoupoutCouplingMask) == (pFromFpga->data & C0Cav4Elecmode2OcoupoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2OcoupoutCouplingWString, (unsigned ) pFromFpga->data & C0Cav4Elecmode2OcoupoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2OcoupoutCouplingWString, valueSet[0] & C0Cav4Elecmode2OcoupoutCouplingMask, (unsigned ) pFromFpga->data & C0Cav4Elecmode2OcoupoutCouplingMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecmode2OcoupoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecmode2OcoupophoffWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecmode2OcoupophoffW, valueSet);
		if( (valueSet[0] & C0Cav4Elecmode2OcoupophoffMask) == (pFromFpga->data & C0Cav4Elecmode2OcoupophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2OcoupophoffWString, (unsigned ) pFromFpga->data & C0Cav4Elecmode2OcoupophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2OcoupophoffWString, valueSet[0] & C0Cav4Elecmode2OcoupophoffMask, (unsigned ) pFromFpga->data & C0Cav4Elecmode2OcoupophoffMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecmode2OcoupophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1Cav4ElecdriveCoupleoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1Cav4ElecdriveCoupleoutCouplingW, valueSet);
		if( (valueSet[0] & Cav1Cav4ElecdriveCoupleoutCouplingMask) == (pFromFpga->data & Cav1Cav4ElecdriveCoupleoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4ElecdriveCoupleoutCouplingWString, (unsigned ) pFromFpga->data & Cav1Cav4ElecdriveCoupleoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4ElecdriveCoupleoutCouplingWString, valueSet[0] & Cav1Cav4ElecdriveCoupleoutCouplingMask, (unsigned ) pFromFpga->data & Cav1Cav4ElecdriveCoupleoutCouplingMask);
			status = asynError;
			setParamStatus(p_Cav1Cav4ElecdriveCoupleoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4ElecdriveCoupleophoffWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4ElecdriveCoupleophoffW, valueSet);
		if( (valueSet[0] & C1Cav4ElecdriveCoupleophoffMask) == (pFromFpga->data & C1Cav4ElecdriveCoupleophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecdriveCoupleophoffWString, (unsigned ) pFromFpga->data & C1Cav4ElecdriveCoupleophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecdriveCoupleophoffWString, valueSet[0] & C1Cav4ElecdriveCoupleophoffMask, (unsigned ) pFromFpga->data & C1Cav4ElecdriveCoupleophoffMask);
			status = asynError;
			setParamStatus(p_C1Cav4ElecdriveCoupleophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecmode0OcoupoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecmode0OcoupoutCouplingW, valueSet);
		if( (valueSet[0] & C1Cav4Elecmode0OcoupoutCouplingMask) == (pFromFpga->data & C1Cav4Elecmode0OcoupoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0OcoupoutCouplingWString, (unsigned ) pFromFpga->data & C1Cav4Elecmode0OcoupoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0OcoupoutCouplingWString, valueSet[0] & C1Cav4Elecmode0OcoupoutCouplingMask, (unsigned ) pFromFpga->data & C1Cav4Elecmode0OcoupoutCouplingMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecmode0OcoupoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1Cav4Elecmode0OcoupophoffWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1Cav4Elecmode0OcoupophoffW, valueSet);
		if( (valueSet[0] & Cav1Cav4Elecmode0OcoupophoffMask) == (pFromFpga->data & Cav1Cav4Elecmode0OcoupophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode0OcoupophoffWString, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode0OcoupophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode0OcoupophoffWString, valueSet[0] & Cav1Cav4Elecmode0OcoupophoffMask, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode0OcoupophoffMask);
			status = asynError;
			setParamStatus(p_Cav1Cav4Elecmode0OcoupophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1Cav4Elecmode1OcoupoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1Cav4Elecmode1OcoupoutCouplingW, valueSet);
		if( (valueSet[0] & Cav1Cav4Elecmode1OcoupoutCouplingMask) == (pFromFpga->data & Cav1Cav4Elecmode1OcoupoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode1OcoupoutCouplingWString, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode1OcoupoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode1OcoupoutCouplingWString, valueSet[0] & Cav1Cav4Elecmode1OcoupoutCouplingMask, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode1OcoupoutCouplingMask);
			status = asynError;
			setParamStatus(p_Cav1Cav4Elecmode1OcoupoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecmode1OcoupophoffWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecmode1OcoupophoffW, valueSet);
		if( (valueSet[0] & C1Cav4Elecmode1OcoupophoffMask) == (pFromFpga->data & C1Cav4Elecmode1OcoupophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1OcoupophoffWString, (unsigned ) pFromFpga->data & C1Cav4Elecmode1OcoupophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1OcoupophoffWString, valueSet[0] & C1Cav4Elecmode1OcoupophoffMask, (unsigned ) pFromFpga->data & C1Cav4Elecmode1OcoupophoffMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecmode1OcoupophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav1Cav4Elecmode2OcoupoutCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav1Cav4Elecmode2OcoupoutCouplingW, valueSet);
		if( (valueSet[0] & Rsmcav1Cav4Elecmode2OcoupoutCouplingMask) == (pFromFpga->data & Rsmcav1Cav4Elecmode2OcoupoutCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode2OcoupoutCouplingWString, (unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode2OcoupoutCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode2OcoupoutCouplingWString, valueSet[0] & Rsmcav1Cav4Elecmode2OcoupoutCouplingMask, (unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode2OcoupoutCouplingMask);
			status = asynError;
			setParamStatus(p_Rsmcav1Cav4Elecmode2OcoupoutCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecmode2OcoupophoffWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecmode2OcoupophoffW, valueSet);
		if( (valueSet[0] & C1Cav4Elecmode2OcoupophoffMask) == (pFromFpga->data & C1Cav4Elecmode2OcoupophoffMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode2OcoupophoffWString, (unsigned ) pFromFpga->data & C1Cav4Elecmode2OcoupophoffMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode2OcoupophoffWString, valueSet[0] & C1Cav4Elecmode2OcoupophoffMask, (unsigned ) pFromFpga->data & C1Cav4Elecmode2OcoupophoffMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecmode2OcoupophoffW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Digdsprsmshell0DsplpNotchlp1AkxWAdr:
		status = (asynStatus) getIntegerParam(p_Digdsprsmshell0DsplpNotchlp1AkxW, valueSet);
		if( (valueSet[0] & Digdsprsmshell0DsplpNotchlp1AkxMask) == (pFromFpga->data & Digdsprsmshell0DsplpNotchlp1AkxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmshell0DsplpNotchlp1AkxWString, (unsigned ) pFromFpga->data & Digdsprsmshell0DsplpNotchlp1AkxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmshell0DsplpNotchlp1AkxWString, valueSet[0] & Digdsprsmshell0DsplpNotchlp1AkxMask, (unsigned ) pFromFpga->data & Digdsprsmshell0DsplpNotchlp1AkxMask);
			status = asynError;
			setParamStatus(p_Digdsprsmshell0DsplpNotchlp1AkxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DsplpNotchlp1AkyWAdr:
		status = (asynStatus) getIntegerParam(p_C0DsplpNotchlp1AkyW, valueSet);
		if( (valueSet[0] & C0DsplpNotchlp1AkyMask) == (pFromFpga->data & C0DsplpNotchlp1AkyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsplpNotchlp1AkyWString, (unsigned ) pFromFpga->data & C0DsplpNotchlp1AkyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsplpNotchlp1AkyWString, valueSet[0] & C0DsplpNotchlp1AkyMask, (unsigned ) pFromFpga->data & C0DsplpNotchlp1AkyMask);
			status = asynError;
			setParamStatus(p_C0DsplpNotchlp1AkyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmshell0DsplpNotchlp1BkxWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmshell0DsplpNotchlp1BkxW, valueSet);
		if( (valueSet[0] & Rsmshell0DsplpNotchlp1BkxMask) == (pFromFpga->data & Rsmshell0DsplpNotchlp1BkxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmshell0DsplpNotchlp1BkxWString, (unsigned ) pFromFpga->data & Rsmshell0DsplpNotchlp1BkxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmshell0DsplpNotchlp1BkxWString, valueSet[0] & Rsmshell0DsplpNotchlp1BkxMask, (unsigned ) pFromFpga->data & Rsmshell0DsplpNotchlp1BkxMask);
			status = asynError;
			setParamStatus(p_Rsmshell0DsplpNotchlp1BkxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DsplpNotchlp1BkyWAdr:
		status = (asynStatus) getIntegerParam(p_C0DsplpNotchlp1BkyW, valueSet);
		if( (valueSet[0] & C0DsplpNotchlp1BkyMask) == (pFromFpga->data & C0DsplpNotchlp1BkyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsplpNotchlp1BkyWString, (unsigned ) pFromFpga->data & C0DsplpNotchlp1BkyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsplpNotchlp1BkyWString, valueSet[0] & C0DsplpNotchlp1BkyMask, (unsigned ) pFromFpga->data & C0DsplpNotchlp1BkyMask);
			status = asynError;
			setParamStatus(p_C0DsplpNotchlp1BkyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DsplpNotchlp1AkxWAdr:
		status = (asynStatus) getIntegerParam(p_C1DsplpNotchlp1AkxW, valueSet);
		if( (valueSet[0] & C1DsplpNotchlp1AkxMask) == (pFromFpga->data & C1DsplpNotchlp1AkxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1AkxWString, (unsigned ) pFromFpga->data & C1DsplpNotchlp1AkxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1AkxWString, valueSet[0] & C1DsplpNotchlp1AkxMask, (unsigned ) pFromFpga->data & C1DsplpNotchlp1AkxMask);
			status = asynError;
			setParamStatus(p_C1DsplpNotchlp1AkxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Atopdigdsprsmshell1DsplpNotchlp1AkyWAdr:
		status = (asynStatus) getIntegerParam(p_Atopdigdsprsmshell1DsplpNotchlp1AkyW, valueSet);
		if( (valueSet[0] & Atopdigdsprsmshell1DsplpNotchlp1AkyMask) == (pFromFpga->data & Atopdigdsprsmshell1DsplpNotchlp1AkyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmshell1DsplpNotchlp1AkyWString, (unsigned ) pFromFpga->data & Atopdigdsprsmshell1DsplpNotchlp1AkyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmshell1DsplpNotchlp1AkyWString, valueSet[0] & Atopdigdsprsmshell1DsplpNotchlp1AkyMask, (unsigned ) pFromFpga->data & Atopdigdsprsmshell1DsplpNotchlp1AkyMask);
			status = asynError;
			setParamStatus(p_Atopdigdsprsmshell1DsplpNotchlp1AkyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DsplpNotchlp1BkxWAdr:
		status = (asynStatus) getIntegerParam(p_C1DsplpNotchlp1BkxW, valueSet);
		if( (valueSet[0] & C1DsplpNotchlp1BkxMask) == (pFromFpga->data & C1DsplpNotchlp1BkxMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1BkxWString, (unsigned ) pFromFpga->data & C1DsplpNotchlp1BkxMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1BkxWString, valueSet[0] & C1DsplpNotchlp1BkxMask, (unsigned ) pFromFpga->data & C1DsplpNotchlp1BkxMask);
			status = asynError;
			setParamStatus(p_C1DsplpNotchlp1BkxW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DsplpNotchlp1BkyWAdr:
		status = (asynStatus) getIntegerParam(p_C1DsplpNotchlp1BkyW, valueSet);
		if( (valueSet[0] & C1DsplpNotchlp1BkyMask) == (pFromFpga->data & C1DsplpNotchlp1BkyMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1BkyWString, (unsigned ) pFromFpga->data & C1DsplpNotchlp1BkyMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsplpNotchlp1BkyWString, valueSet[0] & C1DsplpNotchlp1BkyMask, (unsigned ) pFromFpga->data & C1DsplpNotchlp1BkyMask);
			status = asynError;
			setParamStatus(p_C1DsplpNotchlp1BkyW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case AdcMmcmWAdr:
		status = (asynStatus) getIntegerParam(p_AdcMmcmW, valueSet);
		if( (valueSet[0] & AdcMmcmMask) == (pFromFpga->data & AdcMmcmMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmWString, (unsigned ) pFromFpga->data & AdcMmcmMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmWString, valueSet[0] & AdcMmcmMask, (unsigned ) pFromFpga->data & AdcMmcmMask);
			status = asynError;
			setParamStatus(p_AdcMmcmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case U15SpiDataAddrRWAdr:
		status = (asynStatus) getIntegerParam(p_U15SpiDataAddrRW, valueSet);
		if( (valueSet[0] & U15SpiDataAddrRMask) == (pFromFpga->data & U15SpiDataAddrRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiDataAddrRWString, (unsigned ) pFromFpga->data & U15SpiDataAddrRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiDataAddrRWString, valueSet[0] & U15SpiDataAddrRMask, (unsigned ) pFromFpga->data & U15SpiDataAddrRMask);
			status = asynError;
			setParamStatus(p_U15SpiDataAddrRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case U15SpiReadAndStartRWAdr:
		status = (asynStatus) getIntegerParam(p_U15SpiReadAndStartRW, valueSet);
		if( (valueSet[0] & U15SpiReadAndStartRMask) == (pFromFpga->data & U15SpiReadAndStartRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiReadAndStartRWString, (unsigned ) pFromFpga->data & U15SpiReadAndStartRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiReadAndStartRWString, valueSet[0] & U15SpiReadAndStartRMask, (unsigned ) pFromFpga->data & U15SpiReadAndStartRMask);
			status = asynError;
			setParamStatus(p_U15SpiReadAndStartRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Digcfgu18SpiDataAddrRWAdr:
		status = (asynStatus) getIntegerParam(p_Digcfgu18SpiDataAddrRW, valueSet);
		if( (valueSet[0] & Digcfgu18SpiDataAddrRMask) == (pFromFpga->data & Digcfgu18SpiDataAddrRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu18SpiDataAddrRWString, (unsigned ) pFromFpga->data & Digcfgu18SpiDataAddrRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu18SpiDataAddrRWString, valueSet[0] & Digcfgu18SpiDataAddrRMask, (unsigned ) pFromFpga->data & Digcfgu18SpiDataAddrRMask);
			status = asynError;
			setParamStatus(p_Digcfgu18SpiDataAddrRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Digcfgu18SpiReadAndStartRWAdr:
		status = (asynStatus) getIntegerParam(p_Digcfgu18SpiReadAndStartRW, valueSet);
		if( (valueSet[0] & Digcfgu18SpiReadAndStartRMask) == (pFromFpga->data & Digcfgu18SpiReadAndStartRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu18SpiReadAndStartRWString, (unsigned ) pFromFpga->data & Digcfgu18SpiReadAndStartRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu18SpiReadAndStartRWString, valueSet[0] & Digcfgu18SpiReadAndStartRMask, (unsigned ) pFromFpga->data & Digcfgu18SpiReadAndStartRMask);
			status = asynError;
			setParamStatus(p_Digcfgu18SpiReadAndStartRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Atopdigcfgu2ClkResetRWAdr:
		status = (asynStatus) getIntegerParam(p_Atopdigcfgu2ClkResetRW, valueSet);
		if( (valueSet[0] & Atopdigcfgu2ClkResetRMask) == (pFromFpga->data & Atopdigcfgu2ClkResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigcfgu2ClkResetRWString, (unsigned ) pFromFpga->data & Atopdigcfgu2ClkResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigcfgu2ClkResetRWString, valueSet[0] & Atopdigcfgu2ClkResetRMask, (unsigned ) pFromFpga->data & Atopdigcfgu2ClkResetRMask);
			status = asynError;
			setParamStatus(p_Atopdigcfgu2ClkResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case U2IserdesResetRWAdr:
		status = (asynStatus) getIntegerParam(p_U2IserdesResetRW, valueSet);
		if( (valueSet[0] & U2IserdesResetRMask) == (pFromFpga->data & U2IserdesResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2IserdesResetRWString, (unsigned ) pFromFpga->data & U2IserdesResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				U2IserdesResetRWString, valueSet[0] & U2IserdesResetRMask, (unsigned ) pFromFpga->data & U2IserdesResetRMask);
			status = asynError;
			setParamStatus(p_U2IserdesResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case U3ClkResetRWAdr:
		status = (asynStatus) getIntegerParam(p_U3ClkResetRW, valueSet);
		if( (valueSet[0] & U3ClkResetRMask) == (pFromFpga->data & U3ClkResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3ClkResetRWString, (unsigned ) pFromFpga->data & U3ClkResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				U3ClkResetRWString, valueSet[0] & U3ClkResetRMask, (unsigned ) pFromFpga->data & U3ClkResetRMask);
			status = asynError;
			setParamStatus(p_U3ClkResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case U3IserdesResetRWAdr:
		status = (asynStatus) getIntegerParam(p_U3IserdesResetRW, valueSet);
		if( (valueSet[0] & U3IserdesResetRMask) == (pFromFpga->data & U3IserdesResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3IserdesResetRWString, (unsigned ) pFromFpga->data & U3IserdesResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				U3IserdesResetRWString, valueSet[0] & U3IserdesResetRMask, (unsigned ) pFromFpga->data & U3IserdesResetRMask);
			status = asynError;
			setParamStatus(p_U3IserdesResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Digcfgu4ResetRWAdr:
		status = (asynStatus) getIntegerParam(p_Digcfgu4ResetRW, valueSet);
		if( (valueSet[0] & Digcfgu4ResetRMask) == (pFromFpga->data & Digcfgu4ResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu4ResetRWString, (unsigned ) pFromFpga->data & Digcfgu4ResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Digcfgu4ResetRWString, valueSet[0] & Digcfgu4ResetRMask, (unsigned ) pFromFpga->data & Digcfgu4ResetRMask);
			status = asynError;
			setParamStatus(p_Digcfgu4ResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case BanyanMaskWAdr:
		status = (asynStatus) getIntegerParam(p_BanyanMaskW, valueSet);
		if( (valueSet[0] & BanyanMaskMask) == (pFromFpga->data & BanyanMaskMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanMaskWString, (unsigned ) pFromFpga->data & BanyanMaskMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanMaskWString, valueSet[0] & BanyanMaskMask, (unsigned ) pFromFpga->data & BanyanMaskMask);
			status = asynError;
			setParamStatus(p_BanyanMaskW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case BitslipWAdr:
		status = (asynStatus) getIntegerParam(p_BitslipW, valueSet);
		if( (valueSet[0] & BitslipMask) == (pFromFpga->data & BitslipMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BitslipWString, (unsigned ) pFromFpga->data & BitslipMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				BitslipWString, valueSet[0] & BitslipMask, (unsigned ) pFromFpga->data & BitslipMask);
			status = asynError;
			setParamStatus(p_BitslipW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case ClkStatusWeWAdr:
		status = (asynStatus) getIntegerParam(p_ClkStatusWeW, valueSet);
		if( (valueSet[0] & ClkStatusWeMask) == (pFromFpga->data & ClkStatusWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkStatusWeWString, (unsigned ) pFromFpga->data & ClkStatusWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				ClkStatusWeWString, valueSet[0] & ClkStatusWeMask, (unsigned ) pFromFpga->data & ClkStatusWeMask);
			status = asynError;
			setParamStatus(p_ClkStatusWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigcfgidelayctrlResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigcfgidelayctrlResetRW, valueSet);
		if( (valueSet[0] & DigcfgidelayctrlResetRMask) == (pFromFpga->data & DigcfgidelayctrlResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgidelayctrlResetRWString, (unsigned ) pFromFpga->data & DigcfgidelayctrlResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgidelayctrlResetRWString, valueSet[0] & DigcfgidelayctrlResetRMask, (unsigned ) pFromFpga->data & DigcfgidelayctrlResetRMask);
			status = asynError;
			setParamStatus(p_DigcfgidelayctrlResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case LlspiWeWAdr:
		status = (asynStatus) getIntegerParam(p_LlspiWeW, valueSet);
		if( (valueSet[0] & LlspiWeMask) == (pFromFpga->data & LlspiWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiWeWString, (unsigned ) pFromFpga->data & LlspiWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiWeWString, valueSet[0] & LlspiWeMask, (unsigned ) pFromFpga->data & LlspiWeMask);
			status = asynError;
			setParamStatus(p_LlspiWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case MmcmResetRWAdr:
		status = (asynStatus) getIntegerParam(p_MmcmResetRW, valueSet);
		if( (valueSet[0] & MmcmResetRMask) == (pFromFpga->data & MmcmResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				MmcmResetRWString, (unsigned ) pFromFpga->data & MmcmResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				MmcmResetRWString, valueSet[0] & MmcmResetRMask, (unsigned ) pFromFpga->data & MmcmResetRMask);
			status = asynError;
			setParamStatus(p_MmcmResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case PeriphConfigWAdr:
		status = (asynStatus) getIntegerParam(p_PeriphConfigW, valueSet);
		if( (valueSet[0] & PeriphConfigMask) == (pFromFpga->data & PeriphConfigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PeriphConfigWString, (unsigned ) pFromFpga->data & PeriphConfigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				PeriphConfigWString, valueSet[0] & PeriphConfigMask, (unsigned ) pFromFpga->data & PeriphConfigMask);
			status = asynError;
			setParamStatus(p_PeriphConfigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case PhasexTrigWAdr:
		status = (asynStatus) getIntegerParam(p_PhasexTrigW, valueSet);
		if( (valueSet[0] & PhasexTrigMask) == (pFromFpga->data & PhasexTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhasexTrigWString, (unsigned ) pFromFpga->data & PhasexTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				PhasexTrigWString, valueSet[0] & PhasexTrigMask, (unsigned ) pFromFpga->data & PhasexTrigMask);
			status = asynError;
			setParamStatus(p_PhasexTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigcfgrawadcTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigcfgrawadcTrigW, valueSet);
		if( (valueSet[0] & DigcfgrawadcTrigMask) == (pFromFpga->data & DigcfgrawadcTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgrawadcTrigWString, (unsigned ) pFromFpga->data & DigcfgrawadcTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgrawadcTrigWString, valueSet[0] & DigcfgrawadcTrigMask, (unsigned ) pFromFpga->data & DigcfgrawadcTrigMask);
			status = asynError;
			setParamStatus(p_DigcfgrawadcTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case ScanTriggerWeWAdr:
		status = (asynStatus) getIntegerParam(p_ScanTriggerWeW, valueSet);
		if( (valueSet[0] & ScanTriggerWeMask) == (pFromFpga->data & ScanTriggerWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ScanTriggerWeWString, (unsigned ) pFromFpga->data & ScanTriggerWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				ScanTriggerWeWString, valueSet[0] & ScanTriggerWeMask, (unsigned ) pFromFpga->data & ScanTriggerWeMask);
			status = asynError;
			setParamStatus(p_ScanTriggerWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case ScannerDebugWAdr:
		status = (asynStatus) getIntegerParam(p_ScannerDebugW, valueSet);
		if( (valueSet[0] & ScannerDebugMask) == (pFromFpga->data & ScannerDebugMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ScannerDebugWString, (unsigned ) pFromFpga->data & ScannerDebugMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				ScannerDebugWString, valueSet[0] & ScannerDebugMask, (unsigned ) pFromFpga->data & ScannerDebugMask);
			status = asynError;
			setParamStatus(p_ScannerDebugW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case SyncAd7794CsetWAdr:
		status = (asynStatus) getIntegerParam(p_SyncAd7794CsetW, valueSet);
		if( (valueSet[0] & SyncAd7794CsetMask) == (pFromFpga->data & SyncAd7794CsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SyncAd7794CsetWString, (unsigned ) pFromFpga->data & SyncAd7794CsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				SyncAd7794CsetWString, valueSet[0] & SyncAd7794CsetMask, (unsigned ) pFromFpga->data & SyncAd7794CsetMask);
			status = asynError;
			setParamStatus(p_SyncAd7794CsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigcfgsyncTps62210CsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigcfgsyncTps62210CsetW, valueSet);
		if( (valueSet[0] & DigcfgsyncTps62210CsetMask) == (pFromFpga->data & DigcfgsyncTps62210CsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgsyncTps62210CsetWString, (unsigned ) pFromFpga->data & DigcfgsyncTps62210CsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigcfgsyncTps62210CsetWString, valueSet[0] & DigcfgsyncTps62210CsetMask, (unsigned ) pFromFpga->data & DigcfgsyncTps62210CsetMask);
			status = asynError;
			setParamStatus(p_DigcfgsyncTps62210CsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case AdcTestModeWAdr:
		status = (asynStatus) getIntegerParam(p_AdcTestModeW, valueSet);
		if( (valueSet[0] & AdcTestModeMask) == (pFromFpga->data & AdcTestModeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestModeWString, (unsigned ) pFromFpga->data & AdcTestModeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestModeWString, valueSet[0] & AdcTestModeMask, (unsigned ) pFromFpga->data & AdcTestModeMask);
			status = asynError;
			setParamStatus(p_AdcTestModeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case AdcTestResetWAdr:
		status = (asynStatus) getIntegerParam(p_AdcTestResetW, valueSet);
		if( (valueSet[0] & AdcTestResetMask) == (pFromFpga->data & AdcTestResetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestResetWString, (unsigned ) pFromFpga->data & AdcTestResetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestResetWString, valueSet[0] & AdcTestResetMask, (unsigned ) pFromFpga->data & AdcTestResetMask);
			status = asynError;
			setParamStatus(p_AdcTestResetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigdspamplitudeWAdr:
		status = (asynStatus) getIntegerParam(p_DigdspamplitudeW, valueSet);
		if( (valueSet[0] & DigdspamplitudeMask) == (pFromFpga->data & DigdspamplitudeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspamplitudeWString, (unsigned ) pFromFpga->data & DigdspamplitudeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspamplitudeWString, valueSet[0] & DigdspamplitudeMask, (unsigned ) pFromFpga->data & DigdspamplitudeMask);
			status = asynError;
			setParamStatus(p_DigdspamplitudeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case AverageLenWAdr:
		status = (asynStatus) getIntegerParam(p_AverageLenW, valueSet);
		if( (valueSet[0] & AverageLenMask) == (pFromFpga->data & AverageLenMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AverageLenWString, (unsigned ) pFromFpga->data & AverageLenMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AverageLenWString, valueSet[0] & AverageLenMask, (unsigned ) pFromFpga->data & AverageLenMask);
			status = asynError;
			setParamStatus(p_AverageLenW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case BufTrigWAdr:
		status = (asynStatus) getIntegerParam(p_BufTrigW, valueSet);
		if( (valueSet[0] & BufTrigMask) == (pFromFpga->data & BufTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BufTrigWString, (unsigned ) pFromFpga->data & BufTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				BufTrigWString, valueSet[0] & BufTrigMask, (unsigned ) pFromFpga->data & BufTrigMask);
			status = asynError;
			setParamStatus(p_BufTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case CicPeriodWAdr:
		status = (asynStatus) getIntegerParam(p_CicPeriodW, valueSet);
		if( (valueSet[0] & CicPeriodMask) == (pFromFpga->data & CicPeriodMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CicPeriodWString, (unsigned ) pFromFpga->data & CicPeriodMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				CicPeriodWString, valueSet[0] & CicPeriodMask, (unsigned ) pFromFpga->data & CicPeriodMask);
			status = asynError;
			setParamStatus(p_CicPeriodW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case CicShiftWAdr:
		status = (asynStatus) getIntegerParam(p_CicShiftW, valueSet);
		if( (valueSet[0] & CicShiftMask) == (pFromFpga->data & CicShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CicShiftWString, (unsigned ) pFromFpga->data & CicShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				CicShiftWString, valueSet[0] & CicShiftMask, (unsigned ) pFromFpga->data & CicShiftMask);
			status = asynError;
			setParamStatus(p_CicShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case CircleBufFlipWAdr:
		status = (asynStatus) getIntegerParam(p_CircleBufFlipW, valueSet);
		if( (valueSet[0] & CircleBufFlipMask) == (pFromFpga->data & CircleBufFlipMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CircleBufFlipWString, (unsigned ) pFromFpga->data & CircleBufFlipMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				CircleBufFlipWString, valueSet[0] & CircleBufFlipMask, (unsigned ) pFromFpga->data & CircleBufFlipMask);
			status = asynError;
			setParamStatus(p_CircleBufFlipW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DacDdsResetWAdr:
		status = (asynStatus) getIntegerParam(p_DacDdsResetW, valueSet);
		if( (valueSet[0] & DacDdsResetMask) == (pFromFpga->data & DacDdsResetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DacDdsResetWString, (unsigned ) pFromFpga->data & DacDdsResetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DacDdsResetWString, valueSet[0] & DacDdsResetMask, (unsigned ) pFromFpga->data & DacDdsResetMask);
			status = asynError;
			setParamStatus(p_DacDdsResetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigdspdacModeWAdr:
		status = (asynStatus) getIntegerParam(p_DigdspdacModeW, valueSet);
		if( (valueSet[0] & DigdspdacModeMask) == (pFromFpga->data & DigdspdacModeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspdacModeWString, (unsigned ) pFromFpga->data & DigdspdacModeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspdacModeWString, valueSet[0] & DigdspdacModeMask, (unsigned ) pFromFpga->data & DigdspdacModeMask);
			status = asynError;
			setParamStatus(p_DigdspdacModeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DdsaModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DdsaModuloW, valueSet);
		if( (valueSet[0] & DdsaModuloMask) == (pFromFpga->data & DdsaModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DdsaModuloWString, (unsigned ) pFromFpga->data & DdsaModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DdsaModuloWString, valueSet[0] & DdsaModuloMask, (unsigned ) pFromFpga->data & DdsaModuloMask);
			status = asynError;
			setParamStatus(p_DdsaModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DdsaPhstepHWAdr:
		status = (asynStatus) getIntegerParam(p_DdsaPhstepHW, valueSet);
		if( (valueSet[0] & DdsaPhstepHMask) == (pFromFpga->data & DdsaPhstepHMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DdsaPhstepHWString, (unsigned ) pFromFpga->data & DdsaPhstepHMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DdsaPhstepHWString, valueSet[0] & DdsaPhstepHMask, (unsigned ) pFromFpga->data & DdsaPhstepHMask);
			status = asynError;
			setParamStatus(p_DdsaPhstepHW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigdspddsaPhstepLWAdr:
		status = (asynStatus) getIntegerParam(p_DigdspddsaPhstepLW, valueSet);
		if( (valueSet[0] & DigdspddsaPhstepLMask) == (pFromFpga->data & DigdspddsaPhstepLMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspddsaPhstepLWString, (unsigned ) pFromFpga->data & DigdspddsaPhstepLMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspddsaPhstepLWString, valueSet[0] & DigdspddsaPhstepLMask, (unsigned ) pFromFpga->data & DigdspddsaPhstepLMask);
			status = asynError;
			setParamStatus(p_DigdspddsaPhstepLW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case HistCountWStrobeWAdr:
		status = (asynStatus) getIntegerParam(p_HistCountWStrobeW, valueSet);
		if( (valueSet[0] & HistCountWStrobeMask) == (pFromFpga->data & HistCountWStrobeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HistCountWStrobeWString, (unsigned ) pFromFpga->data & HistCountWStrobeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				HistCountWStrobeWString, valueSet[0] & HistCountWStrobeMask, (unsigned ) pFromFpga->data & HistCountWStrobeMask);
			status = asynError;
			setParamStatus(p_HistCountWStrobeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case LlrfDspDacEnWAdr:
		status = (asynStatus) getIntegerParam(p_LlrfDspDacEnW, valueSet);
		if( (valueSet[0] & LlrfDspDacEnMask) == (pFromFpga->data & LlrfDspDacEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlrfDspDacEnWString, (unsigned ) pFromFpga->data & LlrfDspDacEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				LlrfDspDacEnWString, valueSet[0] & LlrfDspDacEnMask, (unsigned ) pFromFpga->data & LlrfDspDacEnMask);
			status = asynError;
			setParamStatus(p_LlrfDspDacEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case LoAmpWAdr:
		status = (asynStatus) getIntegerParam(p_LoAmpW, valueSet);
		if( (valueSet[0] & LoAmpMask) == (pFromFpga->data & LoAmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LoAmpWString, (unsigned ) pFromFpga->data & LoAmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				LoAmpWString, valueSet[0] & LoAmpMask, (unsigned ) pFromFpga->data & LoAmpMask);
			status = asynError;
			setParamStatus(p_LoAmpW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigdspmoduloWAdr:
		status = (asynStatus) getIntegerParam(p_DigdspmoduloW, valueSet);
		if( (valueSet[0] & DigdspmoduloMask) == (pFromFpga->data & DigdspmoduloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspmoduloWString, (unsigned ) pFromFpga->data & DigdspmoduloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspmoduloWString, valueSet[0] & DigdspmoduloMask, (unsigned ) pFromFpga->data & DigdspmoduloMask);
			status = asynError;
			setParamStatus(p_DigdspmoduloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigdspphaseStepHWAdr:
		status = (asynStatus) getIntegerParam(p_DigdspphaseStepHW, valueSet);
		if( (valueSet[0] & DigdspphaseStepHMask) == (pFromFpga->data & DigdspphaseStepHMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspphaseStepHWString, (unsigned ) pFromFpga->data & DigdspphaseStepHMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigdspphaseStepHWString, valueSet[0] & DigdspphaseStepHMask, (unsigned ) pFromFpga->data & DigdspphaseStepHMask);
			status = asynError;
			setParamStatus(p_DigdspphaseStepHW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case PhaseStepLWAdr:
		status = (asynStatus) getIntegerParam(p_PhaseStepLW, valueSet);
		if( (valueSet[0] & PhaseStepLMask) == (pFromFpga->data & PhaseStepLMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhaseStepLWString, (unsigned ) pFromFpga->data & PhaseStepLMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				PhaseStepLWString, valueSet[0] & PhaseStepLMask, (unsigned ) pFromFpga->data & PhaseStepLMask);
			status = asynError;
			setParamStatus(p_PhaseStepLW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case CavSelWAdr:
		status = (asynStatus) getIntegerParam(p_CavSelW, valueSet);
		if( (valueSet[0] & CavSelMask) == (pFromFpga->data & CavSelMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CavSelWString, (unsigned ) pFromFpga->data & CavSelMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				CavSelWString, valueSet[0] & CavSelMask, (unsigned ) pFromFpga->data & CavSelMask);
			status = asynError;
			setParamStatus(p_CavSelW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case PrlCfgWAdr:
		status = (asynStatus) getIntegerParam(p_PrlCfgW, valueSet);
		if( (valueSet[0] & PrlCfgMask) == (pFromFpga->data & PrlCfgMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PrlCfgWString, (unsigned ) pFromFpga->data & PrlCfgMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				PrlCfgWString, valueSet[0] & PrlCfgMask, (unsigned ) pFromFpga->data & PrlCfgMask);
			status = asynError;
			setParamStatus(p_PrlCfgW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case PrcDspprlGainWAdr:
		status = (asynStatus) getIntegerParam(p_PrcDspprlGainW, valueSet);
		if( (valueSet[0] & PrcDspprlGainMask) == (pFromFpga->data & PrcDspprlGainMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PrcDspprlGainWString, (unsigned ) pFromFpga->data & PrcDspprlGainMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				PrcDspprlGainWString, valueSet[0] & PrcDspprlGainMask, (unsigned ) pFromFpga->data & PrcDspprlGainMask);
			status = asynError;
			setParamStatus(p_PrcDspprlGainW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Beam0ModuloWAdr:
		status = (asynStatus) getIntegerParam(p_Beam0ModuloW, valueSet);
		if( (valueSet[0] & Beam0ModuloMask) == (pFromFpga->data & Beam0ModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Beam0ModuloWString, (unsigned ) pFromFpga->data & Beam0ModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Beam0ModuloWString, valueSet[0] & Beam0ModuloMask, (unsigned ) pFromFpga->data & Beam0ModuloMask);
			status = asynError;
			setParamStatus(p_Beam0ModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmbeam0PhaseInitWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmbeam0PhaseInitW, valueSet);
		if( (valueSet[0] & Rsmbeam0PhaseInitMask) == (pFromFpga->data & Rsmbeam0PhaseInitMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmbeam0PhaseInitWString, (unsigned ) pFromFpga->data & Rsmbeam0PhaseInitMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmbeam0PhaseInitWString, valueSet[0] & Rsmbeam0PhaseInitMask, (unsigned ) pFromFpga->data & Rsmbeam0PhaseInitMask);
			status = asynError;
			setParamStatus(p_Rsmbeam0PhaseInitW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0PhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_C0PhaseStepW, valueSet);
		if( (valueSet[0] & C0PhaseStepMask) == (pFromFpga->data & C0PhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0PhaseStepWString, (unsigned ) pFromFpga->data & C0PhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0PhaseStepWString, valueSet[0] & C0PhaseStepMask, (unsigned ) pFromFpga->data & C0PhaseStepMask);
			status = asynError;
			setParamStatus(p_C0PhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1ModuloWAdr:
		status = (asynStatus) getIntegerParam(p_C1ModuloW, valueSet);
		if( (valueSet[0] & C1ModuloMask) == (pFromFpga->data & C1ModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1ModuloWString, (unsigned ) pFromFpga->data & C1ModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1ModuloWString, valueSet[0] & C1ModuloMask, (unsigned ) pFromFpga->data & C1ModuloMask);
			status = asynError;
			setParamStatus(p_C1ModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1PhaseInitWAdr:
		status = (asynStatus) getIntegerParam(p_C1PhaseInitW, valueSet);
		if( (valueSet[0] & C1PhaseInitMask) == (pFromFpga->data & C1PhaseInitMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PhaseInitWString, (unsigned ) pFromFpga->data & C1PhaseInitMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1PhaseInitWString, valueSet[0] & C1PhaseInitMask, (unsigned ) pFromFpga->data & C1PhaseInitMask);
			status = asynError;
			setParamStatus(p_C1PhaseInitW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmbeam1PhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmbeam1PhaseStepW, valueSet);
		if( (valueSet[0] & Rsmbeam1PhaseStepMask) == (pFromFpga->data & Rsmbeam1PhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmbeam1PhaseStepWString, (unsigned ) pFromFpga->data & Rsmbeam1PhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmbeam1PhaseStepWString, valueSet[0] & Rsmbeam1PhaseStepMask, (unsigned ) pFromFpga->data & Rsmbeam1PhaseStepMask);
			status = asynError;
			setParamStatus(p_Rsmbeam1PhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav4MechprngivaWAdr:
		status = (asynStatus) getIntegerParam(p_Cav4MechprngivaW, valueSet);
		if( (valueSet[0] & Cav4MechprngivaMask) == (pFromFpga->data & Cav4MechprngivaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav4MechprngivaWString, (unsigned ) pFromFpga->data & Cav4MechprngivaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav4MechprngivaWString, valueSet[0] & Cav4MechprngivaMask, (unsigned ) pFromFpga->data & Cav4MechprngivaMask);
			status = asynError;
			setParamStatus(p_Cav4MechprngivaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav4MechprngivbWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav4MechprngivbW, valueSet);
		if( (valueSet[0] & Rsmcav4MechprngivbMask) == (pFromFpga->data & Rsmcav4MechprngivbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav4MechprngivbWString, (unsigned ) pFromFpga->data & Rsmcav4MechprngivbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav4MechprngivbWString, valueSet[0] & Rsmcav4MechprngivbMask, (unsigned ) pFromFpga->data & Rsmcav4MechprngivbMask);
			status = asynError;
			setParamStatus(p_Rsmcav4MechprngivbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav4MechprngrandomRunWAdr:
		status = (asynStatus) getIntegerParam(p_Cav4MechprngrandomRunW, valueSet);
		if( (valueSet[0] & Cav4MechprngrandomRunMask) == (pFromFpga->data & Cav4MechprngrandomRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav4MechprngrandomRunWString, (unsigned ) pFromFpga->data & Cav4MechprngrandomRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav4MechprngrandomRunWString, valueSet[0] & Cav4MechprngrandomRunMask, (unsigned ) pFromFpga->data & Cav4MechprngrandomRunMask);
			status = asynError;
			setParamStatus(p_Cav4MechprngrandomRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0ACavoffsWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0ACavoffsW, valueSet);
		if( (valueSet[0] & Cav0ACavoffsMask) == (pFromFpga->data & Cav0ACavoffsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0ACavoffsWString, (unsigned ) pFromFpga->data & Cav0ACavoffsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0ACavoffsWString, valueSet[0] & Cav0ACavoffsMask, (unsigned ) pFromFpga->data & Cav0ACavoffsMask);
			status = asynError;
			setParamStatus(p_Cav0ACavoffsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0AForoffsWAdr:
		status = (asynStatus) getIntegerParam(p_C0AForoffsW, valueSet);
		if( (valueSet[0] & C0AForoffsMask) == (pFromFpga->data & C0AForoffsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0AForoffsWString, (unsigned ) pFromFpga->data & C0AForoffsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0AForoffsWString, valueSet[0] & C0AForoffsMask, (unsigned ) pFromFpga->data & C0AForoffsMask);
			status = asynError;
			setParamStatus(p_C0AForoffsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0ARfloffsWAdr:
		status = (asynStatus) getIntegerParam(p_C0ARfloffsW, valueSet);
		if( (valueSet[0] & C0ARfloffsMask) == (pFromFpga->data & C0ARfloffsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0ARfloffsWString, (unsigned ) pFromFpga->data & C0ARfloffsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0ARfloffsWString, valueSet[0] & C0ARfloffsMask, (unsigned ) pFromFpga->data & C0ARfloffsMask);
			status = asynError;
			setParamStatus(p_C0ARfloffsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0AmpLpbwWAdr:
		status = (asynStatus) getIntegerParam(p_C0AmpLpbwW, valueSet);
		if( (valueSet[0] & C0AmpLpbwMask) == (pFromFpga->data & C0AmpLpbwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0AmpLpbwWString, (unsigned ) pFromFpga->data & C0AmpLpbwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0AmpLpbwWString, valueSet[0] & C0AmpLpbwMask, (unsigned ) pFromFpga->data & C0AmpLpbwMask);
			status = asynError;
			setParamStatus(p_C0AmpLpbwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecfq0CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecfq0CoarseFreqW, valueSet);
		if( (valueSet[0] & C0Cav4Elecfq0CoarseFreqMask) == (pFromFpga->data & C0Cav4Elecfq0CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq0CoarseFreqWString, (unsigned ) pFromFpga->data & C0Cav4Elecfq0CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq0CoarseFreqWString, valueSet[0] & C0Cav4Elecfq0CoarseFreqMask, (unsigned ) pFromFpga->data & C0Cav4Elecfq0CoarseFreqMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecfq0CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecfq1CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecfq1CoarseFreqW, valueSet);
		if( (valueSet[0] & C0Cav4Elecfq1CoarseFreqMask) == (pFromFpga->data & C0Cav4Elecfq1CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq1CoarseFreqWString, (unsigned ) pFromFpga->data & C0Cav4Elecfq1CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq1CoarseFreqWString, valueSet[0] & C0Cav4Elecfq1CoarseFreqMask, (unsigned ) pFromFpga->data & C0Cav4Elecfq1CoarseFreqMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecfq1CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecfq2CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecfq2CoarseFreqW, valueSet);
		if( (valueSet[0] & C0Cav4Elecfq2CoarseFreqMask) == (pFromFpga->data & C0Cav4Elecfq2CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq2CoarseFreqWString, (unsigned ) pFromFpga->data & C0Cav4Elecfq2CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecfq2CoarseFreqWString, valueSet[0] & C0Cav4Elecfq2CoarseFreqMask, (unsigned ) pFromFpga->data & C0Cav4Elecfq2CoarseFreqMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecfq2CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav0Cav4Elecmode0BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav0Cav4Elecmode0BeamCouplingW, valueSet);
		if( (valueSet[0] & Rsmcav0Cav4Elecmode0BeamCouplingMask) == (pFromFpga->data & Rsmcav0Cav4Elecmode0BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4Elecmode0BeamCouplingWString, (unsigned ) pFromFpga->data & Rsmcav0Cav4Elecmode0BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav0Cav4Elecmode0BeamCouplingWString, valueSet[0] & Rsmcav0Cav4Elecmode0BeamCouplingMask, (unsigned ) pFromFpga->data & Rsmcav0Cav4Elecmode0BeamCouplingMask);
			status = asynError;
			setParamStatus(p_Rsmcav0Cav4Elecmode0BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecmode0BwWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecmode0BwW, valueSet);
		if( (valueSet[0] & C0Cav4Elecmode0BwMask) == (pFromFpga->data & C0Cav4Elecmode0BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode0BwWString, (unsigned ) pFromFpga->data & C0Cav4Elecmode0BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode0BwWString, valueSet[0] & C0Cav4Elecmode0BwMask, (unsigned ) pFromFpga->data & C0Cav4Elecmode0BwMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecmode0BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecmode0DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecmode0DriveCouplingW, valueSet);
		if( (valueSet[0] & C0Cav4Elecmode0DriveCouplingMask) == (pFromFpga->data & C0Cav4Elecmode0DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode0DriveCouplingWString, (unsigned ) pFromFpga->data & C0Cav4Elecmode0DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode0DriveCouplingWString, valueSet[0] & C0Cav4Elecmode0DriveCouplingMask, (unsigned ) pFromFpga->data & C0Cav4Elecmode0DriveCouplingMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecmode0DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingW, valueSet);
		if( (valueSet[0] & Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask) == (pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingWString, (unsigned ) pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingWString, valueSet[0] & Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask, (unsigned ) pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingMask);
			status = asynError;
			setParamStatus(p_Atopdigdsprsmcav0Cav4Elecmode1BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0Cav4Elecmode1BwWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0Cav4Elecmode1BwW, valueSet);
		if( (valueSet[0] & Cav0Cav4Elecmode1BwMask) == (pFromFpga->data & Cav0Cav4Elecmode1BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1BwWString, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode1BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4Elecmode1BwWString, valueSet[0] & Cav0Cav4Elecmode1BwMask, (unsigned ) pFromFpga->data & Cav0Cav4Elecmode1BwMask);
			status = asynError;
			setParamStatus(p_Cav0Cav4Elecmode1BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecmode1DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecmode1DriveCouplingW, valueSet);
		if( (valueSet[0] & C0Cav4Elecmode1DriveCouplingMask) == (pFromFpga->data & C0Cav4Elecmode1DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode1DriveCouplingWString, (unsigned ) pFromFpga->data & C0Cav4Elecmode1DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode1DriveCouplingWString, valueSet[0] & C0Cav4Elecmode1DriveCouplingMask, (unsigned ) pFromFpga->data & C0Cav4Elecmode1DriveCouplingMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecmode1DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingW, valueSet);
		if( (valueSet[0] & Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask) == (pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingWString, (unsigned ) pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingWString, valueSet[0] & Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask, (unsigned ) pFromFpga->data & Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingMask);
			status = asynError;
			setParamStatus(p_Atopdigdsprsmcav0Cav4Elecmode2BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecmode2BwWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecmode2BwW, valueSet);
		if( (valueSet[0] & C0Cav4Elecmode2BwMask) == (pFromFpga->data & C0Cav4Elecmode2BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2BwWString, (unsigned ) pFromFpga->data & C0Cav4Elecmode2BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2BwWString, valueSet[0] & C0Cav4Elecmode2BwMask, (unsigned ) pFromFpga->data & C0Cav4Elecmode2BwMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecmode2BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4Elecmode2DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4Elecmode2DriveCouplingW, valueSet);
		if( (valueSet[0] & C0Cav4Elecmode2DriveCouplingMask) == (pFromFpga->data & C0Cav4Elecmode2DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2DriveCouplingWString, (unsigned ) pFromFpga->data & C0Cav4Elecmode2DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4Elecmode2DriveCouplingWString, valueSet[0] & C0Cav4Elecmode2DriveCouplingMask, (unsigned ) pFromFpga->data & C0Cav4Elecmode2DriveCouplingMask);
			status = asynError;
			setParamStatus(p_C0Cav4Elecmode2DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0Cav4ElecmoduloWAdr:
		status = (asynStatus) getIntegerParam(p_C0Cav4ElecmoduloW, valueSet);
		if( (valueSet[0] & C0Cav4ElecmoduloMask) == (pFromFpga->data & C0Cav4ElecmoduloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecmoduloWString, (unsigned ) pFromFpga->data & C0Cav4ElecmoduloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0Cav4ElecmoduloWString, valueSet[0] & C0Cav4ElecmoduloMask, (unsigned ) pFromFpga->data & C0Cav4ElecmoduloMask);
			status = asynError;
			setParamStatus(p_C0Cav4ElecmoduloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0Cav4ElecphaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0Cav4ElecphaseStepW, valueSet);
		if( (valueSet[0] & Cav0Cav4ElecphaseStepMask) == (pFromFpga->data & Cav0Cav4ElecphaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4ElecphaseStepWString, (unsigned ) pFromFpga->data & Cav0Cav4ElecphaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0Cav4ElecphaseStepWString, valueSet[0] & Cav0Cav4ElecphaseStepMask, (unsigned ) pFromFpga->data & Cav0Cav4ElecphaseStepMask);
			status = asynError;
			setParamStatus(p_Cav0Cav4ElecphaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0ComprsatCtlWAdr:
		status = (asynStatus) getIntegerParam(p_C0ComprsatCtlW, valueSet);
		if( (valueSet[0] & C0ComprsatCtlMask) == (pFromFpga->data & C0ComprsatCtlMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0ComprsatCtlWString, (unsigned ) pFromFpga->data & C0ComprsatCtlMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0ComprsatCtlWString, valueSet[0] & C0ComprsatCtlMask, (unsigned ) pFromFpga->data & C0ComprsatCtlMask);
			status = asynError;
			setParamStatus(p_C0ComprsatCtlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav0PrngivaWAdr:
		status = (asynStatus) getIntegerParam(p_Cav0PrngivaW, valueSet);
		if( (valueSet[0] & Cav0PrngivaMask) == (pFromFpga->data & Cav0PrngivaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0PrngivaWString, (unsigned ) pFromFpga->data & Cav0PrngivaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav0PrngivaWString, valueSet[0] & Cav0PrngivaMask, (unsigned ) pFromFpga->data & Cav0PrngivaMask);
			status = asynError;
			setParamStatus(p_Cav0PrngivaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0PrngivbWAdr:
		status = (asynStatus) getIntegerParam(p_C0PrngivbW, valueSet);
		if( (valueSet[0] & C0PrngivbMask) == (pFromFpga->data & C0PrngivbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0PrngivbWString, (unsigned ) pFromFpga->data & C0PrngivbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0PrngivbWString, valueSet[0] & C0PrngivbMask, (unsigned ) pFromFpga->data & C0PrngivbMask);
			status = asynError;
			setParamStatus(p_C0PrngivbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0PrngrandomRunWAdr:
		status = (asynStatus) getIntegerParam(p_C0PrngrandomRunW, valueSet);
		if( (valueSet[0] & C0PrngrandomRunMask) == (pFromFpga->data & C0PrngrandomRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0PrngrandomRunWString, (unsigned ) pFromFpga->data & C0PrngrandomRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0PrngrandomRunWString, valueSet[0] & C0PrngrandomRunMask, (unsigned ) pFromFpga->data & C0PrngrandomRunMask);
			status = asynError;
			setParamStatus(p_C0PrngrandomRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1ACavoffsWAdr:
		status = (asynStatus) getIntegerParam(p_C1ACavoffsW, valueSet);
		if( (valueSet[0] & C1ACavoffsMask) == (pFromFpga->data & C1ACavoffsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1ACavoffsWString, (unsigned ) pFromFpga->data & C1ACavoffsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1ACavoffsWString, valueSet[0] & C1ACavoffsMask, (unsigned ) pFromFpga->data & C1ACavoffsMask);
			status = asynError;
			setParamStatus(p_C1ACavoffsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Digdsprsmcav1AForoffsWAdr:
		status = (asynStatus) getIntegerParam(p_Digdsprsmcav1AForoffsW, valueSet);
		if( (valueSet[0] & Digdsprsmcav1AForoffsMask) == (pFromFpga->data & Digdsprsmcav1AForoffsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmcav1AForoffsWString, (unsigned ) pFromFpga->data & Digdsprsmcav1AForoffsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Digdsprsmcav1AForoffsWString, valueSet[0] & Digdsprsmcav1AForoffsMask, (unsigned ) pFromFpga->data & Digdsprsmcav1AForoffsMask);
			status = asynError;
			setParamStatus(p_Digdsprsmcav1AForoffsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1ARfloffsWAdr:
		status = (asynStatus) getIntegerParam(p_C1ARfloffsW, valueSet);
		if( (valueSet[0] & C1ARfloffsMask) == (pFromFpga->data & C1ARfloffsMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1ARfloffsWString, (unsigned ) pFromFpga->data & C1ARfloffsMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1ARfloffsWString, valueSet[0] & C1ARfloffsMask, (unsigned ) pFromFpga->data & C1ARfloffsMask);
			status = asynError;
			setParamStatus(p_C1ARfloffsW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav1AmpLpbwWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav1AmpLpbwW, valueSet);
		if( (valueSet[0] & Rsmcav1AmpLpbwMask) == (pFromFpga->data & Rsmcav1AmpLpbwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1AmpLpbwWString, (unsigned ) pFromFpga->data & Rsmcav1AmpLpbwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1AmpLpbwWString, valueSet[0] & Rsmcav1AmpLpbwMask, (unsigned ) pFromFpga->data & Rsmcav1AmpLpbwMask);
			status = asynError;
			setParamStatus(p_Rsmcav1AmpLpbwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecfq0CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecfq0CoarseFreqW, valueSet);
		if( (valueSet[0] & C1Cav4Elecfq0CoarseFreqMask) == (pFromFpga->data & C1Cav4Elecfq0CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq0CoarseFreqWString, (unsigned ) pFromFpga->data & C1Cav4Elecfq0CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq0CoarseFreqWString, valueSet[0] & C1Cav4Elecfq0CoarseFreqMask, (unsigned ) pFromFpga->data & C1Cav4Elecfq0CoarseFreqMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecfq0CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecfq1CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecfq1CoarseFreqW, valueSet);
		if( (valueSet[0] & C1Cav4Elecfq1CoarseFreqMask) == (pFromFpga->data & C1Cav4Elecfq1CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq1CoarseFreqWString, (unsigned ) pFromFpga->data & C1Cav4Elecfq1CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq1CoarseFreqWString, valueSet[0] & C1Cav4Elecfq1CoarseFreqMask, (unsigned ) pFromFpga->data & C1Cav4Elecfq1CoarseFreqMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecfq1CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecfq2CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecfq2CoarseFreqW, valueSet);
		if( (valueSet[0] & C1Cav4Elecfq2CoarseFreqMask) == (pFromFpga->data & C1Cav4Elecfq2CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq2CoarseFreqWString, (unsigned ) pFromFpga->data & C1Cav4Elecfq2CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecfq2CoarseFreqWString, valueSet[0] & C1Cav4Elecfq2CoarseFreqMask, (unsigned ) pFromFpga->data & C1Cav4Elecfq2CoarseFreqMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecfq2CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecmode0BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecmode0BeamCouplingW, valueSet);
		if( (valueSet[0] & C1Cav4Elecmode0BeamCouplingMask) == (pFromFpga->data & C1Cav4Elecmode0BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0BeamCouplingWString, (unsigned ) pFromFpga->data & C1Cav4Elecmode0BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0BeamCouplingWString, valueSet[0] & C1Cav4Elecmode0BeamCouplingMask, (unsigned ) pFromFpga->data & C1Cav4Elecmode0BeamCouplingMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecmode0BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1Cav4Elecmode0BwWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1Cav4Elecmode0BwW, valueSet);
		if( (valueSet[0] & Cav1Cav4Elecmode0BwMask) == (pFromFpga->data & Cav1Cav4Elecmode0BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode0BwWString, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode0BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode0BwWString, valueSet[0] & Cav1Cav4Elecmode0BwMask, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode0BwMask);
			status = asynError;
			setParamStatus(p_Cav1Cav4Elecmode0BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecmode0DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecmode0DriveCouplingW, valueSet);
		if( (valueSet[0] & C1Cav4Elecmode0DriveCouplingMask) == (pFromFpga->data & C1Cav4Elecmode0DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0DriveCouplingWString, (unsigned ) pFromFpga->data & C1Cav4Elecmode0DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode0DriveCouplingWString, valueSet[0] & C1Cav4Elecmode0DriveCouplingMask, (unsigned ) pFromFpga->data & C1Cav4Elecmode0DriveCouplingMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecmode0DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecmode1BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecmode1BeamCouplingW, valueSet);
		if( (valueSet[0] & C1Cav4Elecmode1BeamCouplingMask) == (pFromFpga->data & C1Cav4Elecmode1BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1BeamCouplingWString, (unsigned ) pFromFpga->data & C1Cav4Elecmode1BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1BeamCouplingWString, valueSet[0] & C1Cav4Elecmode1BeamCouplingMask, (unsigned ) pFromFpga->data & C1Cav4Elecmode1BeamCouplingMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecmode1BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav1Cav4Elecmode1BwWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav1Cav4Elecmode1BwW, valueSet);
		if( (valueSet[0] & Rsmcav1Cav4Elecmode1BwMask) == (pFromFpga->data & Rsmcav1Cav4Elecmode1BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode1BwWString, (unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode1BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode1BwWString, valueSet[0] & Rsmcav1Cav4Elecmode1BwMask, (unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode1BwMask);
			status = asynError;
			setParamStatus(p_Rsmcav1Cav4Elecmode1BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4Elecmode1DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4Elecmode1DriveCouplingW, valueSet);
		if( (valueSet[0] & C1Cav4Elecmode1DriveCouplingMask) == (pFromFpga->data & C1Cav4Elecmode1DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1DriveCouplingWString, (unsigned ) pFromFpga->data & C1Cav4Elecmode1DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4Elecmode1DriveCouplingWString, valueSet[0] & C1Cav4Elecmode1DriveCouplingMask, (unsigned ) pFromFpga->data & C1Cav4Elecmode1DriveCouplingMask);
			status = asynError;
			setParamStatus(p_C1Cav4Elecmode1DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav1Cav4Elecmode2BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav1Cav4Elecmode2BeamCouplingW, valueSet);
		if( (valueSet[0] & Rsmcav1Cav4Elecmode2BeamCouplingMask) == (pFromFpga->data & Rsmcav1Cav4Elecmode2BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode2BeamCouplingWString, (unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode2BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1Cav4Elecmode2BeamCouplingWString, valueSet[0] & Rsmcav1Cav4Elecmode2BeamCouplingMask, (unsigned ) pFromFpga->data & Rsmcav1Cav4Elecmode2BeamCouplingMask);
			status = asynError;
			setParamStatus(p_Rsmcav1Cav4Elecmode2BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1Cav4Elecmode2BwWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1Cav4Elecmode2BwW, valueSet);
		if( (valueSet[0] & Cav1Cav4Elecmode2BwMask) == (pFromFpga->data & Cav1Cav4Elecmode2BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode2BwWString, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode2BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1Cav4Elecmode2BwWString, valueSet[0] & Cav1Cav4Elecmode2BwMask, (unsigned ) pFromFpga->data & Cav1Cav4Elecmode2BwMask);
			status = asynError;
			setParamStatus(p_Cav1Cav4Elecmode2BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4ElecmoduloWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4ElecmoduloW, valueSet);
		if( (valueSet[0] & C1Cav4ElecmoduloMask) == (pFromFpga->data & C1Cav4ElecmoduloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecmoduloWString, (unsigned ) pFromFpga->data & C1Cav4ElecmoduloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecmoduloWString, valueSet[0] & C1Cav4ElecmoduloMask, (unsigned ) pFromFpga->data & C1Cav4ElecmoduloMask);
			status = asynError;
			setParamStatus(p_C1Cav4ElecmoduloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1Cav4ElecphaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_C1Cav4ElecphaseStepW, valueSet);
		if( (valueSet[0] & C1Cav4ElecphaseStepMask) == (pFromFpga->data & C1Cav4ElecphaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecphaseStepWString, (unsigned ) pFromFpga->data & C1Cav4ElecphaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1Cav4ElecphaseStepWString, valueSet[0] & C1Cav4ElecphaseStepMask, (unsigned ) pFromFpga->data & C1Cav4ElecphaseStepMask);
			status = asynError;
			setParamStatus(p_C1Cav4ElecphaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Rsmcav1ComprsatCtlWAdr:
		status = (asynStatus) getIntegerParam(p_Rsmcav1ComprsatCtlW, valueSet);
		if( (valueSet[0] & Rsmcav1ComprsatCtlMask) == (pFromFpga->data & Rsmcav1ComprsatCtlMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1ComprsatCtlWString, (unsigned ) pFromFpga->data & Rsmcav1ComprsatCtlMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Rsmcav1ComprsatCtlWString, valueSet[0] & Rsmcav1ComprsatCtlMask, (unsigned ) pFromFpga->data & Rsmcav1ComprsatCtlMask);
			status = asynError;
			setParamStatus(p_Rsmcav1ComprsatCtlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1PrngivaWAdr:
		status = (asynStatus) getIntegerParam(p_C1PrngivaW, valueSet);
		if( (valueSet[0] & C1PrngivaMask) == (pFromFpga->data & C1PrngivaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PrngivaWString, (unsigned ) pFromFpga->data & C1PrngivaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1PrngivaWString, valueSet[0] & C1PrngivaMask, (unsigned ) pFromFpga->data & C1PrngivaMask);
			status = asynError;
			setParamStatus(p_C1PrngivaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Cav1PrngivbWAdr:
		status = (asynStatus) getIntegerParam(p_Cav1PrngivbW, valueSet);
		if( (valueSet[0] & Cav1PrngivbMask) == (pFromFpga->data & Cav1PrngivbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1PrngivbWString, (unsigned ) pFromFpga->data & Cav1PrngivbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Cav1PrngivbWString, valueSet[0] & Cav1PrngivbMask, (unsigned ) pFromFpga->data & Cav1PrngivbMask);
			status = asynError;
			setParamStatus(p_Cav1PrngivbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1PrngrandomRunWAdr:
		status = (asynStatus) getIntegerParam(p_C1PrngrandomRunW, valueSet);
		if( (valueSet[0] & C1PrngrandomRunMask) == (pFromFpga->data & C1PrngrandomRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1PrngrandomRunWString, (unsigned ) pFromFpga->data & C1PrngrandomRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1PrngrandomRunWString, valueSet[0] & C1PrngrandomRunMask, (unsigned ) pFromFpga->data & C1PrngrandomRunMask);
			status = asynError;
			setParamStatus(p_C1PrngrandomRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case RsmdacIqPhaseWAdr:
		status = (asynStatus) getIntegerParam(p_RsmdacIqPhaseW, valueSet);
		if( (valueSet[0] & RsmdacIqPhaseMask) == (pFromFpga->data & RsmdacIqPhaseMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RsmdacIqPhaseWString, (unsigned ) pFromFpga->data & RsmdacIqPhaseMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				RsmdacIqPhaseWString, valueSet[0] & RsmdacIqPhaseMask, (unsigned ) pFromFpga->data & RsmdacIqPhaseMask);
			status = asynError;
			setParamStatus(p_RsmdacIqPhaseW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspchanKeepWAdr:
		status = (asynStatus) getIntegerParam(p_C0DspchanKeepW, valueSet);
		if( (valueSet[0] & C0DspchanKeepMask) == (pFromFpga->data & C0DspchanKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspchanKeepWString, (unsigned ) pFromFpga->data & C0DspchanKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspchanKeepWString, valueSet[0] & C0DspchanKeepMask, (unsigned ) pFromFpga->data & C0DspchanKeepMask);
			status = asynError;
			setParamStatus(p_C0DspchanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspfdbkCorecoarseScaleWAdr:
		status = (asynStatus) getIntegerParam(p_C0DspfdbkCorecoarseScaleW, valueSet);
		if( (valueSet[0] & C0DspfdbkCorecoarseScaleMask) == (pFromFpga->data & C0DspfdbkCorecoarseScaleMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorecoarseScaleWString, (unsigned ) pFromFpga->data & C0DspfdbkCorecoarseScaleMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorecoarseScaleWString, valueSet[0] & C0DspfdbkCorecoarseScaleMask, (unsigned ) pFromFpga->data & C0DspfdbkCorecoarseScaleMask);
			status = asynError;
			setParamStatus(p_C0DspfdbkCorecoarseScaleW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell0DspfdbkCorempProcphOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_Shell0DspfdbkCorempProcphOffsetW, valueSet);
		if( (valueSet[0] & Shell0DspfdbkCorempProcphOffsetMask) == (pFromFpga->data & Shell0DspfdbkCorempProcphOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProcphOffsetWString, (unsigned ) pFromFpga->data & Shell0DspfdbkCorempProcphOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProcphOffsetWString, valueSet[0] & Shell0DspfdbkCorempProcphOffsetMask, (unsigned ) pFromFpga->data & Shell0DspfdbkCorempProcphOffsetMask);
			status = asynError;
			setParamStatus(p_Shell0DspfdbkCorempProcphOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell0DspfdbkCorempProcselEnWAdr:
		status = (asynStatus) getIntegerParam(p_Shell0DspfdbkCorempProcselEnW, valueSet);
		if( (valueSet[0] & Shell0DspfdbkCorempProcselEnMask) == (pFromFpga->data & Shell0DspfdbkCorempProcselEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProcselEnWString, (unsigned ) pFromFpga->data & Shell0DspfdbkCorempProcselEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspfdbkCorempProcselEnWString, valueSet[0] & Shell0DspfdbkCorempProcselEnMask, (unsigned ) pFromFpga->data & Shell0DspfdbkCorempProcselEnMask);
			status = asynError;
			setParamStatus(p_Shell0DspfdbkCorempProcselEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspfdbkCorempProcselThreshWAdr:
		status = (asynStatus) getIntegerParam(p_C0DspfdbkCorempProcselThreshW, valueSet);
		if( (valueSet[0] & C0DspfdbkCorempProcselThreshMask) == (pFromFpga->data & C0DspfdbkCorempProcselThreshMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcselThreshWString, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcselThreshMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspfdbkCorempProcselThreshWString, valueSet[0] & C0DspfdbkCorempProcselThreshMask, (unsigned ) pFromFpga->data & C0DspfdbkCorempProcselThreshMask);
			status = asynError;
			setParamStatus(p_C0DspfdbkCorempProcselThreshW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell0DspmoduloWAdr:
		status = (asynStatus) getIntegerParam(p_Shell0DspmoduloW, valueSet);
		if( (valueSet[0] & Shell0DspmoduloMask) == (pFromFpga->data & Shell0DspmoduloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspmoduloWString, (unsigned ) pFromFpga->data & Shell0DspmoduloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspmoduloWString, valueSet[0] & Shell0DspmoduloMask, (unsigned ) pFromFpga->data & Shell0DspmoduloMask);
			status = asynError;
			setParamStatus(p_Shell0DspmoduloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell0DspphaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_Shell0DspphaseStepW, valueSet);
		if( (valueSet[0] & Shell0DspphaseStepMask) == (pFromFpga->data & Shell0DspphaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspphaseStepWString, (unsigned ) pFromFpga->data & Shell0DspphaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DspphaseStepWString, valueSet[0] & Shell0DspphaseStepMask, (unsigned ) pFromFpga->data & Shell0DspphaseStepMask);
			status = asynError;
			setParamStatus(p_Shell0DspphaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DsppiezopiezoDcWAdr:
		status = (asynStatus) getIntegerParam(p_C0DsppiezopiezoDcW, valueSet);
		if( (valueSet[0] & C0DsppiezopiezoDcMask) == (pFromFpga->data & C0DsppiezopiezoDcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsppiezopiezoDcWString, (unsigned ) pFromFpga->data & C0DsppiezopiezoDcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DsppiezopiezoDcWString, valueSet[0] & C0DsppiezopiezoDcMask, (unsigned ) pFromFpga->data & C0DsppiezopiezoDcMask);
			status = asynError;
			setParamStatus(p_C0DsppiezopiezoDcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell0DsptagWAdr:
		status = (asynStatus) getIntegerParam(p_Shell0DsptagW, valueSet);
		if( (valueSet[0] & Shell0DsptagMask) == (pFromFpga->data & Shell0DsptagMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DsptagWString, (unsigned ) pFromFpga->data & Shell0DsptagMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell0DsptagWString, valueSet[0] & Shell0DsptagMask, (unsigned ) pFromFpga->data & Shell0DsptagMask);
			status = asynError;
			setParamStatus(p_Shell0DsptagW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspuseFiberIqWAdr:
		status = (asynStatus) getIntegerParam(p_C0DspuseFiberIqW, valueSet);
		if( (valueSet[0] & C0DspuseFiberIqMask) == (pFromFpga->data & C0DspuseFiberIqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspuseFiberIqWString, (unsigned ) pFromFpga->data & C0DspuseFiberIqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspuseFiberIqWString, valueSet[0] & C0DspuseFiberIqMask, (unsigned ) pFromFpga->data & C0DspuseFiberIqMask);
			status = asynError;
			setParamStatus(p_C0DspuseFiberIqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspwaveSampPerWAdr:
		status = (asynStatus) getIntegerParam(p_C0DspwaveSampPerW, valueSet);
		if( (valueSet[0] & C0DspwaveSampPerMask) == (pFromFpga->data & C0DspwaveSampPerMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspwaveSampPerWString, (unsigned ) pFromFpga->data & C0DspwaveSampPerMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspwaveSampPerWString, valueSet[0] & C0DspwaveSampPerMask, (unsigned ) pFromFpga->data & C0DspwaveSampPerMask);
			status = asynError;
			setParamStatus(p_C0DspwaveSampPerW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C0DspwaveShiftWAdr:
		status = (asynStatus) getIntegerParam(p_C0DspwaveShiftW, valueSet);
		if( (valueSet[0] & C0DspwaveShiftMask) == (pFromFpga->data & C0DspwaveShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspwaveShiftWString, (unsigned ) pFromFpga->data & C0DspwaveShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C0DspwaveShiftWString, valueSet[0] & C0DspwaveShiftMask, (unsigned ) pFromFpga->data & C0DspwaveShiftMask);
			status = asynError;
			setParamStatus(p_C0DspwaveShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell1DspchanKeepWAdr:
		status = (asynStatus) getIntegerParam(p_Shell1DspchanKeepW, valueSet);
		if( (valueSet[0] & Shell1DspchanKeepMask) == (pFromFpga->data & Shell1DspchanKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspchanKeepWString, (unsigned ) pFromFpga->data & Shell1DspchanKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspchanKeepWString, valueSet[0] & Shell1DspchanKeepMask, (unsigned ) pFromFpga->data & Shell1DspchanKeepMask);
			status = asynError;
			setParamStatus(p_Shell1DspchanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspfdbkCorecoarseScaleWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspfdbkCorecoarseScaleW, valueSet);
		if( (valueSet[0] & C1DspfdbkCorecoarseScaleMask) == (pFromFpga->data & C1DspfdbkCorecoarseScaleMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorecoarseScaleWString, (unsigned ) pFromFpga->data & C1DspfdbkCorecoarseScaleMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorecoarseScaleWString, valueSet[0] & C1DspfdbkCorecoarseScaleMask, (unsigned ) pFromFpga->data & C1DspfdbkCorecoarseScaleMask);
			status = asynError;
			setParamStatus(p_C1DspfdbkCorecoarseScaleW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspfdbkCorempProcphOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspfdbkCorempProcphOffsetW, valueSet);
		if( (valueSet[0] & C1DspfdbkCorempProcphOffsetMask) == (pFromFpga->data & C1DspfdbkCorempProcphOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcphOffsetWString, (unsigned ) pFromFpga->data & C1DspfdbkCorempProcphOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcphOffsetWString, valueSet[0] & C1DspfdbkCorempProcphOffsetMask, (unsigned ) pFromFpga->data & C1DspfdbkCorempProcphOffsetMask);
			status = asynError;
			setParamStatus(p_C1DspfdbkCorempProcphOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspfdbkCorempProcselEnWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspfdbkCorempProcselEnW, valueSet);
		if( (valueSet[0] & C1DspfdbkCorempProcselEnMask) == (pFromFpga->data & C1DspfdbkCorempProcselEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcselEnWString, (unsigned ) pFromFpga->data & C1DspfdbkCorempProcselEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcselEnWString, valueSet[0] & C1DspfdbkCorempProcselEnMask, (unsigned ) pFromFpga->data & C1DspfdbkCorempProcselEnMask);
			status = asynError;
			setParamStatus(p_C1DspfdbkCorempProcselEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspfdbkCorempProcselThreshWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspfdbkCorempProcselThreshW, valueSet);
		if( (valueSet[0] & C1DspfdbkCorempProcselThreshMask) == (pFromFpga->data & C1DspfdbkCorempProcselThreshMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcselThreshWString, (unsigned ) pFromFpga->data & C1DspfdbkCorempProcselThreshMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspfdbkCorempProcselThreshWString, valueSet[0] & C1DspfdbkCorempProcselThreshMask, (unsigned ) pFromFpga->data & C1DspfdbkCorempProcselThreshMask);
			status = asynError;
			setParamStatus(p_C1DspfdbkCorempProcselThreshW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspmoduloWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspmoduloW, valueSet);
		if( (valueSet[0] & C1DspmoduloMask) == (pFromFpga->data & C1DspmoduloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspmoduloWString, (unsigned ) pFromFpga->data & C1DspmoduloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspmoduloWString, valueSet[0] & C1DspmoduloMask, (unsigned ) pFromFpga->data & C1DspmoduloMask);
			status = asynError;
			setParamStatus(p_C1DspmoduloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspphaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspphaseStepW, valueSet);
		if( (valueSet[0] & C1DspphaseStepMask) == (pFromFpga->data & C1DspphaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspphaseStepWString, (unsigned ) pFromFpga->data & C1DspphaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspphaseStepWString, valueSet[0] & C1DspphaseStepMask, (unsigned ) pFromFpga->data & C1DspphaseStepMask);
			status = asynError;
			setParamStatus(p_C1DspphaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DsppiezopiezoDcWAdr:
		status = (asynStatus) getIntegerParam(p_C1DsppiezopiezoDcW, valueSet);
		if( (valueSet[0] & C1DsppiezopiezoDcMask) == (pFromFpga->data & C1DsppiezopiezoDcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsppiezopiezoDcWString, (unsigned ) pFromFpga->data & C1DsppiezopiezoDcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsppiezopiezoDcWString, valueSet[0] & C1DsppiezopiezoDcMask, (unsigned ) pFromFpga->data & C1DsppiezopiezoDcMask);
			status = asynError;
			setParamStatus(p_C1DsppiezopiezoDcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DsptagWAdr:
		status = (asynStatus) getIntegerParam(p_C1DsptagW, valueSet);
		if( (valueSet[0] & C1DsptagMask) == (pFromFpga->data & C1DsptagMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsptagWString, (unsigned ) pFromFpga->data & C1DsptagMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DsptagWString, valueSet[0] & C1DsptagMask, (unsigned ) pFromFpga->data & C1DsptagMask);
			status = asynError;
			setParamStatus(p_C1DsptagW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspuseFiberIqWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspuseFiberIqW, valueSet);
		if( (valueSet[0] & C1DspuseFiberIqMask) == (pFromFpga->data & C1DspuseFiberIqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspuseFiberIqWString, (unsigned ) pFromFpga->data & C1DspuseFiberIqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspuseFiberIqWString, valueSet[0] & C1DspuseFiberIqMask, (unsigned ) pFromFpga->data & C1DspuseFiberIqMask);
			status = asynError;
			setParamStatus(p_C1DspuseFiberIqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case C1DspwaveSampPerWAdr:
		status = (asynStatus) getIntegerParam(p_C1DspwaveSampPerW, valueSet);
		if( (valueSet[0] & C1DspwaveSampPerMask) == (pFromFpga->data & C1DspwaveSampPerMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspwaveSampPerWString, (unsigned ) pFromFpga->data & C1DspwaveSampPerMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				C1DspwaveSampPerWString, valueSet[0] & C1DspwaveSampPerMask, (unsigned ) pFromFpga->data & C1DspwaveSampPerMask);
			status = asynError;
			setParamStatus(p_C1DspwaveSampPerW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Shell1DspwaveShiftWAdr:
		status = (asynStatus) getIntegerParam(p_Shell1DspwaveShiftW, valueSet);
		if( (valueSet[0] & Shell1DspwaveShiftMask) == (pFromFpga->data & Shell1DspwaveShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspwaveShiftWString, (unsigned ) pFromFpga->data & Shell1DspwaveShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Shell1DspwaveShiftWString, valueSet[0] & Shell1DspwaveShiftMask, (unsigned ) pFromFpga->data & Shell1DspwaveShiftMask);
			status = asynError;
			setParamStatus(p_Shell1DspwaveShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case AtopdigdsprewindWAdr:
		status = (asynStatus) getIntegerParam(p_AtopdigdsprewindW, valueSet);
		if( (valueSet[0] & AtopdigdsprewindMask) == (pFromFpga->data & AtopdigdsprewindMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AtopdigdsprewindWString, (unsigned ) pFromFpga->data & AtopdigdsprewindMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AtopdigdsprewindWString, valueSet[0] & AtopdigdsprewindMask, (unsigned ) pFromFpga->data & AtopdigdsprewindMask);
			status = asynError;
			setParamStatus(p_AtopdigdsprewindW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case AmpstepWAdr:
		status = (asynStatus) getIntegerParam(p_AmpstepW, valueSet);
		if( (valueSet[0] & AmpstepMask) == (pFromFpga->data & AmpstepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AmpstepWString, (unsigned ) pFromFpga->data & AmpstepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AmpstepWString, valueSet[0] & AmpstepMask, (unsigned ) pFromFpga->data & AmpstepMask);
			status = asynError;
			setParamStatus(p_AmpstepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case SsaStimEnWAdr:
		status = (asynStatus) getIntegerParam(p_SsaStimEnW, valueSet);
		if( (valueSet[0] & SsaStimEnMask) == (pFromFpga->data & SsaStimEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimEnWString, (unsigned ) pFromFpga->data & SsaStimEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimEnWString, valueSet[0] & SsaStimEnMask, (unsigned ) pFromFpga->data & SsaStimEnMask);
			status = asynError;
			setParamStatus(p_SsaStimEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case SsaStimgPeriodWAdr:
		status = (asynStatus) getIntegerParam(p_SsaStimgPeriodW, valueSet);
		if( (valueSet[0] & SsaStimgPeriodMask) == (pFromFpga->data & SsaStimgPeriodMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimgPeriodWString, (unsigned ) pFromFpga->data & SsaStimgPeriodMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimgPeriodWString, valueSet[0] & SsaStimgPeriodMask, (unsigned ) pFromFpga->data & SsaStimgPeriodMask);
			status = asynError;
			setParamStatus(p_SsaStimgPeriodW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case SsaStimpertstepWAdr:
		status = (asynStatus) getIntegerParam(p_SsaStimpertstepW, valueSet);
		if( (valueSet[0] & SsaStimpertstepMask) == (pFromFpga->data & SsaStimpertstepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimpertstepWString, (unsigned ) pFromFpga->data & SsaStimpertstepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				SsaStimpertstepWString, valueSet[0] & SsaStimpertstepMask, (unsigned ) pFromFpga->data & SsaStimpertstepMask);
			status = asynError;
			setParamStatus(p_SsaStimpertstepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigdsptraceKeepWAdr:
		status = (asynStatus) getIntegerParam(p_DigdsptraceKeepW, valueSet);
		if( (valueSet[0] & DigdsptraceKeepMask) == (pFromFpga->data & DigdsptraceKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigdsptraceKeepWString, (unsigned ) pFromFpga->data & DigdsptraceKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigdsptraceKeepWString, valueSet[0] & DigdsptraceKeepMask, (unsigned ) pFromFpga->data & DigdsptraceKeepMask);
			status = asynError;
			setParamStatus(p_DigdsptraceKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case TraceResetWeWAdr:
		status = (asynStatus) getIntegerParam(p_TraceResetWeW, valueSet);
		if( (valueSet[0] & TraceResetWeMask) == (pFromFpga->data & TraceResetWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceResetWeWString, (unsigned ) pFromFpga->data & TraceResetWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				TraceResetWeWString, valueSet[0] & TraceResetWeMask, (unsigned ) pFromFpga->data & TraceResetWeMask);
			status = asynError;
			setParamStatus(p_TraceResetWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case TrigInternalWAdr:
		status = (asynStatus) getIntegerParam(p_TrigInternalW, valueSet);
		if( (valueSet[0] & TrigInternalMask) == (pFromFpga->data & TrigInternalMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TrigInternalWString, (unsigned ) pFromFpga->data & TrigInternalMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				TrigInternalWString, valueSet[0] & TrigInternalMask, (unsigned ) pFromFpga->data & TrigInternalMask);
			status = asynError;
			setParamStatus(p_TrigInternalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case TrigModeWAdr:
		status = (asynStatus) getIntegerParam(p_TrigModeW, valueSet);
		if( (valueSet[0] & TrigModeMask) == (pFromFpga->data & TrigModeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TrigModeWString, (unsigned ) pFromFpga->data & TrigModeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				TrigModeWString, valueSet[0] & TrigModeMask, (unsigned ) pFromFpga->data & TrigModeMask);
			status = asynError;
			setParamStatus(p_TrigModeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Wave0SrcWAdr:
		status = (asynStatus) getIntegerParam(p_Wave0SrcW, valueSet);
		if( (valueSet[0] & Wave0SrcMask) == (pFromFpga->data & Wave0SrcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave0SrcWString, (unsigned ) pFromFpga->data & Wave0SrcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Wave0SrcWString, valueSet[0] & Wave0SrcMask, (unsigned ) pFromFpga->data & Wave0SrcMask);
			status = asynError;
			setParamStatus(p_Wave0SrcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case Wave1SrcWAdr:
		status = (asynStatus) getIntegerParam(p_Wave1SrcW, valueSet);
		if( (valueSet[0] & Wave1SrcMask) == (pFromFpga->data & Wave1SrcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave1SrcWString, (unsigned ) pFromFpga->data & Wave1SrcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				Wave1SrcWString, valueSet[0] & Wave1SrcMask, (unsigned ) pFromFpga->data & Wave1SrcMask);
			status = asynError;
			setParamStatus(p_Wave1SrcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DomainJumpRealignWAdr:
		status = (asynStatus) getIntegerParam(p_DomainJumpRealignW, valueSet);
		if( (valueSet[0] & DomainJumpRealignMask) == (pFromFpga->data & DomainJumpRealignMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignWString, (unsigned ) pFromFpga->data & DomainJumpRealignMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignWString, valueSet[0] & DomainJumpRealignMask, (unsigned ) pFromFpga->data & DomainJumpRealignMask);
			status = asynError;
			setParamStatus(p_DomainJumpRealignW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case IccCfgWAdr:
		status = (asynStatus) getIntegerParam(p_IccCfgW, valueSet);
		if( (valueSet[0] & IccCfgMask) == (pFromFpga->data & IccCfgMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgWString, (unsigned ) pFromFpga->data & IccCfgMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgWString, valueSet[0] & IccCfgMask, (unsigned ) pFromFpga->data & IccCfgMask);
			status = asynError;
			setParamStatus(p_IccCfgW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case QsfpI2CRegWAdr:
		status = (asynStatus) getIntegerParam(p_QsfpI2CRegW, valueSet);
		if( (valueSet[0] & QsfpI2CRegMask) == (pFromFpga->data & QsfpI2CRegMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegWString, (unsigned ) pFromFpga->data & QsfpI2CRegMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegWString, valueSet[0] & QsfpI2CRegMask, (unsigned ) pFromFpga->data & QsfpI2CRegMask);
			status = asynError;
			setParamStatus(p_QsfpI2CRegW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case SfpAddressSetWAdr:
		status = (asynStatus) getIntegerParam(p_SfpAddressSetW, valueSet);
		if( (valueSet[0] & SfpAddressSetMask) == (pFromFpga->data & SfpAddressSetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetWString, (unsigned ) pFromFpga->data & SfpAddressSetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetWString, valueSet[0] & SfpAddressSetMask, (unsigned ) pFromFpga->data & SfpAddressSetMask);
			status = asynError;
			setParamStatus(p_SfpAddressSetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case TagNowWAdr:
		status = (asynStatus) getIntegerParam(p_TagNowW, valueSet);
		if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowWString, (unsigned ) pFromFpga->data & TagNowMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
			status = asynError;
			setParamStatus(p_TagNowW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
	default:
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);

		status = asynError;
		break;
    }

	// TODO: handle arrays

    return status;
}



extern "C" {

/* Configuration routine.  Called directly, or from the iocsh function below */

/** EPICS iocsh callable function to call constructor for the scllrfPRC class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asynIPport this will use to communicate */
int scllrfPRCConfigure(const char *drvPortName, const char *netPortName)
{
	new scllrfPRCDriver(drvPortName, netPortName);
	return asynSuccess;
}


/* EPICS iocsh shell commands */

static const iocshArg initArg0 = { "drvPortName",iocshArgString};
static const iocshArg initArg1 = { "IP port name",iocshArgString};
static const iocshArg * const initArgs[] = {&initArg0,
		&initArg1};
static const iocshFuncDef initFuncDef = {"scllrfPRCConfigure",2,initArgs};
static void initCallFunc(const iocshArgBuf *args)
{
	scllrfPRCConfigure(args[0].sval, args[1].sval);
}

void scllrfPRCRegister(void)
{
	iocshRegister(&initFuncDef,initCallFunc);
}

epicsExportRegistrar(scllrfPRCRegister);

}



