/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : scllrfPRCDriver.h
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Header defining register interface to scllrfPRC, autogenerated from a python
 * dictionary.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/

#include "scllrfPRC.h"
#include <asynOctetSyncIO.h>
#include <asynCommonSyncIO.h>
#include <limits>
#include <netinet/in.h>
#include <iostream>
using namespace std;
#include <math.h>

/** Constructor for the scllrfPRC class.
 * Calls constructor for the asynPortDriver base class.
 * \param[in] drvPortName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asyn port driver to use for the network connection
 * \param[in] maxAddr The number of channels for the paramater with the most channels
 * \paarm[in] paramTableSize The number of asyn params to be created for each device
 *
 * */
//scllrfPRCDriver::scllrfPRCDriver(const char *drvPortName, const char *netPortName)
//: scllrfAsynPortDriver(drvPortName, netPortName,
//		8, /* maxAddr, i.e. number of channels */
//		NUM_SCLLRFPRC_PARAMS)
//{
//	// NUM_SCLLRFPRC_PARAMS is a macro using protected member variables,
//	// which the compiler has problems with..
//	scllrfPRCDriver(drvPortName, netPortName, 8, NUM_SCLLRFPRC_PARAMS);
//};

scllrfPRCDriver::scllrfPRCDriver(const char *drvPortName, const char *netPortName, int maxAddr, int paramTableAdds)
: scllrfAsynPortDriver(drvPortName, netPortName,
		maxAddr, /* maxAddr, i.e. number of channels */
		paramTableAdds + NUM_SCLLRFPRC_PARAMS)
{
    epicsThreadSleep(defaultPollPeriod);

    createParam(HellRString, asynParamInt32, &p_HellR);
    createParam(U15SdioAsSdoRString, asynParamInt32, &p_U15SdioAsSdoR);
    createParam(U15SdoAddrRString, asynParamInt32, &p_U15SdoAddrR);
    createParam(U15SpiReadyRString, asynParamInt32, &p_U15SpiReadyR);
    createParam(U18SdioAsSdoRString, asynParamInt32, &p_U18SdioAsSdoR);
    createParam(U18SdoAddrRString, asynParamInt32, &p_U18SdoAddrR);
    createParam(U18SpiReadyRString, asynParamInt32, &p_U18SpiReadyR);
    createParam(U2DoutBits31To0RString, asynParamInt32, &p_U2DoutBits31To0R);
    createParam(U2DoutBits63To32RString, asynParamInt32, &p_U2DoutBits63To32R);
    createParam(U3DoutBits31To0RString, asynParamInt32, &p_U3DoutBits31To0R);
    createParam(U3DoutBits63To32RString, asynParamInt32, &p_U3DoutBits63To32R);
    createParam(U15SpiRdbkRString, asynParamInt32, &p_U15SpiRdbkR);
    createParam(U18SpiRdbkRString, asynParamInt32, &p_U18SpiRdbkR);
    createParam(AdcMmcmRString, asynParamInt32, &p_AdcMmcmR);
    createParam(AdcMmcmWString, asynParamInt32, &p_AdcMmcmW);
    createParam(AdcTestTrigCntRString, asynParamInt32, &p_AdcTestTrigCntR);
    createParam(AdcTestWave1OutRString, asynParamInt32, &p_AdcTestWave1OutR);
    createParam(AdcTestWave2OutRString, asynParamInt32, &p_AdcTestWave2OutR);
    createParam(AdcTestWave3OutRString, asynParamInt32, &p_AdcTestWave3OutR);
    createParam(AdcTestWave4OutRString, asynParamInt32, &p_AdcTestWave4OutR);
    createParam(BanyanBufRString, asynParamInt32Array, &p_BanyanBufR);
    createParam(BanyanStatusRString, asynParamInt32, &p_BanyanStatusR);
    createParam(ClkPhaseDiffOutU2RString, asynParamInt32, &p_ClkPhaseDiffOutU2R);
    createParam(ClkPhaseDiffOutU3RString, asynParamInt32, &p_ClkPhaseDiffOutU3R);
    createParam(ClkStatusOutRString, asynParamInt32, &p_ClkStatusOutR);
    createParam(CrcErrorsRString, asynParamInt32, &p_CrcErrorsR);
    createParam(CtraceRunningRString, asynParamInt32, &p_CtraceRunningR);
    createParam(D0A0D0ARString, asynParamInt32, &p_D0A0D0AR);
    createParam(DigConfigU15SpiDataAddrRRString, asynParamInt32, &p_DigConfigU15SpiDataAddrRR);
    createParam(DigConfigU15SpiDataAddrRWString, asynParamInt32, &p_DigConfigU15SpiDataAddrRW);
    createParam(DigConfigU15SpiReadAndStartRRString, asynParamInt32, &p_DigConfigU15SpiReadAndStartRR);
    createParam(DigConfigU15SpiReadAndStartRWString, asynParamInt32, &p_DigConfigU15SpiReadAndStartRW);
    createParam(DigConfigU18SpiDataAddrRRString, asynParamInt32, &p_DigConfigU18SpiDataAddrRR);
    createParam(DigConfigU18SpiDataAddrRWString, asynParamInt32, &p_DigConfigU18SpiDataAddrRW);
    createParam(DigConfigU18SpiReadAndStartRRString, asynParamInt32, &p_DigConfigU18SpiReadAndStartRR);
    createParam(DigConfigU18SpiReadAndStartRWString, asynParamInt32, &p_DigConfigU18SpiReadAndStartRW);
    createParam(DigConfigU2ClkResetRRString, asynParamInt32, &p_DigConfigU2ClkResetRR);
    createParam(DigConfigU2ClkResetRWString, asynParamInt32, &p_DigConfigU2ClkResetRW);
    createParam(DigConfigU2IserdesResetRRString, asynParamInt32, &p_DigConfigU2IserdesResetRR);
    createParam(DigConfigU2IserdesResetRWString, asynParamInt32, &p_DigConfigU2IserdesResetRW);
    createParam(DigConfigU3ClkResetRRString, asynParamInt32, &p_DigConfigU3ClkResetRR);
    createParam(DigConfigU3ClkResetRWString, asynParamInt32, &p_DigConfigU3ClkResetRW);
    createParam(DigConfigU3IserdesResetRRString, asynParamInt32, &p_DigConfigU3IserdesResetRR);
    createParam(DigConfigU3IserdesResetRWString, asynParamInt32, &p_DigConfigU3IserdesResetRW);
    createParam(DigConfigU4ResetRRString, asynParamInt32, &p_DigConfigU4ResetRR);
    createParam(DigConfigU4ResetRWString, asynParamInt32, &p_DigConfigU4ResetRW);
    createParam(DigConfigBanyanMaskRString, asynParamInt32, &p_DigConfigBanyanMaskR);
    createParam(DigConfigBanyanMaskWString, asynParamInt32, &p_DigConfigBanyanMaskW);
    createParam(DigConfigBitslipRString, asynParamInt32, &p_DigConfigBitslipR);
    createParam(DigConfigBitslipWString, asynParamInt32, &p_DigConfigBitslipW);
    createParam(DigConfigClkStatusWeRString, asynParamInt32, &p_DigConfigClkStatusWeR);
    createParam(DigConfigClkStatusWeWString, asynParamInt32, &p_DigConfigClkStatusWeW);
    createParam(DigConfigIdelayctrlResetRRString, asynParamInt32, &p_DigConfigIdelayctrlResetRR);
    createParam(DigConfigIdelayctrlResetRWString, asynParamInt32, &p_DigConfigIdelayctrlResetRW);
    createParam(DigConfigLlspiWeRString, asynParamInt32, &p_DigConfigLlspiWeR);
    createParam(DigConfigLlspiWeWString, asynParamInt32, &p_DigConfigLlspiWeW);
    createParam(DigConfigMmcmResetRRString, asynParamInt32, &p_DigConfigMmcmResetRR);
    createParam(DigConfigMmcmResetRWString, asynParamInt32, &p_DigConfigMmcmResetRW);
    createParam(DigConfigPeriphConfigRString, asynParamInt32, &p_DigConfigPeriphConfigR);
    createParam(DigConfigPeriphConfigWString, asynParamInt32, &p_DigConfigPeriphConfigW);
    createParam(DigConfigPhasexTrigRString, asynParamInt32, &p_DigConfigPhasexTrigR);
    createParam(DigConfigPhasexTrigWString, asynParamInt32, &p_DigConfigPhasexTrigW);
    createParam(DigConfigRawadcTrigRString, asynParamInt32, &p_DigConfigRawadcTrigR);
    createParam(DigConfigRawadcTrigWString, asynParamInt32, &p_DigConfigRawadcTrigW);
    createParam(DigConfigScanTriggerWeRString, asynParamInt32, &p_DigConfigScanTriggerWeR);
    createParam(DigConfigScanTriggerWeWString, asynParamInt32, &p_DigConfigScanTriggerWeW);
    createParam(DigConfigScannerDebugRString, asynParamInt32, &p_DigConfigScannerDebugR);
    createParam(DigConfigScannerDebugWString, asynParamInt32, &p_DigConfigScannerDebugW);
    createParam(DigConfigSyncAd7794CsetRString, asynParamInt32, &p_DigConfigSyncAd7794CsetR);
    createParam(DigConfigSyncAd7794CsetWString, asynParamInt32, &p_DigConfigSyncAd7794CsetW);
    createParam(DigConfigSyncTps62210CsetRString, asynParamInt32, &p_DigConfigSyncTps62210CsetR);
    createParam(DigConfigSyncTps62210CsetWString, asynParamInt32, &p_DigConfigSyncTps62210CsetW);
    createParam(DigDspAdcTestModeRString, asynParamInt32, &p_DigDspAdcTestModeR);
    createParam(DigDspAdcTestModeWString, asynParamInt32, &p_DigDspAdcTestModeW);
    createParam(DigDspAdcTestResetRString, asynParamInt32, &p_DigDspAdcTestResetR);
    createParam(DigDspAdcTestResetWString, asynParamInt32, &p_DigDspAdcTestResetW);
    createParam(DigDspAmplitudeRString, asynParamInt32, &p_DigDspAmplitudeR);
    createParam(DigDspAmplitudeWString, asynParamInt32, &p_DigDspAmplitudeW);
    createParam(DigDspAverageLenRString, asynParamInt32, &p_DigDspAverageLenR);
    createParam(DigDspAverageLenWString, asynParamInt32, &p_DigDspAverageLenW);
    createParam(DigDspBufTrigRString, asynParamInt32, &p_DigDspBufTrigR);
    createParam(DigDspBufTrigWString, asynParamInt32, &p_DigDspBufTrigW);
    createParam(DigDspCicPeriodRString, asynParamInt32, &p_DigDspCicPeriodR);
    createParam(DigDspCicPeriodWString, asynParamInt32, &p_DigDspCicPeriodW);
    createParam(DigDspCicShiftRString, asynParamInt32, &p_DigDspCicShiftR);
    createParam(DigDspCicShiftWString, asynParamInt32, &p_DigDspCicShiftW);
    createParam(DigDspCircleBufFlipRString, asynParamInt32, &p_DigDspCircleBufFlipR);
    createParam(DigDspCircleBufFlipWString, asynParamInt32, &p_DigDspCircleBufFlipW);
    createParam(DigDspDacDdsResetRString, asynParamInt32, &p_DigDspDacDdsResetR);
    createParam(DigDspDacDdsResetWString, asynParamInt32, &p_DigDspDacDdsResetW);
    createParam(DigDspDacModeRString, asynParamInt32, &p_DigDspDacModeR);
    createParam(DigDspDacModeWString, asynParamInt32, &p_DigDspDacModeW);
    createParam(DigDspDdsaModuloRString, asynParamInt32, &p_DigDspDdsaModuloR);
    createParam(DigDspDdsaModuloWString, asynParamInt32, &p_DigDspDdsaModuloW);
    createParam(DigDspDdsaPhstepHRString, asynParamInt32, &p_DigDspDdsaPhstepHR);
    createParam(DigDspDdsaPhstepHWString, asynParamInt32, &p_DigDspDdsaPhstepHW);
    createParam(DigDspDdsaPhstepLRString, asynParamInt32, &p_DigDspDdsaPhstepLR);
    createParam(DigDspDdsaPhstepLWString, asynParamInt32, &p_DigDspDdsaPhstepLW);
    createParam(DigDspHistCountWStrobeRString, asynParamInt32, &p_DigDspHistCountWStrobeR);
    createParam(DigDspHistCountWStrobeWString, asynParamInt32, &p_DigDspHistCountWStrobeW);
    createParam(DigDspLlrfDspDacEnRString, asynParamInt32, &p_DigDspLlrfDspDacEnR);
    createParam(DigDspLlrfDspDacEnWString, asynParamInt32, &p_DigDspLlrfDspDacEnW);
    createParam(DigDspLoAmpRString, asynParamInt32, &p_DigDspLoAmpR);
    createParam(DigDspLoAmpWString, asynParamInt32, &p_DigDspLoAmpW);
    createParam(DigDspModuloRString, asynParamInt32, &p_DigDspModuloR);
    createParam(DigDspModuloWString, asynParamInt32, &p_DigDspModuloW);
    createParam(DigDspMuxBeam0ModuloRString, asynParamInt32, &p_DigDspMuxBeam0ModuloR);
    createParam(DigDspMuxBeam0ModuloWString, asynParamInt32, &p_DigDspMuxBeam0ModuloW);
    createParam(DigDspMuxBeam0PhaseInitRString, asynParamInt32, &p_DigDspMuxBeam0PhaseInitR);
    createParam(DigDspMuxBeam0PhaseInitWString, asynParamInt32, &p_DigDspMuxBeam0PhaseInitW);
    createParam(DigDspMuxBeam0PhaseStepRString, asynParamInt32, &p_DigDspMuxBeam0PhaseStepR);
    createParam(DigDspMuxBeam0PhaseStepWString, asynParamInt32, &p_DigDspMuxBeam0PhaseStepW);
    createParam(DigDspMuxBeam1ModuloRString, asynParamInt32, &p_DigDspMuxBeam1ModuloR);
    createParam(DigDspMuxBeam1ModuloWString, asynParamInt32, &p_DigDspMuxBeam1ModuloW);
    createParam(DigDspMuxBeam1PhaseInitRString, asynParamInt32, &p_DigDspMuxBeam1PhaseInitR);
    createParam(DigDspMuxBeam1PhaseInitWString, asynParamInt32, &p_DigDspMuxBeam1PhaseInitW);
    createParam(DigDspMuxBeam1PhaseStepRString, asynParamInt32, &p_DigDspMuxBeam1PhaseStepR);
    createParam(DigDspMuxBeam1PhaseStepWString, asynParamInt32, &p_DigDspMuxBeam1PhaseStepW);
    createParam(DigDspMuxC0ACavOffsetRString, asynParamInt32, &p_DigDspMuxC0ACavOffsetR);
    createParam(DigDspMuxC0ACavOffsetWString, asynParamInt32, &p_DigDspMuxC0ACavOffsetW);
    createParam(DigDspMuxC0AForOffsetRString, asynParamInt32, &p_DigDspMuxC0AForOffsetR);
    createParam(DigDspMuxC0AForOffsetWString, asynParamInt32, &p_DigDspMuxC0AForOffsetW);
    createParam(DigDspMuxC0ARflOffsetRString, asynParamInt32, &p_DigDspMuxC0ARflOffsetR);
    createParam(DigDspMuxC0ARflOffsetWString, asynParamInt32, &p_DigDspMuxC0ARflOffsetW);
    createParam(DigDspMuxC0AmpLpBwRString, asynParamInt32, &p_DigDspMuxC0AmpLpBwR);
    createParam(DigDspMuxC0AmpLpBwWString, asynParamInt32, &p_DigDspMuxC0AmpLpBwW);
    createParam(DigDspMuxC0ComprSatCtlRString, asynParamInt32, &p_DigDspMuxC0ComprSatCtlR);
    createParam(DigDspMuxC0ComprSatCtlWString, asynParamInt32, &p_DigDspMuxC0ComprSatCtlW);
    createParam(DigDspMuxC0ElecDot0KOutRString, asynParamInt32Array, &p_DigDspMuxC0ElecDot0KOutR);
    createParam(DigDspMuxC0ElecDot0KOutWString, asynParamInt32Array, &p_DigDspMuxC0ElecDot0KOutW);
    createParam(DigDspMuxC0ElecDot1KOutRString, asynParamInt32Array, &p_DigDspMuxC0ElecDot1KOutR);
    createParam(DigDspMuxC0ElecDot1KOutWString, asynParamInt32Array, &p_DigDspMuxC0ElecDot1KOutW);
    createParam(DigDspMuxC0ElecDot2KOutRString, asynParamInt32Array, &p_DigDspMuxC0ElecDot2KOutR);
    createParam(DigDspMuxC0ElecDot2KOutWString, asynParamInt32Array, &p_DigDspMuxC0ElecDot2KOutW);
    createParam(DigDspMuxC0ElecDriveCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecDriveCplOutCouplingR);
    createParam(DigDspMuxC0ElecDriveCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecDriveCplOutCouplingW);
    createParam(DigDspMuxC0ElecDriveCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC0ElecDriveCplOutPhaseOffsetR);
    createParam(DigDspMuxC0ElecDriveCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC0ElecDriveCplOutPhaseOffsetW);
    createParam(DigDspMuxC0ElecFreq0CoarseFreqRString, asynParamInt32, &p_DigDspMuxC0ElecFreq0CoarseFreqR);
    createParam(DigDspMuxC0ElecFreq0CoarseFreqWString, asynParamInt32, &p_DigDspMuxC0ElecFreq0CoarseFreqW);
    createParam(DigDspMuxC0ElecFreq1CoarseFreqRString, asynParamInt32, &p_DigDspMuxC0ElecFreq1CoarseFreqR);
    createParam(DigDspMuxC0ElecFreq1CoarseFreqWString, asynParamInt32, &p_DigDspMuxC0ElecFreq1CoarseFreqW);
    createParam(DigDspMuxC0ElecFreq2CoarseFreqRString, asynParamInt32, &p_DigDspMuxC0ElecFreq2CoarseFreqR);
    createParam(DigDspMuxC0ElecFreq2CoarseFreqWString, asynParamInt32, &p_DigDspMuxC0ElecFreq2CoarseFreqW);
    createParam(DigDspMuxC0ElecM0BeamCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM0BeamCouplingR);
    createParam(DigDspMuxC0ElecM0BeamCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM0BeamCouplingW);
    createParam(DigDspMuxC0ElecM0BwRString, asynParamInt32, &p_DigDspMuxC0ElecM0BwR);
    createParam(DigDspMuxC0ElecM0BwWString, asynParamInt32, &p_DigDspMuxC0ElecM0BwW);
    createParam(DigDspMuxC0ElecM0DriveCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM0DriveCouplingR);
    createParam(DigDspMuxC0ElecM0DriveCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM0DriveCouplingW);
    createParam(DigDspMuxC0ElecM0OutCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM0OutCplOutCouplingR);
    createParam(DigDspMuxC0ElecM0OutCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM0OutCplOutCouplingW);
    createParam(DigDspMuxC0ElecM0OutCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC0ElecM0OutCplOutPhaseOffsetR);
    createParam(DigDspMuxC0ElecM0OutCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC0ElecM0OutCplOutPhaseOffsetW);
    createParam(DigDspMuxC0ElecM1BeamCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM1BeamCouplingR);
    createParam(DigDspMuxC0ElecM1BeamCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM1BeamCouplingW);
    createParam(DigDspMuxC0ElecM1BwRString, asynParamInt32, &p_DigDspMuxC0ElecM1BwR);
    createParam(DigDspMuxC0ElecM1BwWString, asynParamInt32, &p_DigDspMuxC0ElecM1BwW);
    createParam(DigDspMuxC0ElecM1DriveCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM1DriveCouplingR);
    createParam(DigDspMuxC0ElecM1DriveCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM1DriveCouplingW);
    createParam(DigDspMuxC0ElecM1OutCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM1OutCplOutCouplingR);
    createParam(DigDspMuxC0ElecM1OutCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM1OutCplOutCouplingW);
    createParam(DigDspMuxC0ElecM1OutCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC0ElecM1OutCplOutPhaseOffsetR);
    createParam(DigDspMuxC0ElecM1OutCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC0ElecM1OutCplOutPhaseOffsetW);
    createParam(DigDspMuxC0ElecM2BeamCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM2BeamCouplingR);
    createParam(DigDspMuxC0ElecM2BeamCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM2BeamCouplingW);
    createParam(DigDspMuxC0ElecM2BwRString, asynParamInt32, &p_DigDspMuxC0ElecM2BwR);
    createParam(DigDspMuxC0ElecM2BwWString, asynParamInt32, &p_DigDspMuxC0ElecM2BwW);
    createParam(DigDspMuxC0ElecM2DriveCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM2DriveCouplingR);
    createParam(DigDspMuxC0ElecM2DriveCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM2DriveCouplingW);
    createParam(DigDspMuxC0ElecM2OutCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC0ElecM2OutCplOutCouplingR);
    createParam(DigDspMuxC0ElecM2OutCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC0ElecM2OutCplOutCouplingW);
    createParam(DigDspMuxC0ElecM2OutCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC0ElecM2OutCplOutPhaseOffsetR);
    createParam(DigDspMuxC0ElecM2OutCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC0ElecM2OutCplOutPhaseOffsetW);
    createParam(DigDspMuxC0ElecModuloRString, asynParamInt32, &p_DigDspMuxC0ElecModuloR);
    createParam(DigDspMuxC0ElecModuloWString, asynParamInt32, &p_DigDspMuxC0ElecModuloW);
    createParam(DigDspMuxC0ElecOuterProd0KOutRString, asynParamInt32Array, &p_DigDspMuxC0ElecOuterProd0KOutR);
    createParam(DigDspMuxC0ElecOuterProd0KOutWString, asynParamInt32Array, &p_DigDspMuxC0ElecOuterProd0KOutW);
    createParam(DigDspMuxC0ElecOuterProd1KOutRString, asynParamInt32Array, &p_DigDspMuxC0ElecOuterProd1KOutR);
    createParam(DigDspMuxC0ElecOuterProd1KOutWString, asynParamInt32Array, &p_DigDspMuxC0ElecOuterProd1KOutW);
    createParam(DigDspMuxC0ElecOuterProd2KOutRString, asynParamInt32Array, &p_DigDspMuxC0ElecOuterProd2KOutR);
    createParam(DigDspMuxC0ElecOuterProd2KOutWString, asynParamInt32Array, &p_DigDspMuxC0ElecOuterProd2KOutW);
    createParam(DigDspMuxC0ElecPhaseStepRString, asynParamInt32, &p_DigDspMuxC0ElecPhaseStepR);
    createParam(DigDspMuxC0ElecPhaseStepWString, asynParamInt32, &p_DigDspMuxC0ElecPhaseStepW);
    createParam(DigDspMuxC0PiezoCoupleKOutRString, asynParamInt32Array, &p_DigDspMuxC0PiezoCoupleKOutR);
    createParam(DigDspMuxC0PiezoCoupleKOutWString, asynParamInt32Array, &p_DigDspMuxC0PiezoCoupleKOutW);
    createParam(DigDspMuxC0PrngIvaRString, asynParamInt32, &p_DigDspMuxC0PrngIvaR);
    createParam(DigDspMuxC0PrngIvaWString, asynParamInt32, &p_DigDspMuxC0PrngIvaW);
    createParam(DigDspMuxC0PrngIvbRString, asynParamInt32, &p_DigDspMuxC0PrngIvbR);
    createParam(DigDspMuxC0PrngIvbWString, asynParamInt32, &p_DigDspMuxC0PrngIvbW);
    createParam(DigDspMuxC0PrngRandomRunRString, asynParamInt32, &p_DigDspMuxC0PrngRandomRunR);
    createParam(DigDspMuxC0PrngRandomRunWString, asynParamInt32, &p_DigDspMuxC0PrngRandomRunW);
    createParam(DigDspMuxC1ACavOffsetRString, asynParamInt32, &p_DigDspMuxC1ACavOffsetR);
    createParam(DigDspMuxC1ACavOffsetWString, asynParamInt32, &p_DigDspMuxC1ACavOffsetW);
    createParam(DigDspMuxC1AForOffsetRString, asynParamInt32, &p_DigDspMuxC1AForOffsetR);
    createParam(DigDspMuxC1AForOffsetWString, asynParamInt32, &p_DigDspMuxC1AForOffsetW);
    createParam(DigDspMuxC1ARflOffsetRString, asynParamInt32, &p_DigDspMuxC1ARflOffsetR);
    createParam(DigDspMuxC1ARflOffsetWString, asynParamInt32, &p_DigDspMuxC1ARflOffsetW);
    createParam(DigDspMuxC1AmpLpBwRString, asynParamInt32, &p_DigDspMuxC1AmpLpBwR);
    createParam(DigDspMuxC1AmpLpBwWString, asynParamInt32, &p_DigDspMuxC1AmpLpBwW);
    createParam(DigDspMuxC1ComprSatCtlRString, asynParamInt32, &p_DigDspMuxC1ComprSatCtlR);
    createParam(DigDspMuxC1ComprSatCtlWString, asynParamInt32, &p_DigDspMuxC1ComprSatCtlW);
    createParam(DigDspMuxC1ElecDot0KOutRString, asynParamInt32Array, &p_DigDspMuxC1ElecDot0KOutR);
    createParam(DigDspMuxC1ElecDot0KOutWString, asynParamInt32Array, &p_DigDspMuxC1ElecDot0KOutW);
    createParam(DigDspMuxC1ElecDot1KOutRString, asynParamInt32Array, &p_DigDspMuxC1ElecDot1KOutR);
    createParam(DigDspMuxC1ElecDot1KOutWString, asynParamInt32Array, &p_DigDspMuxC1ElecDot1KOutW);
    createParam(DigDspMuxC1ElecDot2KOutRString, asynParamInt32Array, &p_DigDspMuxC1ElecDot2KOutR);
    createParam(DigDspMuxC1ElecDot2KOutWString, asynParamInt32Array, &p_DigDspMuxC1ElecDot2KOutW);
    createParam(DigDspMuxC1ElecDriveCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecDriveCplOutCouplingR);
    createParam(DigDspMuxC1ElecDriveCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecDriveCplOutCouplingW);
    createParam(DigDspMuxC1ElecDriveCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC1ElecDriveCplOutPhaseOffsetR);
    createParam(DigDspMuxC1ElecDriveCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC1ElecDriveCplOutPhaseOffsetW);
    createParam(DigDspMuxC1ElecFreq0CoarseFreqRString, asynParamInt32, &p_DigDspMuxC1ElecFreq0CoarseFreqR);
    createParam(DigDspMuxC1ElecFreq0CoarseFreqWString, asynParamInt32, &p_DigDspMuxC1ElecFreq0CoarseFreqW);
    createParam(DigDspMuxC1ElecFreq1CoarseFreqRString, asynParamInt32, &p_DigDspMuxC1ElecFreq1CoarseFreqR);
    createParam(DigDspMuxC1ElecFreq1CoarseFreqWString, asynParamInt32, &p_DigDspMuxC1ElecFreq1CoarseFreqW);
    createParam(DigDspMuxC1ElecFreq2CoarseFreqRString, asynParamInt32, &p_DigDspMuxC1ElecFreq2CoarseFreqR);
    createParam(DigDspMuxC1ElecFreq2CoarseFreqWString, asynParamInt32, &p_DigDspMuxC1ElecFreq2CoarseFreqW);
    createParam(DigDspMuxC1ElecM0BeamCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM0BeamCouplingR);
    createParam(DigDspMuxC1ElecM0BeamCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM0BeamCouplingW);
    createParam(DigDspMuxC1ElecM0BwRString, asynParamInt32, &p_DigDspMuxC1ElecM0BwR);
    createParam(DigDspMuxC1ElecM0BwWString, asynParamInt32, &p_DigDspMuxC1ElecM0BwW);
    createParam(DigDspMuxC1ElecM0DriveCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM0DriveCouplingR);
    createParam(DigDspMuxC1ElecM0DriveCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM0DriveCouplingW);
    createParam(DigDspMuxC1ElecM0OutCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM0OutCplOutCouplingR);
    createParam(DigDspMuxC1ElecM0OutCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM0OutCplOutCouplingW);
    createParam(DigDspMuxC1ElecM0OutCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC1ElecM0OutCplOutPhaseOffsetR);
    createParam(DigDspMuxC1ElecM0OutCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC1ElecM0OutCplOutPhaseOffsetW);
    createParam(DigDspMuxC1ElecM1BeamCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM1BeamCouplingR);
    createParam(DigDspMuxC1ElecM1BeamCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM1BeamCouplingW);
    createParam(DigDspMuxC1ElecM1BwRString, asynParamInt32, &p_DigDspMuxC1ElecM1BwR);
    createParam(DigDspMuxC1ElecM1BwWString, asynParamInt32, &p_DigDspMuxC1ElecM1BwW);
    createParam(DigDspMuxC1ElecM1DriveCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM1DriveCouplingR);
    createParam(DigDspMuxC1ElecM1DriveCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM1DriveCouplingW);
    createParam(DigDspMuxC1ElecM1OutCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM1OutCplOutCouplingR);
    createParam(DigDspMuxC1ElecM1OutCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM1OutCplOutCouplingW);
    createParam(DigDspMuxC1ElecM1OutCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC1ElecM1OutCplOutPhaseOffsetR);
    createParam(DigDspMuxC1ElecM1OutCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC1ElecM1OutCplOutPhaseOffsetW);
    createParam(DigDspMuxC1ElecM2BeamCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM2BeamCouplingR);
    createParam(DigDspMuxC1ElecM2BeamCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM2BeamCouplingW);
    createParam(DigDspMuxC1ElecM2BwRString, asynParamInt32, &p_DigDspMuxC1ElecM2BwR);
    createParam(DigDspMuxC1ElecM2BwWString, asynParamInt32, &p_DigDspMuxC1ElecM2BwW);
    createParam(DigDspMuxC1ElecM2DriveCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM2DriveCouplingR);
    createParam(DigDspMuxC1ElecM2DriveCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM2DriveCouplingW);
    createParam(DigDspMuxC1ElecM2OutCplOutCouplingRString, asynParamInt32, &p_DigDspMuxC1ElecM2OutCplOutCouplingR);
    createParam(DigDspMuxC1ElecM2OutCplOutCouplingWString, asynParamInt32, &p_DigDspMuxC1ElecM2OutCplOutCouplingW);
    createParam(DigDspMuxC1ElecM2OutCplOutPhaseOffsetRString, asynParamInt32, &p_DigDspMuxC1ElecM2OutCplOutPhaseOffsetR);
    createParam(DigDspMuxC1ElecM2OutCplOutPhaseOffsetWString, asynParamInt32, &p_DigDspMuxC1ElecM2OutCplOutPhaseOffsetW);
    createParam(DigDspMuxC1ElecModuloRString, asynParamInt32, &p_DigDspMuxC1ElecModuloR);
    createParam(DigDspMuxC1ElecModuloWString, asynParamInt32, &p_DigDspMuxC1ElecModuloW);
    createParam(DigDspMuxC1ElecOuterProd0KOutRString, asynParamInt32Array, &p_DigDspMuxC1ElecOuterProd0KOutR);
    createParam(DigDspMuxC1ElecOuterProd0KOutWString, asynParamInt32Array, &p_DigDspMuxC1ElecOuterProd0KOutW);
    createParam(DigDspMuxC1ElecOuterProd1KOutRString, asynParamInt32Array, &p_DigDspMuxC1ElecOuterProd1KOutR);
    createParam(DigDspMuxC1ElecOuterProd1KOutWString, asynParamInt32Array, &p_DigDspMuxC1ElecOuterProd1KOutW);
    createParam(DigDspMuxC1ElecOuterProd2KOutRString, asynParamInt32Array, &p_DigDspMuxC1ElecOuterProd2KOutR);
    createParam(DigDspMuxC1ElecOuterProd2KOutWString, asynParamInt32Array, &p_DigDspMuxC1ElecOuterProd2KOutW);
    createParam(DigDspMuxC1ElecPhaseStepRString, asynParamInt32, &p_DigDspMuxC1ElecPhaseStepR);
    createParam(DigDspMuxC1ElecPhaseStepWString, asynParamInt32, &p_DigDspMuxC1ElecPhaseStepW);
    createParam(DigDspMuxC1PiezoCoupleKOutRString, asynParamInt32Array, &p_DigDspMuxC1PiezoCoupleKOutR);
    createParam(DigDspMuxC1PiezoCoupleKOutWString, asynParamInt32Array, &p_DigDspMuxC1PiezoCoupleKOutW);
    createParam(DigDspMuxC1PrngIvaRString, asynParamInt32, &p_DigDspMuxC1PrngIvaR);
    createParam(DigDspMuxC1PrngIvaWString, asynParamInt32, &p_DigDspMuxC1PrngIvaW);
    createParam(DigDspMuxC1PrngIvbRString, asynParamInt32, &p_DigDspMuxC1PrngIvbR);
    createParam(DigDspMuxC1PrngIvbWString, asynParamInt32, &p_DigDspMuxC1PrngIvbW);
    createParam(DigDspMuxC1PrngRandomRunRString, asynParamInt32, &p_DigDspMuxC1PrngRandomRunR);
    createParam(DigDspMuxC1PrngRandomRunWString, asynParamInt32, &p_DigDspMuxC1PrngRandomRunW);
    createParam(DigDspMuxCav4MechNoiseCoupleKOutRString, asynParamInt32Array, &p_DigDspMuxCav4MechNoiseCoupleKOutR);
    createParam(DigDspMuxCav4MechNoiseCoupleKOutWString, asynParamInt32Array, &p_DigDspMuxCav4MechNoiseCoupleKOutW);
    createParam(DigDspMuxCav4MechPrngIvaRString, asynParamInt32, &p_DigDspMuxCav4MechPrngIvaR);
    createParam(DigDspMuxCav4MechPrngIvaWString, asynParamInt32, &p_DigDspMuxCav4MechPrngIvaW);
    createParam(DigDspMuxCav4MechPrngIvbRString, asynParamInt32, &p_DigDspMuxCav4MechPrngIvbR);
    createParam(DigDspMuxCav4MechPrngIvbWString, asynParamInt32, &p_DigDspMuxCav4MechPrngIvbW);
    createParam(DigDspMuxCav4MechPrngRandomRunRString, asynParamInt32, &p_DigDspMuxCav4MechPrngRandomRunR);
    createParam(DigDspMuxCav4MechPrngRandomRunWString, asynParamInt32, &p_DigDspMuxCav4MechPrngRandomRunW);
    createParam(DigDspMuxCav4MechResonatorPropConstRString, asynParamInt32Array, &p_DigDspMuxCav4MechResonatorPropConstR);
    createParam(DigDspMuxCav4MechResonatorPropConstWString, asynParamInt32Array, &p_DigDspMuxCav4MechResonatorPropConstW);
    createParam(DigDspMuxDacIqPhaseRString, asynParamInt32, &p_DigDspMuxDacIqPhaseR);
    createParam(DigDspMuxDacIqPhaseWString, asynParamInt32, &p_DigDspMuxDacIqPhaseW);
    createParam(DigDspMuxShell0DspChanKeepRString, asynParamUInt32Digital, &p_DigDspMuxShell0DspChanKeepR);
    createParam(DigDspMuxShell0DspChanKeepWString, asynParamUInt32Digital, &p_DigDspMuxShell0DspChanKeepW);
    createParam(DigDspMuxShell0DspLpNotchLp1AKxRString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1AKxR);
    createParam(DigDspMuxShell0DspLpNotchLp1AKxWString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1AKxW);
    createParam(DigDspMuxShell0DspLpNotchLp1AKyRString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1AKyR);
    createParam(DigDspMuxShell0DspLpNotchLp1AKyWString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1AKyW);
    createParam(DigDspMuxShell0DspLpNotchLp1BKxRString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1BKxR);
    createParam(DigDspMuxShell0DspLpNotchLp1BKxWString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1BKxW);
    createParam(DigDspMuxShell0DspLpNotchLp1BKyRString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1BKyR);
    createParam(DigDspMuxShell0DspLpNotchLp1BKyWString, asynParamInt32, &p_DigDspMuxShell0DspLpNotchLp1BKyW);
    createParam(DigDspMuxShell0DspModuloRString, asynParamInt32, &p_DigDspMuxShell0DspModuloR);
    createParam(DigDspMuxShell0DspModuloWString, asynParamInt32, &p_DigDspMuxShell0DspModuloW);
    createParam(DigDspMuxShell0DspPhaseStepRString, asynParamInt32, &p_DigDspMuxShell0DspPhaseStepR);
    createParam(DigDspMuxShell0DspPhaseStepWString, asynParamInt32, &p_DigDspMuxShell0DspPhaseStepW);
    createParam(DigDspMuxShell0DspPiezoPiezoDcRString, asynParamInt32, &p_DigDspMuxShell0DspPiezoPiezoDcR);
    createParam(DigDspMuxShell0DspPiezoPiezoDcWString, asynParamInt32, &p_DigDspMuxShell0DspPiezoPiezoDcW);
    createParam(DigDspMuxShell0DspPiezoSfConstsRString, asynParamInt32, &p_DigDspMuxShell0DspPiezoSfConstsR);
    createParam(DigDspMuxShell0DspPiezoSfConstsWString, asynParamInt32, &p_DigDspMuxShell0DspPiezoSfConstsW);
    createParam(DigDspMuxShell0DspTagRString, asynParamInt32, &p_DigDspMuxShell0DspTagR);
    createParam(DigDspMuxShell0DspTagWString, asynParamInt32, &p_DigDspMuxShell0DspTagW);
    createParam(DigDspMuxShell0DspUseFiberIqRString, asynParamInt32, &p_DigDspMuxShell0DspUseFiberIqR);
    createParam(DigDspMuxShell0DspUseFiberIqWString, asynParamInt32, &p_DigDspMuxShell0DspUseFiberIqW);
    createParam(DigDspMuxShell0DspWaveSampPerRString, asynParamInt32, &p_DigDspMuxShell0DspWaveSampPerR);
    createParam(DigDspMuxShell0DspWaveSampPerWString, asynParamInt32, &p_DigDspMuxShell0DspWaveSampPerW);
    createParam(DigDspMuxShell0DspWaveShiftRString, asynParamInt32, &p_DigDspMuxShell0DspWaveShiftR);
    createParam(DigDspMuxShell0DspWaveShiftWString, asynParamInt32, &p_DigDspMuxShell0DspWaveShiftW);
    createParam(DigDspMuxShell0FdbkCoreCoarseScaleRString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreCoarseScaleR);
    createParam(DigDspMuxShell0FdbkCoreCoarseScaleWString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreCoarseScaleW);
    createParam(DigDspMuxShell0FdbkCoreMpProcCoeffRString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcCoeffR);
    createParam(DigDspMuxShell0FdbkCoreMpProcCoeffWString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcCoeffW);
    createParam(DigDspMuxShell0FdbkCoreMpProcLimRString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcLimR);
    createParam(DigDspMuxShell0FdbkCoreMpProcLimWString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcLimW);
    createParam(DigDspMuxShell0FdbkCoreMpProcPhOffsetRString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcPhOffsetR);
    createParam(DigDspMuxShell0FdbkCoreMpProcPhOffsetWString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcPhOffsetW);
    createParam(DigDspMuxShell0FdbkCoreMpProcSelEnRString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcSelEnR);
    createParam(DigDspMuxShell0FdbkCoreMpProcSelEnWString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcSelEnW);
    createParam(DigDspMuxShell0FdbkCoreMpProcSelThreshRString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcSelThreshR);
    createParam(DigDspMuxShell0FdbkCoreMpProcSelThreshWString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcSelThreshW);
    createParam(DigDspMuxShell0FdbkCoreMpProcSetmpRString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcSetmpR);
    createParam(DigDspMuxShell0FdbkCoreMpProcSetmpWString, asynParamInt32, &p_DigDspMuxShell0FdbkCoreMpProcSetmpW);
    createParam(DigDspMuxShell1DspChanKeepRString, asynParamUInt32Digital, &p_DigDspMuxShell1DspChanKeepR);
    createParam(DigDspMuxShell1DspChanKeepWString, asynParamUInt32Digital, &p_DigDspMuxShell1DspChanKeepW);
    createParam(DigDspMuxShell1DspLpNotchLp1AKxRString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1AKxR);
    createParam(DigDspMuxShell1DspLpNotchLp1AKxWString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1AKxW);
    createParam(DigDspMuxShell1DspLpNotchLp1AKyRString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1AKyR);
    createParam(DigDspMuxShell1DspLpNotchLp1AKyWString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1AKyW);
    createParam(DigDspMuxShell1DspLpNotchLp1BKxRString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1BKxR);
    createParam(DigDspMuxShell1DspLpNotchLp1BKxWString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1BKxW);
    createParam(DigDspMuxShell1DspLpNotchLp1BKyRString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1BKyR);
    createParam(DigDspMuxShell1DspLpNotchLp1BKyWString, asynParamInt32, &p_DigDspMuxShell1DspLpNotchLp1BKyW);
    createParam(DigDspMuxShell1DspModuloRString, asynParamInt32, &p_DigDspMuxShell1DspModuloR);
    createParam(DigDspMuxShell1DspModuloWString, asynParamInt32, &p_DigDspMuxShell1DspModuloW);
    createParam(DigDspMuxShell1DspPhaseStepRString, asynParamInt32, &p_DigDspMuxShell1DspPhaseStepR);
    createParam(DigDspMuxShell1DspPhaseStepWString, asynParamInt32, &p_DigDspMuxShell1DspPhaseStepW);
    createParam(DigDspMuxShell1DspPiezoPiezoDcRString, asynParamInt32, &p_DigDspMuxShell1DspPiezoPiezoDcR);
    createParam(DigDspMuxShell1DspPiezoPiezoDcWString, asynParamInt32, &p_DigDspMuxShell1DspPiezoPiezoDcW);
    createParam(DigDspMuxShell1DspPiezoSfConstsRString, asynParamInt32, &p_DigDspMuxShell1DspPiezoSfConstsR);
    createParam(DigDspMuxShell1DspPiezoSfConstsWString, asynParamInt32, &p_DigDspMuxShell1DspPiezoSfConstsW);
    createParam(DigDspMuxShell1DspTagRString, asynParamInt32, &p_DigDspMuxShell1DspTagR);
    createParam(DigDspMuxShell1DspTagWString, asynParamInt32, &p_DigDspMuxShell1DspTagW);
    createParam(DigDspMuxShell1DspUseFiberIqRString, asynParamInt32, &p_DigDspMuxShell1DspUseFiberIqR);
    createParam(DigDspMuxShell1DspUseFiberIqWString, asynParamInt32, &p_DigDspMuxShell1DspUseFiberIqW);
    createParam(DigDspMuxShell1DspWaveSampPerRString, asynParamInt32, &p_DigDspMuxShell1DspWaveSampPerR);
    createParam(DigDspMuxShell1DspWaveSampPerWString, asynParamInt32, &p_DigDspMuxShell1DspWaveSampPerW);
    createParam(DigDspMuxShell1DspWaveShiftRString, asynParamInt32, &p_DigDspMuxShell1DspWaveShiftR);
    createParam(DigDspMuxShell1DspWaveShiftWString, asynParamInt32, &p_DigDspMuxShell1DspWaveShiftW);
    createParam(DigDspMuxShell1FdbkCoreCoarseScaleRString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreCoarseScaleR);
    createParam(DigDspMuxShell1FdbkCoreCoarseScaleWString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreCoarseScaleW);
    createParam(DigDspMuxShell1FdbkCoreMpProcCoeffRString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcCoeffR);
    createParam(DigDspMuxShell1FdbkCoreMpProcCoeffWString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcCoeffW);
    createParam(DigDspMuxShell1FdbkCoreMpProcLimRString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcLimR);
    createParam(DigDspMuxShell1FdbkCoreMpProcLimWString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcLimW);
    createParam(DigDspMuxShell1FdbkCoreMpProcPhOffsetRString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcPhOffsetR);
    createParam(DigDspMuxShell1FdbkCoreMpProcPhOffsetWString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcPhOffsetW);
    createParam(DigDspMuxShell1FdbkCoreMpProcSelEnRString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcSelEnR);
    createParam(DigDspMuxShell1FdbkCoreMpProcSelEnWString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcSelEnW);
    createParam(DigDspMuxShell1FdbkCoreMpProcSelThreshRString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcSelThreshR);
    createParam(DigDspMuxShell1FdbkCoreMpProcSelThreshWString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcSelThreshW);
    createParam(DigDspMuxShell1FdbkCoreMpProcSetmpRString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcSetmpR);
    createParam(DigDspMuxShell1FdbkCoreMpProcSetmpWString, asynParamInt32, &p_DigDspMuxShell1FdbkCoreMpProcSetmpW);
    createParam(DigDspPhaseStepHRString, asynParamInt32, &p_DigDspPhaseStepHR);
    createParam(DigDspPhaseStepHWString, asynParamInt32, &p_DigDspPhaseStepHW);
    createParam(DigDspPhaseStepLRString, asynParamInt32, &p_DigDspPhaseStepLR);
    createParam(DigDspPhaseStepLWString, asynParamInt32, &p_DigDspPhaseStepLW);
    createParam(DigDspPrcDspCavSelRString, asynParamInt32, &p_DigDspPrcDspCavSelR);
    createParam(DigDspPrcDspCavSelWString, asynParamInt32, &p_DigDspPrcDspCavSelW);
    createParam(DigDspPrcDspPrlCfgRString, asynParamInt32, &p_DigDspPrcDspPrlCfgR);
    createParam(DigDspPrcDspPrlCfgWString, asynParamInt32, &p_DigDspPrcDspPrlCfgW);
    createParam(DigDspPrcDspPrlGainRString, asynParamInt32, &p_DigDspPrcDspPrlGainR);
    createParam(DigDspPrcDspPrlGainWString, asynParamInt32, &p_DigDspPrcDspPrlGainW);
    createParam(DigDspRewindRString, asynParamInt32, &p_DigDspRewindR);
    createParam(DigDspRewindWString, asynParamInt32, &p_DigDspRewindW);
    createParam(DigDspSsaStimAmpstepRString, asynParamInt32, &p_DigDspSsaStimAmpstepR);
    createParam(DigDspSsaStimAmpstepWString, asynParamInt32, &p_DigDspSsaStimAmpstepW);
    createParam(DigDspSsaStimEnRString, asynParamInt32, &p_DigDspSsaStimEnR);
    createParam(DigDspSsaStimEnWString, asynParamInt32, &p_DigDspSsaStimEnW);
    createParam(DigDspSsaStimGPeriodRString, asynParamInt32, &p_DigDspSsaStimGPeriodR);
    createParam(DigDspSsaStimGPeriodWString, asynParamInt32, &p_DigDspSsaStimGPeriodW);
    createParam(DigDspSsaStimPertstepRString, asynParamInt32, &p_DigDspSsaStimPertstepR);
    createParam(DigDspSsaStimPertstepWString, asynParamInt32, &p_DigDspSsaStimPertstepW);
    createParam(DigDspTraceKeepRString, asynParamUInt32Digital, &p_DigDspTraceKeepR);
    createParam(DigDspTraceKeepWString, asynParamUInt32Digital, &p_DigDspTraceKeepW);
    createParam(DigDspTraceResetWeRString, asynParamInt32, &p_DigDspTraceResetWeR);
    createParam(DigDspTraceResetWeWString, asynParamInt32, &p_DigDspTraceResetWeW);
    createParam(DigDspTrigInternalRString, asynParamInt32, &p_DigDspTrigInternalR);
    createParam(DigDspTrigInternalWString, asynParamInt32, &p_DigDspTrigInternalW);
    createParam(DigDspTrigModeRString, asynParamInt32, &p_DigDspTrigModeR);
    createParam(DigDspTrigModeWString, asynParamInt32, &p_DigDspTrigModeW);
    createParam(DigDspWave0SrcRString, asynParamInt32, &p_DigDspWave0SrcR);
    createParam(DigDspWave0SrcWString, asynParamInt32, &p_DigDspWave0SrcW);
    createParam(DigDspWave1SrcRString, asynParamInt32, &p_DigDspWave1SrcR);
    createParam(DigDspWave1SrcWString, asynParamInt32, &p_DigDspWave1SrcW);
    createParam(DomainJumpRealignRString, asynParamInt32, &p_DomainJumpRealignR);
    createParam(DomainJumpRealignWString, asynParamInt32, &p_DomainJumpRealignW);
    createParam(FfffffffRString, asynParamInt32, &p_FfffffffR);
    createParam(Frequency4XoutRString, asynParamInt32, &p_Frequency4XoutR);
    createParam(FrequencyAdcRString, asynParamInt32, &p_FrequencyAdcR);
    createParam(FrequencyClkout3RString, asynParamInt32, &p_FrequencyClkout3R);
    createParam(FrequencyDcoRString, asynParamInt32, &p_FrequencyDcoR);
    createParam(FrequencyGtxRxRString, asynParamInt32, &p_FrequencyGtxRxR);
    createParam(FrequencyGtxTxRString, asynParamInt32, &p_FrequencyGtxTxR);
    createParam(HistDoutRString, asynParamInt32Array, &p_HistDoutR);
    createParam(HistStatusRString, asynParamInt32, &p_HistStatusR);
    createParam(IccCfgRString, asynParamInt32, &p_IccCfgR);
    createParam(IccCfgWString, asynParamInt32, &p_IccCfgW);
    createParam(IdelayBaseRString, asynParamInt32, &p_IdelayBaseR);
    createParam(IdelayValueOutU2Bits19To0RString, asynParamInt32, &p_IdelayValueOutU2Bits19To0R);
    createParam(IdelayValueOutU2Bits39To20RString, asynParamInt32, &p_IdelayValueOutU2Bits39To20R);
    createParam(IdelayValueOutU3Bits19To0RString, asynParamInt32, &p_IdelayValueOutU3Bits19To0R);
    createParam(IdelayValueOutU3Bits39To20RString, asynParamInt32, &p_IdelayValueOutU3Bits39To20R);
    createParam(LlrfCircleDataRString, asynParamInt32Array, &p_LlrfCircleDataR);
    createParam(LlrfCircleReadyRString, asynParamInt32, &p_LlrfCircleReadyR);
    createParam(LlspiResultRString, asynParamInt32, &p_LlspiResultR);
    createParam(LlspiStatusRString, asynParamInt32, &p_LlspiStatusR);
    createParam(OWoRString, asynParamInt32, &p_OWoR);
    createParam(PhasexDoutRString, asynParamInt32Array, &p_PhasexDoutR);
    createParam(PhasexStatusRString, asynParamInt32, &p_PhasexStatusR);
    createParam(QsfpBufRString, asynParamInt32Array, &p_QsfpBufR);
    createParam(QsfpI2CRegRString, asynParamInt32, &p_QsfpI2CRegR);
    createParam(QsfpI2CRegWString, asynParamInt32, &p_QsfpI2CRegW);
    createParam(RldRString, asynParamInt32, &p_RldR);
    createParam(ScannerResultRString, asynParamInt32Array, &p_ScannerResultR);
    createParam(SfpAddressSetRString, asynParamInt32, &p_SfpAddressSetR);
    createParam(SfpAddressSetWString, asynParamInt32, &p_SfpAddressSetW);
    createParam(Shell0SlowDataRString, asynParamInt32Array, &p_Shell0SlowDataR);
    createParam(Shell1SlowDataRString, asynParamInt32Array, &p_Shell1SlowDataR);
    createParam(SlowChainOutRString, asynParamInt32, &p_SlowChainOutR);
    createParam(TagNowRString, asynParamInt32, &p_TagNowR);
    createParam(TagNowWString, asynParamInt32, &p_TagNowW);
    createParam(Tgen0DelayPcXxxRString, asynParamInt32Array, &p_Tgen0DelayPcXxxR);
    createParam(Tgen0DelayPcXxxWString, asynParamInt32Array, &p_Tgen0DelayPcXxxW);
    createParam(Tgen1DelayPcXxxRString, asynParamInt32Array, &p_Tgen1DelayPcXxxR);
    createParam(Tgen1DelayPcXxxWString, asynParamInt32Array, &p_Tgen1DelayPcXxxW);
    createParam(TraceIBufRString, asynParamInt32Array, &p_TraceIBufR);
    createParam(TraceIqBufRString, asynParamInt32Array, &p_TraceIqBufR);
    createParam(TraceQBufRString, asynParamInt32Array, &p_TraceQBufR);
    createParam(TraceStatus1RString, asynParamInt32, &p_TraceStatus1R);
    createParam(TraceStatus2RString, asynParamInt32, &p_TraceStatus2R);
    createParam(Wave0OutRString, asynParamInt32, &p_Wave0OutR);
    createParam(Wave1OutRString, asynParamInt32, &p_Wave1OutR);
    createParam(WaveformsAvailableRString, asynParamInt32, &p_WaveformsAvailableR);

    // Message size is the number of read registers, plus 1 nonce for every 175 read registers
    PolledRegMsgSize_ = scllrfPRCReadRegCount + (scllrfPRCReadRegCount / 175) + 1;
	// A canned request to read all registers
    pPolledRegMsg_ = new FpgaReg[PolledRegMsgSize_]
	{
		{ 0, 0 },
		{ flagReadMask | HellRAdr, blankData },
		{ flagReadMask | OWoRAdr, blankData },
		{ flagReadMask | RldRAdr, blankData },
		{ flagReadMask | D0A0D0ARAdr, blankData },
		{ flagReadMask | LlspiStatusRAdr, blankData },
		{ flagReadMask | LlspiResultRAdr, blankData },
		{ flagReadMask | ClkStatusOutRAdr, blankData },
		{ flagReadMask | FfffffffRAdr, blankData },
		{ flagReadMask | FrequencyAdcRAdr, blankData },
		{ flagReadMask | Frequency4XoutRAdr, blankData },
		{ flagReadMask | FrequencyClkout3RAdr, blankData },
		{ flagReadMask | FrequencyDcoRAdr, blankData },
		{ flagReadMask | U2DoutBits31To0RAdr, blankData },
		{ flagReadMask | U2DoutBits63To32RAdr, blankData },
		{ flagReadMask | IdelayValueOutU2Bits19To0RAdr, blankData },
		{ flagReadMask | IdelayValueOutU2Bits39To20RAdr, blankData },
		{ flagReadMask | U3DoutBits31To0RAdr, blankData },
		{ flagReadMask | U3DoutBits63To32RAdr, blankData },
		{ flagReadMask | IdelayValueOutU3Bits19To0RAdr, blankData },
		{ flagReadMask | IdelayValueOutU3Bits39To20RAdr, blankData },
		{ flagReadMask | Wave0OutRAdr, blankData },
		{ flagReadMask | Wave1OutRAdr, blankData },
		{ flagReadMask | AdcTestWave1OutRAdr, blankData },
		{ flagReadMask | AdcTestWave2OutRAdr, blankData },
		{ flagReadMask | AdcTestWave3OutRAdr, blankData },
		{ flagReadMask | AdcTestWave4OutRAdr, blankData },
		{ flagReadMask | CtraceRunningRAdr, blankData },
		{ flagReadMask | FrequencyGtxTxRAdr, blankData },
		{ flagReadMask | FrequencyGtxRxRAdr, blankData },
		{ flagReadMask | HistStatusRAdr, blankData },
		{ flagReadMask | PhasexStatusRAdr, blankData },
		{ flagReadMask | ClkPhaseDiffOutU2RAdr, blankData },
		{ flagReadMask | ClkPhaseDiffOutU3RAdr, blankData },
		{ flagReadMask | CrcErrorsRAdr, blankData },
		{ flagReadMask | U15SpiRdbkRAdr, blankData },
		{ flagReadMask | U15SpiReadyRAdr, blankData },
		{ flagReadMask | U18SdoAddrRAdr, blankData },
		{ flagReadMask | U18SdioAsSdoRAdr, blankData },
		{ flagReadMask | AdcTestTrigCntRAdr, blankData },
		{ flagReadMask | WaveformsAvailableRAdr, blankData },
		{ flagReadMask | BanyanStatusRAdr, blankData },
		{ flagReadMask | SlowChainOutRAdr, blankData },
		{ flagReadMask | TraceStatus1RAdr, blankData },
		{ flagReadMask | TraceStatus2RAdr, blankData },
		{ flagReadMask | LlrfCircleReadyRAdr, blankData },
		{ flagReadMask | IdelayBaseRAdr, blankData },
		{ flagReadMask | HistDoutRAdr, blankData },
		{ flagReadMask | PhasexDoutRAdr, blankData },
		{ flagReadMask | BanyanBufRAdr, blankData },
		{ flagReadMask | ScannerResultRAdr, blankData },
		{ flagReadMask | TraceIqBufRAdr, blankData },
		{ flagReadMask | TraceIBufRAdr, blankData },
		{ flagReadMask | TraceQBufRAdr, blankData },
		{ flagReadMask | QsfpBufRAdr, blankData },
		{ flagReadMask | LlrfCircleDataRAdr, blankData },
		{ flagReadMask | Shell0SlowDataRAdr, blankData },
		{ flagReadMask | Shell1SlowDataRAdr, blankData },
		{ flagReadMask | DigDspMuxCav4MechNoiseCoupleKOutRAdr, blankData },
		{ flagReadMask | DigDspMuxCav4MechResonatorPropConstRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecDot0KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecDot1KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecDot2KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecOuterProd0KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecOuterProd1KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecOuterProd2KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC0PiezoCoupleKOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecDot0KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecDot1KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecDot2KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecOuterProd0KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecOuterProd1KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecOuterProd2KOutRAdr, blankData },
		{ flagReadMask | DigDspMuxC1PiezoCoupleKOutRAdr, blankData },
		{ flagReadMask | Tgen0DelayPcXxxRAdr, blankData },
		{ flagReadMask | Tgen1DelayPcXxxRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0FdbkCoreMpProcCoeffRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0FdbkCoreMpProcLimRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0FdbkCoreMpProcSetmpRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1FdbkCoreMpProcCoeffRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1FdbkCoreMpProcLimRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1FdbkCoreMpProcSetmpRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecDriveCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecDriveCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM0OutCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM0OutCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM1OutCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM1OutCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM2OutCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM2OutCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecDriveCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecDriveCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM0OutCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM0OutCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM1OutCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM1OutCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM2OutCplOutCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM2OutCplOutPhaseOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspLpNotchLp1AKxRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspLpNotchLp1AKyRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspLpNotchLp1BKxRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspLpNotchLp1BKyRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspLpNotchLp1AKxRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspLpNotchLp1AKyRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspLpNotchLp1BKxRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspLpNotchLp1BKyRAdr, blankData },
		{ flagReadMask | AdcMmcmRAdr, blankData },
		{ flagReadMask | DigConfigU15SpiDataAddrRRAdr, blankData },
		{ flagReadMask | DigConfigU15SpiReadAndStartRRAdr, blankData },
		{ flagReadMask | DigConfigU18SpiDataAddrRRAdr, blankData },
		{ flagReadMask | DigConfigU18SpiReadAndStartRRAdr, blankData },
		{ flagReadMask | DigConfigU2ClkResetRRAdr, blankData },
		{ flagReadMask | DigConfigU2IserdesResetRRAdr, blankData },
		{ flagReadMask | DigConfigU3ClkResetRRAdr, blankData },
		{ flagReadMask | DigConfigU3IserdesResetRRAdr, blankData },
		{ flagReadMask | DigConfigU4ResetRRAdr, blankData },
		{ flagReadMask | DigConfigBanyanMaskRAdr, blankData },
		{ flagReadMask | DigConfigBitslipRAdr, blankData },
		{ flagReadMask | DigConfigClkStatusWeRAdr, blankData },
		{ flagReadMask | DigConfigIdelayctrlResetRRAdr, blankData },
		{ flagReadMask | DigConfigLlspiWeRAdr, blankData },
		{ flagReadMask | DigConfigMmcmResetRRAdr, blankData },
		{ flagReadMask | DigConfigPeriphConfigRAdr, blankData },
		{ flagReadMask | DigConfigPhasexTrigRAdr, blankData },
		{ flagReadMask | DigConfigRawadcTrigRAdr, blankData },
		{ flagReadMask | DigConfigScanTriggerWeRAdr, blankData },
		{ flagReadMask | DigConfigScannerDebugRAdr, blankData },
		{ flagReadMask | DigConfigSyncAd7794CsetRAdr, blankData },
		{ flagReadMask | DigConfigSyncTps62210CsetRAdr, blankData },
		{ flagReadMask | DigDspAdcTestModeRAdr, blankData },
		{ flagReadMask | DigDspAdcTestResetRAdr, blankData },
		{ flagReadMask | DigDspAmplitudeRAdr, blankData },
		{ flagReadMask | DigDspAverageLenRAdr, blankData },
		{ flagReadMask | DigDspBufTrigRAdr, blankData },
		{ flagReadMask | DigDspCicPeriodRAdr, blankData },
		{ flagReadMask | DigDspCicShiftRAdr, blankData },
		{ flagReadMask | DigDspCircleBufFlipRAdr, blankData },
		{ flagReadMask | DigDspDacDdsResetRAdr, blankData },
		{ flagReadMask | DigDspDacModeRAdr, blankData },
		{ flagReadMask | DigDspDdsaModuloRAdr, blankData },
		{ flagReadMask | DigDspDdsaPhstepHRAdr, blankData },
		{ flagReadMask | DigDspDdsaPhstepLRAdr, blankData },
		{ flagReadMask | DigDspHistCountWStrobeRAdr, blankData },
		{ flagReadMask | DigDspLlrfDspDacEnRAdr, blankData },
		{ flagReadMask | DigDspLoAmpRAdr, blankData },
		{ flagReadMask | DigDspModuloRAdr, blankData },
		{ flagReadMask | DigDspPhaseStepHRAdr, blankData },
		{ flagReadMask | DigDspPhaseStepLRAdr, blankData },
		{ flagReadMask | DigDspPrcDspCavSelRAdr, blankData },
		{ flagReadMask | DigDspPrcDspPrlCfgRAdr, blankData },
		{ flagReadMask | DigDspPrcDspPrlGainRAdr, blankData },
		{ flagReadMask | DigDspMuxBeam0ModuloRAdr, blankData },
		{ flagReadMask | DigDspMuxBeam0PhaseInitRAdr, blankData },
		{ flagReadMask | DigDspMuxBeam0PhaseStepRAdr, blankData },
		{ flagReadMask | DigDspMuxBeam1ModuloRAdr, blankData },
		{ flagReadMask | DigDspMuxBeam1PhaseInitRAdr, blankData },
		{ flagReadMask | DigDspMuxBeam1PhaseStepRAdr, blankData },
		{ flagReadMask | DigDspMuxCav4MechPrngIvaRAdr, blankData },
		{ flagReadMask | DigDspMuxCav4MechPrngIvbRAdr, blankData },
		{ flagReadMask | DigDspMuxCav4MechPrngRandomRunRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ACavOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC0AForOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ARflOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC0AmpLpBwRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecFreq0CoarseFreqRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecFreq1CoarseFreqRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecFreq2CoarseFreqRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM0BeamCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM0BwRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM0DriveCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM1BeamCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM1BwRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM1DriveCouplingRAdr, blankData },
		{ 0, 0 },
		{ flagReadMask | DigDspMuxC0ElecM2BeamCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM2BwRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecM2DriveCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecModuloRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ElecPhaseStepRAdr, blankData },
		{ flagReadMask | DigDspMuxC0ComprSatCtlRAdr, blankData },
		{ flagReadMask | DigDspMuxC0PrngIvaRAdr, blankData },
		{ flagReadMask | DigDspMuxC0PrngIvbRAdr, blankData },
		{ flagReadMask | DigDspMuxC0PrngRandomRunRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ACavOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC1AForOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ARflOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxC1AmpLpBwRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecFreq0CoarseFreqRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecFreq1CoarseFreqRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecFreq2CoarseFreqRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM0BeamCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM0BwRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM0DriveCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM1BeamCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM1BwRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM1DriveCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM2BeamCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM2BwRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecM2DriveCouplingRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecModuloRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ElecPhaseStepRAdr, blankData },
		{ flagReadMask | DigDspMuxC1ComprSatCtlRAdr, blankData },
		{ flagReadMask | DigDspMuxC1PrngIvaRAdr, blankData },
		{ flagReadMask | DigDspMuxC1PrngIvbRAdr, blankData },
		{ flagReadMask | DigDspMuxC1PrngRandomRunRAdr, blankData },
		{ flagReadMask | DigDspMuxDacIqPhaseRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspChanKeepRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0FdbkCoreCoarseScaleRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0FdbkCoreMpProcPhOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0FdbkCoreMpProcSelEnRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0FdbkCoreMpProcSelThreshRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspModuloRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspPhaseStepRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspPiezoPiezoDcRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspTagRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspUseFiberIqRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspWaveSampPerRAdr, blankData },
		{ flagReadMask | DigDspMuxShell0DspWaveShiftRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspChanKeepRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1FdbkCoreCoarseScaleRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1FdbkCoreMpProcPhOffsetRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1FdbkCoreMpProcSelEnRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1FdbkCoreMpProcSelThreshRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspModuloRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspPhaseStepRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspPiezoPiezoDcRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspTagRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspUseFiberIqRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspWaveSampPerRAdr, blankData },
		{ flagReadMask | DigDspMuxShell1DspWaveShiftRAdr, blankData },
		{ flagReadMask | DigDspRewindRAdr, blankData },
		{ flagReadMask | DigDspSsaStimAmpstepRAdr, blankData },
		{ flagReadMask | DigDspSsaStimEnRAdr, blankData },
		{ flagReadMask | DigDspSsaStimGPeriodRAdr, blankData },
		{ flagReadMask | DigDspSsaStimPertstepRAdr, blankData },
		{ flagReadMask | DigDspTraceKeepRAdr, blankData },
		{ flagReadMask | DigDspTraceResetWeRAdr, blankData },
		{ flagReadMask | DigDspTrigInternalRAdr, blankData },
		{ flagReadMask | DigDspTrigModeRAdr, blankData },
		{ flagReadMask | DigDspWave0SrcRAdr, blankData },
		{ flagReadMask | DigDspWave1SrcRAdr, blankData },
		{ flagReadMask | DomainJumpRealignRAdr, blankData },
		{ flagReadMask | IccCfgRAdr, blankData },
		{ flagReadMask | QsfpI2CRegRAdr, blankData },
		{ flagReadMask | SfpAddressSetRAdr, blankData },
		{ flagReadMask | TagNowRAdr, blankData },
	};

	htonFpgaRegArray(pPolledRegMsg_, PolledRegMsgSize_);

    epicsThreadSleep(defaultPollPeriod);
    printf("%s created %ld of %ld parameters.\n",__PRETTY_FUNCTION__,NUM_SCLLRFPRC_PARAMS, paramTableAdds+NUM_SCLLRFPRC_PARAMS);

    wakeupPoller();
    wakeupReader();
}

scllrfPRCDriver::~scllrfPRCDriver()
{
	isShuttingDown_ = true;
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller();
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller(); // call this twice in case the poller was never set to run
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupReader();
	pasynOctetSyncIO->disconnect(pOctetAsynUser_);
	pasynCommonSyncIO->disconnectDevice(pCommonAsynUser_);
	pasynCommonSyncIO->disconnect(pCommonAsynUser_);
}

/** Called when you have the asyn parameter name and want the corresponding
 * register address.
  * \param[in] function From pAsynUser->reason, corresponding to a registered parameter.
  * \param[in] pToFpga Pointer to the {Address, Data} structure where the register address will be written
  * \param[in] nElements Number of elements to read. */
asynStatus scllrfPRCDriver::functionToRegister(const int function, FpgaReg *pToFpga)
{
	asynStatus status = asynSuccess;

    if( function == p_HellR )
    {
		pToFpga->addr = HellRAdr|flagReadMask;
    }
    else
    if( function == p_U15SdioAsSdoR )
    {
		pToFpga->addr = U15SdioAsSdoRAdr|flagReadMask;
    }
    else
    if( function == p_U15SdoAddrR )
    {
		pToFpga->addr = U15SdoAddrRAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiReadyR )
    {
		pToFpga->addr = U15SpiReadyRAdr|flagReadMask;
    }
    else
    if( function == p_U18SdioAsSdoR )
    {
		pToFpga->addr = U18SdioAsSdoRAdr|flagReadMask;
    }
    else
    if( function == p_U18SdoAddrR )
    {
		pToFpga->addr = U18SdoAddrRAdr|flagReadMask;
    }
    else
    if( function == p_U18SpiReadyR )
    {
		pToFpga->addr = U18SpiReadyRAdr|flagReadMask;
    }
    else
    if( function == p_U2DoutBits31To0R )
    {
		pToFpga->addr = U2DoutBits31To0RAdr|flagReadMask;
    }
    else
    if( function == p_U2DoutBits63To32R )
    {
		pToFpga->addr = U2DoutBits63To32RAdr|flagReadMask;
    }
    else
    if( function == p_U3DoutBits31To0R )
    {
		pToFpga->addr = U3DoutBits31To0RAdr|flagReadMask;
    }
    else
    if( function == p_U3DoutBits63To32R )
    {
		pToFpga->addr = U3DoutBits63To32RAdr|flagReadMask;
    }
    else
    if( function == p_U15SpiRdbkR )
    {
		pToFpga->addr = U15SpiRdbkRAdr|flagReadMask;
    }
    else
    if( function == p_U18SpiRdbkR )
    {
		pToFpga->addr = U18SpiRdbkRAdr|flagReadMask;
    }
    else
    if( function == p_AdcMmcmR )
    {
		pToFpga->addr = AdcMmcmRAdr|flagReadMask;
    }
    else
    if( function == p_AdcMmcmW )
    {
		pToFpga->addr = AdcMmcmWAdr;
    }
    else
    if( function == p_AdcTestTrigCntR )
    {
		pToFpga->addr = AdcTestTrigCntRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave1OutR )
    {
		pToFpga->addr = AdcTestWave1OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave2OutR )
    {
		pToFpga->addr = AdcTestWave2OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave3OutR )
    {
		pToFpga->addr = AdcTestWave3OutRAdr|flagReadMask;
    }
    else
    if( function == p_AdcTestWave4OutR )
    {
		pToFpga->addr = AdcTestWave4OutRAdr|flagReadMask;
    }
    else
    if( function == p_BanyanBufR )
    {
		pToFpga->addr = BanyanBufRAdr|flagReadMask;
    }
    else
    if( function == p_BanyanStatusR )
    {
		pToFpga->addr = BanyanStatusRAdr|flagReadMask;
    }
    else
    if( function == p_ClkPhaseDiffOutU2R )
    {
		pToFpga->addr = ClkPhaseDiffOutU2RAdr|flagReadMask;
    }
    else
    if( function == p_ClkPhaseDiffOutU3R )
    {
		pToFpga->addr = ClkPhaseDiffOutU3RAdr|flagReadMask;
    }
    else
    if( function == p_ClkStatusOutR )
    {
		pToFpga->addr = ClkStatusOutRAdr|flagReadMask;
    }
    else
    if( function == p_CrcErrorsR )
    {
		pToFpga->addr = CrcErrorsRAdr|flagReadMask;
    }
    else
    if( function == p_CtraceRunningR )
    {
		pToFpga->addr = CtraceRunningRAdr|flagReadMask;
    }
    else
    if( function == p_D0A0D0AR )
    {
		pToFpga->addr = D0A0D0ARAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU15SpiDataAddrRR )
    {
		pToFpga->addr = DigConfigU15SpiDataAddrRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU15SpiDataAddrRW )
    {
		pToFpga->addr = DigConfigU15SpiDataAddrRWAdr;
    }
    else
    if( function == p_DigConfigU15SpiReadAndStartRR )
    {
		pToFpga->addr = DigConfigU15SpiReadAndStartRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU15SpiReadAndStartRW )
    {
		pToFpga->addr = DigConfigU15SpiReadAndStartRWAdr;
    }
    else
    if( function == p_DigConfigU18SpiDataAddrRR )
    {
		pToFpga->addr = DigConfigU18SpiDataAddrRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU18SpiDataAddrRW )
    {
		pToFpga->addr = DigConfigU18SpiDataAddrRWAdr;
    }
    else
    if( function == p_DigConfigU18SpiReadAndStartRR )
    {
		pToFpga->addr = DigConfigU18SpiReadAndStartRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU18SpiReadAndStartRW )
    {
		pToFpga->addr = DigConfigU18SpiReadAndStartRWAdr;
    }
    else
    if( function == p_DigConfigU2ClkResetRR )
    {
		pToFpga->addr = DigConfigU2ClkResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU2ClkResetRW )
    {
		pToFpga->addr = DigConfigU2ClkResetRWAdr;
    }
    else
    if( function == p_DigConfigU2IserdesResetRR )
    {
		pToFpga->addr = DigConfigU2IserdesResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU2IserdesResetRW )
    {
		pToFpga->addr = DigConfigU2IserdesResetRWAdr;
    }
    else
    if( function == p_DigConfigU3ClkResetRR )
    {
		pToFpga->addr = DigConfigU3ClkResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU3ClkResetRW )
    {
		pToFpga->addr = DigConfigU3ClkResetRWAdr;
    }
    else
    if( function == p_DigConfigU3IserdesResetRR )
    {
		pToFpga->addr = DigConfigU3IserdesResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU3IserdesResetRW )
    {
		pToFpga->addr = DigConfigU3IserdesResetRWAdr;
    }
    else
    if( function == p_DigConfigU4ResetRR )
    {
		pToFpga->addr = DigConfigU4ResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigU4ResetRW )
    {
		pToFpga->addr = DigConfigU4ResetRWAdr;
    }
    else
    if( function == p_DigConfigBanyanMaskR )
    {
		pToFpga->addr = DigConfigBanyanMaskRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigBanyanMaskW )
    {
		pToFpga->addr = DigConfigBanyanMaskWAdr;
    }
    else
    if( function == p_DigConfigBitslipR )
    {
		pToFpga->addr = DigConfigBitslipRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigBitslipW )
    {
		pToFpga->addr = DigConfigBitslipWAdr;
    }
    else
    if( function == p_DigConfigClkStatusWeR )
    {
		pToFpga->addr = DigConfigClkStatusWeRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigClkStatusWeW )
    {
		pToFpga->addr = DigConfigClkStatusWeWAdr;
    }
    else
    if( function == p_DigConfigIdelayctrlResetRR )
    {
		pToFpga->addr = DigConfigIdelayctrlResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigIdelayctrlResetRW )
    {
		pToFpga->addr = DigConfigIdelayctrlResetRWAdr;
    }
    else
    if( function == p_DigConfigLlspiWeR )
    {
		pToFpga->addr = DigConfigLlspiWeRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigLlspiWeW )
    {
		pToFpga->addr = DigConfigLlspiWeWAdr;
    }
    else
    if( function == p_DigConfigMmcmResetRR )
    {
		pToFpga->addr = DigConfigMmcmResetRRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigMmcmResetRW )
    {
		pToFpga->addr = DigConfigMmcmResetRWAdr;
    }
    else
    if( function == p_DigConfigPeriphConfigR )
    {
		pToFpga->addr = DigConfigPeriphConfigRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigPeriphConfigW )
    {
		pToFpga->addr = DigConfigPeriphConfigWAdr;
    }
    else
    if( function == p_DigConfigPhasexTrigR )
    {
		pToFpga->addr = DigConfigPhasexTrigRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigPhasexTrigW )
    {
		pToFpga->addr = DigConfigPhasexTrigWAdr;
    }
    else
    if( function == p_DigConfigRawadcTrigR )
    {
		pToFpga->addr = DigConfigRawadcTrigRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigRawadcTrigW )
    {
		pToFpga->addr = DigConfigRawadcTrigWAdr;
    }
    else
    if( function == p_DigConfigScanTriggerWeR )
    {
		pToFpga->addr = DigConfigScanTriggerWeRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigScanTriggerWeW )
    {
		pToFpga->addr = DigConfigScanTriggerWeWAdr;
    }
    else
    if( function == p_DigConfigScannerDebugR )
    {
		pToFpga->addr = DigConfigScannerDebugRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigScannerDebugW )
    {
		pToFpga->addr = DigConfigScannerDebugWAdr;
    }
    else
    if( function == p_DigConfigSyncAd7794CsetR )
    {
		pToFpga->addr = DigConfigSyncAd7794CsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigSyncAd7794CsetW )
    {
		pToFpga->addr = DigConfigSyncAd7794CsetWAdr;
    }
    else
    if( function == p_DigConfigSyncTps62210CsetR )
    {
		pToFpga->addr = DigConfigSyncTps62210CsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigConfigSyncTps62210CsetW )
    {
		pToFpga->addr = DigConfigSyncTps62210CsetWAdr;
    }
    else
    if( function == p_DigDspAdcTestModeR )
    {
		pToFpga->addr = DigDspAdcTestModeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAdcTestModeW )
    {
		pToFpga->addr = DigDspAdcTestModeWAdr;
    }
    else
    if( function == p_DigDspAdcTestResetR )
    {
		pToFpga->addr = DigDspAdcTestResetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAdcTestResetW )
    {
		pToFpga->addr = DigDspAdcTestResetWAdr;
    }
    else
    if( function == p_DigDspAmplitudeR )
    {
		pToFpga->addr = DigDspAmplitudeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAmplitudeW )
    {
		pToFpga->addr = DigDspAmplitudeWAdr;
    }
    else
    if( function == p_DigDspAverageLenR )
    {
		pToFpga->addr = DigDspAverageLenRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspAverageLenW )
    {
		pToFpga->addr = DigDspAverageLenWAdr;
    }
    else
    if( function == p_DigDspBufTrigR )
    {
		pToFpga->addr = DigDspBufTrigRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspBufTrigW )
    {
		pToFpga->addr = DigDspBufTrigWAdr;
    }
    else
    if( function == p_DigDspCicPeriodR )
    {
		pToFpga->addr = DigDspCicPeriodRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspCicPeriodW )
    {
		pToFpga->addr = DigDspCicPeriodWAdr;
    }
    else
    if( function == p_DigDspCicShiftR )
    {
		pToFpga->addr = DigDspCicShiftRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspCicShiftW )
    {
		pToFpga->addr = DigDspCicShiftWAdr;
    }
    else
    if( function == p_DigDspCircleBufFlipR )
    {
		pToFpga->addr = DigDspCircleBufFlipRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspCircleBufFlipW )
    {
		pToFpga->addr = DigDspCircleBufFlipWAdr;
    }
    else
    if( function == p_DigDspDacDdsResetR )
    {
		pToFpga->addr = DigDspDacDdsResetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDacDdsResetW )
    {
		pToFpga->addr = DigDspDacDdsResetWAdr;
    }
    else
    if( function == p_DigDspDacModeR )
    {
		pToFpga->addr = DigDspDacModeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDacModeW )
    {
		pToFpga->addr = DigDspDacModeWAdr;
    }
    else
    if( function == p_DigDspDdsaModuloR )
    {
		pToFpga->addr = DigDspDdsaModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDdsaModuloW )
    {
		pToFpga->addr = DigDspDdsaModuloWAdr;
    }
    else
    if( function == p_DigDspDdsaPhstepHR )
    {
		pToFpga->addr = DigDspDdsaPhstepHRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDdsaPhstepHW )
    {
		pToFpga->addr = DigDspDdsaPhstepHWAdr;
    }
    else
    if( function == p_DigDspDdsaPhstepLR )
    {
		pToFpga->addr = DigDspDdsaPhstepLRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspDdsaPhstepLW )
    {
		pToFpga->addr = DigDspDdsaPhstepLWAdr;
    }
    else
    if( function == p_DigDspHistCountWStrobeR )
    {
		pToFpga->addr = DigDspHistCountWStrobeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspHistCountWStrobeW )
    {
		pToFpga->addr = DigDspHistCountWStrobeWAdr;
    }
    else
    if( function == p_DigDspLlrfDspDacEnR )
    {
		pToFpga->addr = DigDspLlrfDspDacEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspLlrfDspDacEnW )
    {
		pToFpga->addr = DigDspLlrfDspDacEnWAdr;
    }
    else
    if( function == p_DigDspLoAmpR )
    {
		pToFpga->addr = DigDspLoAmpRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspLoAmpW )
    {
		pToFpga->addr = DigDspLoAmpWAdr;
    }
    else
    if( function == p_DigDspModuloR )
    {
		pToFpga->addr = DigDspModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspModuloW )
    {
		pToFpga->addr = DigDspModuloWAdr;
    }
    else
    if( function == p_DigDspMuxBeam0ModuloR )
    {
		pToFpga->addr = DigDspMuxBeam0ModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxBeam0ModuloW )
    {
		pToFpga->addr = DigDspMuxBeam0ModuloWAdr;
    }
    else
    if( function == p_DigDspMuxBeam0PhaseInitR )
    {
		pToFpga->addr = DigDspMuxBeam0PhaseInitRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxBeam0PhaseInitW )
    {
		pToFpga->addr = DigDspMuxBeam0PhaseInitWAdr;
    }
    else
    if( function == p_DigDspMuxBeam0PhaseStepR )
    {
		pToFpga->addr = DigDspMuxBeam0PhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxBeam0PhaseStepW )
    {
		pToFpga->addr = DigDspMuxBeam0PhaseStepWAdr;
    }
    else
    if( function == p_DigDspMuxBeam1ModuloR )
    {
		pToFpga->addr = DigDspMuxBeam1ModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxBeam1ModuloW )
    {
		pToFpga->addr = DigDspMuxBeam1ModuloWAdr;
    }
    else
    if( function == p_DigDspMuxBeam1PhaseInitR )
    {
		pToFpga->addr = DigDspMuxBeam1PhaseInitRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxBeam1PhaseInitW )
    {
		pToFpga->addr = DigDspMuxBeam1PhaseInitWAdr;
    }
    else
    if( function == p_DigDspMuxBeam1PhaseStepR )
    {
		pToFpga->addr = DigDspMuxBeam1PhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxBeam1PhaseStepW )
    {
		pToFpga->addr = DigDspMuxBeam1PhaseStepWAdr;
    }
    else
    if( function == p_DigDspMuxC0ACavOffsetR )
    {
		pToFpga->addr = DigDspMuxC0ACavOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ACavOffsetW )
    {
		pToFpga->addr = DigDspMuxC0ACavOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC0AForOffsetR )
    {
		pToFpga->addr = DigDspMuxC0AForOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0AForOffsetW )
    {
		pToFpga->addr = DigDspMuxC0AForOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC0ARflOffsetR )
    {
		pToFpga->addr = DigDspMuxC0ARflOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ARflOffsetW )
    {
		pToFpga->addr = DigDspMuxC0ARflOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC0AmpLpBwR )
    {
		pToFpga->addr = DigDspMuxC0AmpLpBwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0AmpLpBwW )
    {
		pToFpga->addr = DigDspMuxC0AmpLpBwWAdr;
    }
    else
    if( function == p_DigDspMuxC0ComprSatCtlR )
    {
		pToFpga->addr = DigDspMuxC0ComprSatCtlRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ComprSatCtlW )
    {
		pToFpga->addr = DigDspMuxC0ComprSatCtlWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecDot0KOutR )
    {
		pToFpga->addr = DigDspMuxC0ElecDot0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecDot0KOutW )
    {
		pToFpga->addr = DigDspMuxC0ElecDot0KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecDot1KOutR )
    {
		pToFpga->addr = DigDspMuxC0ElecDot1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecDot1KOutW )
    {
		pToFpga->addr = DigDspMuxC0ElecDot1KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecDot2KOutR )
    {
		pToFpga->addr = DigDspMuxC0ElecDot2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecDot2KOutW )
    {
		pToFpga->addr = DigDspMuxC0ElecDot2KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecDriveCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecDriveCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecDriveCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecDriveCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecDriveCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC0ElecDriveCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecDriveCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC0ElecDriveCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecFreq0CoarseFreqR )
    {
		pToFpga->addr = DigDspMuxC0ElecFreq0CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecFreq0CoarseFreqW )
    {
		pToFpga->addr = DigDspMuxC0ElecFreq0CoarseFreqWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecFreq1CoarseFreqR )
    {
		pToFpga->addr = DigDspMuxC0ElecFreq1CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecFreq1CoarseFreqW )
    {
		pToFpga->addr = DigDspMuxC0ElecFreq1CoarseFreqWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecFreq2CoarseFreqR )
    {
		pToFpga->addr = DigDspMuxC0ElecFreq2CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecFreq2CoarseFreqW )
    {
		pToFpga->addr = DigDspMuxC0ElecFreq2CoarseFreqWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM0BeamCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM0BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM0BeamCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM0BeamCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM0BwR )
    {
		pToFpga->addr = DigDspMuxC0ElecM0BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM0BwW )
    {
		pToFpga->addr = DigDspMuxC0ElecM0BwWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM0DriveCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM0DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM0DriveCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM0DriveCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM0OutCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM0OutCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM0OutCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM0OutCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM0OutCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC0ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM0OutCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC0ElecM0OutCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM1BeamCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM1BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM1BeamCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM1BeamCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM1BwR )
    {
		pToFpga->addr = DigDspMuxC0ElecM1BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM1BwW )
    {
		pToFpga->addr = DigDspMuxC0ElecM1BwWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM1DriveCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM1DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM1DriveCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM1DriveCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM1OutCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM1OutCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM1OutCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM1OutCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM1OutCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC0ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM1OutCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC0ElecM1OutCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM2BeamCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM2BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM2BeamCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM2BeamCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM2BwR )
    {
		pToFpga->addr = DigDspMuxC0ElecM2BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM2BwW )
    {
		pToFpga->addr = DigDspMuxC0ElecM2BwWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM2DriveCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM2DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM2DriveCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM2DriveCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM2OutCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC0ElecM2OutCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM2OutCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC0ElecM2OutCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecM2OutCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC0ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecM2OutCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC0ElecM2OutCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecModuloR )
    {
		pToFpga->addr = DigDspMuxC0ElecModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecModuloW )
    {
		pToFpga->addr = DigDspMuxC0ElecModuloWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecOuterProd0KOutR )
    {
		pToFpga->addr = DigDspMuxC0ElecOuterProd0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecOuterProd0KOutW )
    {
		pToFpga->addr = DigDspMuxC0ElecOuterProd0KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecOuterProd1KOutR )
    {
		pToFpga->addr = DigDspMuxC0ElecOuterProd1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecOuterProd1KOutW )
    {
		pToFpga->addr = DigDspMuxC0ElecOuterProd1KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecOuterProd2KOutR )
    {
		pToFpga->addr = DigDspMuxC0ElecOuterProd2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecOuterProd2KOutW )
    {
		pToFpga->addr = DigDspMuxC0ElecOuterProd2KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC0ElecPhaseStepR )
    {
		pToFpga->addr = DigDspMuxC0ElecPhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0ElecPhaseStepW )
    {
		pToFpga->addr = DigDspMuxC0ElecPhaseStepWAdr;
    }
    else
    if( function == p_DigDspMuxC0PiezoCoupleKOutR )
    {
		pToFpga->addr = DigDspMuxC0PiezoCoupleKOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0PiezoCoupleKOutW )
    {
		pToFpga->addr = DigDspMuxC0PiezoCoupleKOutWAdr;
    }
    else
    if( function == p_DigDspMuxC0PrngIvaR )
    {
		pToFpga->addr = DigDspMuxC0PrngIvaRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0PrngIvaW )
    {
		pToFpga->addr = DigDspMuxC0PrngIvaWAdr;
    }
    else
    if( function == p_DigDspMuxC0PrngIvbR )
    {
		pToFpga->addr = DigDspMuxC0PrngIvbRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0PrngIvbW )
    {
		pToFpga->addr = DigDspMuxC0PrngIvbWAdr;
    }
    else
    if( function == p_DigDspMuxC0PrngRandomRunR )
    {
		pToFpga->addr = DigDspMuxC0PrngRandomRunRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC0PrngRandomRunW )
    {
		pToFpga->addr = DigDspMuxC0PrngRandomRunWAdr;
    }
    else
    if( function == p_DigDspMuxC1ACavOffsetR )
    {
		pToFpga->addr = DigDspMuxC1ACavOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ACavOffsetW )
    {
		pToFpga->addr = DigDspMuxC1ACavOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC1AForOffsetR )
    {
		pToFpga->addr = DigDspMuxC1AForOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1AForOffsetW )
    {
		pToFpga->addr = DigDspMuxC1AForOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC1ARflOffsetR )
    {
		pToFpga->addr = DigDspMuxC1ARflOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ARflOffsetW )
    {
		pToFpga->addr = DigDspMuxC1ARflOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC1AmpLpBwR )
    {
		pToFpga->addr = DigDspMuxC1AmpLpBwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1AmpLpBwW )
    {
		pToFpga->addr = DigDspMuxC1AmpLpBwWAdr;
    }
    else
    if( function == p_DigDspMuxC1ComprSatCtlR )
    {
		pToFpga->addr = DigDspMuxC1ComprSatCtlRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ComprSatCtlW )
    {
		pToFpga->addr = DigDspMuxC1ComprSatCtlWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecDot0KOutR )
    {
		pToFpga->addr = DigDspMuxC1ElecDot0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecDot0KOutW )
    {
		pToFpga->addr = DigDspMuxC1ElecDot0KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecDot1KOutR )
    {
		pToFpga->addr = DigDspMuxC1ElecDot1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecDot1KOutW )
    {
		pToFpga->addr = DigDspMuxC1ElecDot1KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecDot2KOutR )
    {
		pToFpga->addr = DigDspMuxC1ElecDot2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecDot2KOutW )
    {
		pToFpga->addr = DigDspMuxC1ElecDot2KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecDriveCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecDriveCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecDriveCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecDriveCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecDriveCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC1ElecDriveCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecDriveCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC1ElecDriveCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecFreq0CoarseFreqR )
    {
		pToFpga->addr = DigDspMuxC1ElecFreq0CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecFreq0CoarseFreqW )
    {
		pToFpga->addr = DigDspMuxC1ElecFreq0CoarseFreqWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecFreq1CoarseFreqR )
    {
		pToFpga->addr = DigDspMuxC1ElecFreq1CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecFreq1CoarseFreqW )
    {
		pToFpga->addr = DigDspMuxC1ElecFreq1CoarseFreqWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecFreq2CoarseFreqR )
    {
		pToFpga->addr = DigDspMuxC1ElecFreq2CoarseFreqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecFreq2CoarseFreqW )
    {
		pToFpga->addr = DigDspMuxC1ElecFreq2CoarseFreqWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM0BeamCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM0BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM0BeamCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM0BeamCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM0BwR )
    {
		pToFpga->addr = DigDspMuxC1ElecM0BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM0BwW )
    {
		pToFpga->addr = DigDspMuxC1ElecM0BwWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM0DriveCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM0DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM0DriveCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM0DriveCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM0OutCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM0OutCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM0OutCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM0OutCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM0OutCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC1ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM0OutCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC1ElecM0OutCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM1BeamCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM1BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM1BeamCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM1BeamCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM1BwR )
    {
		pToFpga->addr = DigDspMuxC1ElecM1BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM1BwW )
    {
		pToFpga->addr = DigDspMuxC1ElecM1BwWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM1DriveCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM1DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM1DriveCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM1DriveCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM1OutCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM1OutCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM1OutCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM1OutCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM1OutCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC1ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM1OutCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC1ElecM1OutCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM2BeamCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM2BeamCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM2BeamCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM2BeamCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM2BwR )
    {
		pToFpga->addr = DigDspMuxC1ElecM2BwRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM2BwW )
    {
		pToFpga->addr = DigDspMuxC1ElecM2BwWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM2DriveCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM2DriveCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM2DriveCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM2DriveCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM2OutCplOutCouplingR )
    {
		pToFpga->addr = DigDspMuxC1ElecM2OutCplOutCouplingRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM2OutCplOutCouplingW )
    {
		pToFpga->addr = DigDspMuxC1ElecM2OutCplOutCouplingWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecM2OutCplOutPhaseOffsetR )
    {
		pToFpga->addr = DigDspMuxC1ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecM2OutCplOutPhaseOffsetW )
    {
		pToFpga->addr = DigDspMuxC1ElecM2OutCplOutPhaseOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecModuloR )
    {
		pToFpga->addr = DigDspMuxC1ElecModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecModuloW )
    {
		pToFpga->addr = DigDspMuxC1ElecModuloWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecOuterProd0KOutR )
    {
		pToFpga->addr = DigDspMuxC1ElecOuterProd0KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecOuterProd0KOutW )
    {
		pToFpga->addr = DigDspMuxC1ElecOuterProd0KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecOuterProd1KOutR )
    {
		pToFpga->addr = DigDspMuxC1ElecOuterProd1KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecOuterProd1KOutW )
    {
		pToFpga->addr = DigDspMuxC1ElecOuterProd1KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecOuterProd2KOutR )
    {
		pToFpga->addr = DigDspMuxC1ElecOuterProd2KOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecOuterProd2KOutW )
    {
		pToFpga->addr = DigDspMuxC1ElecOuterProd2KOutWAdr;
    }
    else
    if( function == p_DigDspMuxC1ElecPhaseStepR )
    {
		pToFpga->addr = DigDspMuxC1ElecPhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1ElecPhaseStepW )
    {
		pToFpga->addr = DigDspMuxC1ElecPhaseStepWAdr;
    }
    else
    if( function == p_DigDspMuxC1PiezoCoupleKOutR )
    {
		pToFpga->addr = DigDspMuxC1PiezoCoupleKOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1PiezoCoupleKOutW )
    {
		pToFpga->addr = DigDspMuxC1PiezoCoupleKOutWAdr;
    }
    else
    if( function == p_DigDspMuxC1PrngIvaR )
    {
		pToFpga->addr = DigDspMuxC1PrngIvaRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1PrngIvaW )
    {
		pToFpga->addr = DigDspMuxC1PrngIvaWAdr;
    }
    else
    if( function == p_DigDspMuxC1PrngIvbR )
    {
		pToFpga->addr = DigDspMuxC1PrngIvbRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1PrngIvbW )
    {
		pToFpga->addr = DigDspMuxC1PrngIvbWAdr;
    }
    else
    if( function == p_DigDspMuxC1PrngRandomRunR )
    {
		pToFpga->addr = DigDspMuxC1PrngRandomRunRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxC1PrngRandomRunW )
    {
		pToFpga->addr = DigDspMuxC1PrngRandomRunWAdr;
    }
    else
    if( function == p_DigDspMuxCav4MechNoiseCoupleKOutR )
    {
		pToFpga->addr = DigDspMuxCav4MechNoiseCoupleKOutRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxCav4MechNoiseCoupleKOutW )
    {
		pToFpga->addr = DigDspMuxCav4MechNoiseCoupleKOutWAdr;
    }
    else
    if( function == p_DigDspMuxCav4MechPrngIvaR )
    {
		pToFpga->addr = DigDspMuxCav4MechPrngIvaRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxCav4MechPrngIvaW )
    {
		pToFpga->addr = DigDspMuxCav4MechPrngIvaWAdr;
    }
    else
    if( function == p_DigDspMuxCav4MechPrngIvbR )
    {
		pToFpga->addr = DigDspMuxCav4MechPrngIvbRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxCav4MechPrngIvbW )
    {
		pToFpga->addr = DigDspMuxCav4MechPrngIvbWAdr;
    }
    else
    if( function == p_DigDspMuxCav4MechPrngRandomRunR )
    {
		pToFpga->addr = DigDspMuxCav4MechPrngRandomRunRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxCav4MechPrngRandomRunW )
    {
		pToFpga->addr = DigDspMuxCav4MechPrngRandomRunWAdr;
    }
    else
    if( function == p_DigDspMuxCav4MechResonatorPropConstR )
    {
		pToFpga->addr = DigDspMuxCav4MechResonatorPropConstRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxCav4MechResonatorPropConstW )
    {
		pToFpga->addr = DigDspMuxCav4MechResonatorPropConstWAdr;
    }
    else
    if( function == p_DigDspMuxDacIqPhaseR )
    {
		pToFpga->addr = DigDspMuxDacIqPhaseRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxDacIqPhaseW )
    {
		pToFpga->addr = DigDspMuxDacIqPhaseWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspChanKeepR )
    {
		pToFpga->addr = DigDspMuxShell0DspChanKeepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspChanKeepW )
    {
		pToFpga->addr = DigDspMuxShell0DspChanKeepWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1AKxR )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1AKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1AKxW )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1AKxWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1AKyR )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1AKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1AKyW )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1AKyWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1BKxR )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1BKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1BKxW )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1BKxWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1BKyR )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1BKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspLpNotchLp1BKyW )
    {
		pToFpga->addr = DigDspMuxShell0DspLpNotchLp1BKyWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspModuloR )
    {
		pToFpga->addr = DigDspMuxShell0DspModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspModuloW )
    {
		pToFpga->addr = DigDspMuxShell0DspModuloWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspPhaseStepR )
    {
		pToFpga->addr = DigDspMuxShell0DspPhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspPhaseStepW )
    {
		pToFpga->addr = DigDspMuxShell0DspPhaseStepWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspPiezoPiezoDcR )
    {
		pToFpga->addr = DigDspMuxShell0DspPiezoPiezoDcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspPiezoPiezoDcW )
    {
		pToFpga->addr = DigDspMuxShell0DspPiezoPiezoDcWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspPiezoSfConstsR )
    {
		pToFpga->addr = DigDspMuxShell0DspPiezoSfConstsRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspPiezoSfConstsW )
    {
		pToFpga->addr = DigDspMuxShell0DspPiezoSfConstsWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspTagR )
    {
		pToFpga->addr = DigDspMuxShell0DspTagRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspTagW )
    {
		pToFpga->addr = DigDspMuxShell0DspTagWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspUseFiberIqR )
    {
		pToFpga->addr = DigDspMuxShell0DspUseFiberIqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspUseFiberIqW )
    {
		pToFpga->addr = DigDspMuxShell0DspUseFiberIqWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspWaveSampPerR )
    {
		pToFpga->addr = DigDspMuxShell0DspWaveSampPerRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspWaveSampPerW )
    {
		pToFpga->addr = DigDspMuxShell0DspWaveSampPerWAdr;
    }
    else
    if( function == p_DigDspMuxShell0DspWaveShiftR )
    {
		pToFpga->addr = DigDspMuxShell0DspWaveShiftRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0DspWaveShiftW )
    {
		pToFpga->addr = DigDspMuxShell0DspWaveShiftWAdr;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreCoarseScaleR )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreCoarseScaleRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreCoarseScaleW )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreCoarseScaleWAdr;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcCoeffR )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcCoeffRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcCoeffW )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcCoeffWAdr;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcLimR )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcLimRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcLimW )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcLimWAdr;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcPhOffsetR )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcPhOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcPhOffsetW )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcPhOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcSelEnR )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcSelEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcSelEnW )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcSelEnWAdr;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcSelThreshR )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcSelThreshRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcSelThreshW )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcSelThreshWAdr;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcSetmpR )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcSetmpRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell0FdbkCoreMpProcSetmpW )
    {
		pToFpga->addr = DigDspMuxShell0FdbkCoreMpProcSetmpWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspChanKeepR )
    {
		pToFpga->addr = DigDspMuxShell1DspChanKeepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspChanKeepW )
    {
		pToFpga->addr = DigDspMuxShell1DspChanKeepWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1AKxR )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1AKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1AKxW )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1AKxWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1AKyR )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1AKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1AKyW )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1AKyWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1BKxR )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1BKxRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1BKxW )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1BKxWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1BKyR )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1BKyRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspLpNotchLp1BKyW )
    {
		pToFpga->addr = DigDspMuxShell1DspLpNotchLp1BKyWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspModuloR )
    {
		pToFpga->addr = DigDspMuxShell1DspModuloRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspModuloW )
    {
		pToFpga->addr = DigDspMuxShell1DspModuloWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspPhaseStepR )
    {
		pToFpga->addr = DigDspMuxShell1DspPhaseStepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspPhaseStepW )
    {
		pToFpga->addr = DigDspMuxShell1DspPhaseStepWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspPiezoPiezoDcR )
    {
		pToFpga->addr = DigDspMuxShell1DspPiezoPiezoDcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspPiezoPiezoDcW )
    {
		pToFpga->addr = DigDspMuxShell1DspPiezoPiezoDcWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspPiezoSfConstsR )
    {
		pToFpga->addr = DigDspMuxShell1DspPiezoSfConstsRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspPiezoSfConstsW )
    {
		pToFpga->addr = DigDspMuxShell1DspPiezoSfConstsWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspTagR )
    {
		pToFpga->addr = DigDspMuxShell1DspTagRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspTagW )
    {
		pToFpga->addr = DigDspMuxShell1DspTagWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspUseFiberIqR )
    {
		pToFpga->addr = DigDspMuxShell1DspUseFiberIqRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspUseFiberIqW )
    {
		pToFpga->addr = DigDspMuxShell1DspUseFiberIqWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspWaveSampPerR )
    {
		pToFpga->addr = DigDspMuxShell1DspWaveSampPerRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspWaveSampPerW )
    {
		pToFpga->addr = DigDspMuxShell1DspWaveSampPerWAdr;
    }
    else
    if( function == p_DigDspMuxShell1DspWaveShiftR )
    {
		pToFpga->addr = DigDspMuxShell1DspWaveShiftRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1DspWaveShiftW )
    {
		pToFpga->addr = DigDspMuxShell1DspWaveShiftWAdr;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreCoarseScaleR )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreCoarseScaleRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreCoarseScaleW )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreCoarseScaleWAdr;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcCoeffR )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcCoeffRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcCoeffW )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcCoeffWAdr;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcLimR )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcLimRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcLimW )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcLimWAdr;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcPhOffsetR )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcPhOffsetRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcPhOffsetW )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcPhOffsetWAdr;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcSelEnR )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcSelEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcSelEnW )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcSelEnWAdr;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcSelThreshR )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcSelThreshRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcSelThreshW )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcSelThreshWAdr;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcSetmpR )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcSetmpRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspMuxShell1FdbkCoreMpProcSetmpW )
    {
		pToFpga->addr = DigDspMuxShell1FdbkCoreMpProcSetmpWAdr;
    }
    else
    if( function == p_DigDspPhaseStepHR )
    {
		pToFpga->addr = DigDspPhaseStepHRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPhaseStepHW )
    {
		pToFpga->addr = DigDspPhaseStepHWAdr;
    }
    else
    if( function == p_DigDspPhaseStepLR )
    {
		pToFpga->addr = DigDspPhaseStepLRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPhaseStepLW )
    {
		pToFpga->addr = DigDspPhaseStepLWAdr;
    }
    else
    if( function == p_DigDspPrcDspCavSelR )
    {
		pToFpga->addr = DigDspPrcDspCavSelRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPrcDspCavSelW )
    {
		pToFpga->addr = DigDspPrcDspCavSelWAdr;
    }
    else
    if( function == p_DigDspPrcDspPrlCfgR )
    {
		pToFpga->addr = DigDspPrcDspPrlCfgRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPrcDspPrlCfgW )
    {
		pToFpga->addr = DigDspPrcDspPrlCfgWAdr;
    }
    else
    if( function == p_DigDspPrcDspPrlGainR )
    {
		pToFpga->addr = DigDspPrcDspPrlGainRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspPrcDspPrlGainW )
    {
		pToFpga->addr = DigDspPrcDspPrlGainWAdr;
    }
    else
    if( function == p_DigDspRewindR )
    {
		pToFpga->addr = DigDspRewindRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspRewindW )
    {
		pToFpga->addr = DigDspRewindWAdr;
    }
    else
    if( function == p_DigDspSsaStimAmpstepR )
    {
		pToFpga->addr = DigDspSsaStimAmpstepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimAmpstepW )
    {
		pToFpga->addr = DigDspSsaStimAmpstepWAdr;
    }
    else
    if( function == p_DigDspSsaStimEnR )
    {
		pToFpga->addr = DigDspSsaStimEnRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimEnW )
    {
		pToFpga->addr = DigDspSsaStimEnWAdr;
    }
    else
    if( function == p_DigDspSsaStimGPeriodR )
    {
		pToFpga->addr = DigDspSsaStimGPeriodRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimGPeriodW )
    {
		pToFpga->addr = DigDspSsaStimGPeriodWAdr;
    }
    else
    if( function == p_DigDspSsaStimPertstepR )
    {
		pToFpga->addr = DigDspSsaStimPertstepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspSsaStimPertstepW )
    {
		pToFpga->addr = DigDspSsaStimPertstepWAdr;
    }
    else
    if( function == p_DigDspTraceKeepR )
    {
		pToFpga->addr = DigDspTraceKeepRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTraceKeepW )
    {
		pToFpga->addr = DigDspTraceKeepWAdr;
    }
    else
    if( function == p_DigDspTraceResetWeR )
    {
		pToFpga->addr = DigDspTraceResetWeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTraceResetWeW )
    {
		pToFpga->addr = DigDspTraceResetWeWAdr;
    }
    else
    if( function == p_DigDspTrigInternalR )
    {
		pToFpga->addr = DigDspTrigInternalRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTrigInternalW )
    {
		pToFpga->addr = DigDspTrigInternalWAdr;
    }
    else
    if( function == p_DigDspTrigModeR )
    {
		pToFpga->addr = DigDspTrigModeRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspTrigModeW )
    {
		pToFpga->addr = DigDspTrigModeWAdr;
    }
    else
    if( function == p_DigDspWave0SrcR )
    {
		pToFpga->addr = DigDspWave0SrcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspWave0SrcW )
    {
		pToFpga->addr = DigDspWave0SrcWAdr;
    }
    else
    if( function == p_DigDspWave1SrcR )
    {
		pToFpga->addr = DigDspWave1SrcRAdr|flagReadMask;
    }
    else
    if( function == p_DigDspWave1SrcW )
    {
		pToFpga->addr = DigDspWave1SrcWAdr;
    }
    else
    if( function == p_DomainJumpRealignR )
    {
		pToFpga->addr = DomainJumpRealignRAdr|flagReadMask;
    }
    else
    if( function == p_DomainJumpRealignW )
    {
		pToFpga->addr = DomainJumpRealignWAdr;
    }
    else
    if( function == p_FfffffffR )
    {
		pToFpga->addr = FfffffffRAdr|flagReadMask;
    }
    else
    if( function == p_Frequency4XoutR )
    {
		pToFpga->addr = Frequency4XoutRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyAdcR )
    {
		pToFpga->addr = FrequencyAdcRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyClkout3R )
    {
		pToFpga->addr = FrequencyClkout3RAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyDcoR )
    {
		pToFpga->addr = FrequencyDcoRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyGtxRxR )
    {
		pToFpga->addr = FrequencyGtxRxRAdr|flagReadMask;
    }
    else
    if( function == p_FrequencyGtxTxR )
    {
		pToFpga->addr = FrequencyGtxTxRAdr|flagReadMask;
    }
    else
    if( function == p_HistDoutR )
    {
		pToFpga->addr = HistDoutRAdr|flagReadMask;
    }
    else
    if( function == p_HistStatusR )
    {
		pToFpga->addr = HistStatusRAdr|flagReadMask;
    }
    else
    if( function == p_IccCfgR )
    {
		pToFpga->addr = IccCfgRAdr|flagReadMask;
    }
    else
    if( function == p_IccCfgW )
    {
		pToFpga->addr = IccCfgWAdr;
    }
    else
    if( function == p_IdelayBaseR )
    {
		pToFpga->addr = IdelayBaseRAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU2Bits19To0R )
    {
		pToFpga->addr = IdelayValueOutU2Bits19To0RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU2Bits39To20R )
    {
		pToFpga->addr = IdelayValueOutU2Bits39To20RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU3Bits19To0R )
    {
		pToFpga->addr = IdelayValueOutU3Bits19To0RAdr|flagReadMask;
    }
    else
    if( function == p_IdelayValueOutU3Bits39To20R )
    {
		pToFpga->addr = IdelayValueOutU3Bits39To20RAdr|flagReadMask;
    }
    else
    if( function == p_LlrfCircleDataR )
    {
		pToFpga->addr = LlrfCircleDataRAdr|flagReadMask;
    }
    else
    if( function == p_LlrfCircleReadyR )
    {
		pToFpga->addr = LlrfCircleReadyRAdr|flagReadMask;
    }
    else
    if( function == p_LlspiResultR )
    {
		pToFpga->addr = LlspiResultRAdr|flagReadMask;
    }
    else
    if( function == p_LlspiStatusR )
    {
		pToFpga->addr = LlspiStatusRAdr|flagReadMask;
    }
    else
    if( function == p_OWoR )
    {
		pToFpga->addr = OWoRAdr|flagReadMask;
    }
    else
    if( function == p_PhasexDoutR )
    {
		pToFpga->addr = PhasexDoutRAdr|flagReadMask;
    }
    else
    if( function == p_PhasexStatusR )
    {
		pToFpga->addr = PhasexStatusRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpBufR )
    {
		pToFpga->addr = QsfpBufRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpI2CRegR )
    {
		pToFpga->addr = QsfpI2CRegRAdr|flagReadMask;
    }
    else
    if( function == p_QsfpI2CRegW )
    {
		pToFpga->addr = QsfpI2CRegWAdr;
    }
    else
    if( function == p_RldR )
    {
		pToFpga->addr = RldRAdr|flagReadMask;
    }
    else
    if( function == p_ScannerResultR )
    {
		pToFpga->addr = ScannerResultRAdr|flagReadMask;
    }
    else
    if( function == p_SfpAddressSetR )
    {
		pToFpga->addr = SfpAddressSetRAdr|flagReadMask;
    }
    else
    if( function == p_SfpAddressSetW )
    {
		pToFpga->addr = SfpAddressSetWAdr;
    }
    else
    if( function == p_Shell0SlowDataR )
    {
		pToFpga->addr = Shell0SlowDataRAdr|flagReadMask;
    }
    else
    if( function == p_Shell1SlowDataR )
    {
		pToFpga->addr = Shell1SlowDataRAdr|flagReadMask;
    }
    else
    if( function == p_SlowChainOutR )
    {
		pToFpga->addr = SlowChainOutRAdr|flagReadMask;
    }
    else
    if( function == p_TagNowR )
    {
		pToFpga->addr = TagNowRAdr|flagReadMask;
    }
    else
    if( function == p_TagNowW )
    {
		pToFpga->addr = TagNowWAdr;
    }
    else
    if( function == p_Tgen0DelayPcXxxR )
    {
		pToFpga->addr = Tgen0DelayPcXxxRAdr|flagReadMask;
    }
    else
    if( function == p_Tgen0DelayPcXxxW )
    {
		pToFpga->addr = Tgen0DelayPcXxxWAdr;
    }
    else
    if( function == p_Tgen1DelayPcXxxR )
    {
		pToFpga->addr = Tgen1DelayPcXxxRAdr|flagReadMask;
    }
    else
    if( function == p_Tgen1DelayPcXxxW )
    {
		pToFpga->addr = Tgen1DelayPcXxxWAdr;
    }
    else
    if( function == p_TraceIBufR )
    {
		pToFpga->addr = TraceIBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceIqBufR )
    {
		pToFpga->addr = TraceIqBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceQBufR )
    {
		pToFpga->addr = TraceQBufRAdr|flagReadMask;
    }
    else
    if( function == p_TraceStatus1R )
    {
		pToFpga->addr = TraceStatus1RAdr|flagReadMask;
    }
    else
    if( function == p_TraceStatus2R )
    {
		pToFpga->addr = TraceStatus2RAdr|flagReadMask;
    }
    else
    if( function == p_Wave0OutR )
    {
		pToFpga->addr = Wave0OutRAdr|flagReadMask;
    }
    else
    if( function == p_Wave1OutR )
    {
		pToFpga->addr = Wave1OutRAdr|flagReadMask;
    }
    else
    if( function == p_WaveformsAvailableR )
    {
		pToFpga->addr = WaveformsAvailableRAdr|flagReadMask;
    }
    else
    	status = asynError;

    return status;
}

/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCDriver::processRegReadback(const FpgaReg *pFromFpga, bool &waveIsReady)
{
	unsigned int i;
	asynStatus status = asynSuccess;
	assert(pFromFpga->addr&flagReadMask); // This function is only for read registers
	epicsInt32 errorCount;
	int32_t signExtBits = 0;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
	break;

    case HellRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_HellR,
				(pFromFpga->data & HellMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HellRString,
				(unsigned ) pFromFpga->data & HellMask);
	break;

    case OWoRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_OWoR,
				(pFromFpga->data & OWoMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				OWoRString,
				(unsigned ) pFromFpga->data & OWoMask);
	break;

    case RldRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_RldR,
				(pFromFpga->data & RldMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				RldRString,
				(unsigned ) pFromFpga->data & RldMask);
	break;

    case D0A0D0ARAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_D0A0D0AR,
				(pFromFpga->data & D0A0D0AMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				D0A0D0ARString,
				(unsigned ) pFromFpga->data & D0A0D0AMask);
	break;

    case LlspiStatusRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_LlspiStatusR,
				(pFromFpga->data & LlspiStatusMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiStatusRString,
				(unsigned ) pFromFpga->data & LlspiStatusMask);
	break;

    case LlspiResultRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_LlspiResultR,
				(pFromFpga->data & LlspiResultMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlspiResultRString,
				(unsigned ) pFromFpga->data & LlspiResultMask);
	break;

    case ClkStatusOutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_ClkStatusOutR,
				(pFromFpga->data & ClkStatusOutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkStatusOutRString,
				(unsigned ) pFromFpga->data & ClkStatusOutMask);
	break;

    case FfffffffRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_FfffffffR,
				(pFromFpga->data & FfffffffMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FfffffffRString,
				(unsigned ) pFromFpga->data & FfffffffMask);
	break;

    case FrequencyAdcRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_FrequencyAdcR,
				(pFromFpga->data & FrequencyAdcMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyAdcRString,
				(unsigned ) pFromFpga->data & FrequencyAdcMask);
	break;

    case Frequency4XoutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_Frequency4XoutR,
				(pFromFpga->data & Frequency4XoutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Frequency4XoutRString,
				(unsigned ) pFromFpga->data & Frequency4XoutMask);
	break;

    case FrequencyClkout3RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_FrequencyClkout3R,
				(pFromFpga->data & FrequencyClkout3Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyClkout3RString,
				(unsigned ) pFromFpga->data & FrequencyClkout3Mask);
	break;

    case FrequencyDcoRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_FrequencyDcoR,
				(pFromFpga->data & FrequencyDcoMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyDcoRString,
				(unsigned ) pFromFpga->data & FrequencyDcoMask);
	break;

    case U2DoutBits31To0RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U2DoutBits31To0R,
				(pFromFpga->data & U2DoutBits31To0Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2DoutBits31To0RString,
				(unsigned ) pFromFpga->data & U2DoutBits31To0Mask);
	break;

    case U2DoutBits63To32RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U2DoutBits63To32R,
				(pFromFpga->data & U2DoutBits63To32Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U2DoutBits63To32RString,
				(unsigned ) pFromFpga->data & U2DoutBits63To32Mask);
	break;

    case IdelayValueOutU2Bits19To0RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_IdelayValueOutU2Bits19To0R,
				(pFromFpga->data & IdelayValueOutU2Bits19To0Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU2Bits19To0RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU2Bits19To0Mask);
	break;

    case IdelayValueOutU2Bits39To20RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_IdelayValueOutU2Bits39To20R,
				(pFromFpga->data & IdelayValueOutU2Bits39To20Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU2Bits39To20RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU2Bits39To20Mask);
	break;

    case U3DoutBits31To0RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U3DoutBits31To0R,
				(pFromFpga->data & U3DoutBits31To0Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3DoutBits31To0RString,
				(unsigned ) pFromFpga->data & U3DoutBits31To0Mask);
	break;

    case U3DoutBits63To32RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U3DoutBits63To32R,
				(pFromFpga->data & U3DoutBits63To32Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U3DoutBits63To32RString,
				(unsigned ) pFromFpga->data & U3DoutBits63To32Mask);
	break;

    case IdelayValueOutU3Bits19To0RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_IdelayValueOutU3Bits19To0R,
				(pFromFpga->data & IdelayValueOutU3Bits19To0Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU3Bits19To0RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU3Bits19To0Mask);
	break;

    case IdelayValueOutU3Bits39To20RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_IdelayValueOutU3Bits39To20R,
				(pFromFpga->data & IdelayValueOutU3Bits39To20Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayValueOutU3Bits39To20RString,
				(unsigned ) pFromFpga->data & IdelayValueOutU3Bits39To20Mask);
	break;

    case Wave0OutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_Wave0OutR,
				(pFromFpga->data & Wave0OutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave0OutRString,
				(unsigned ) pFromFpga->data & Wave0OutMask);
	break;

    case Wave1OutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_Wave1OutR,
				(pFromFpga->data & Wave1OutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				Wave1OutRString,
				(unsigned ) pFromFpga->data & Wave1OutMask);
	break;

    case AdcTestWave1OutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_AdcTestWave1OutR,
				(pFromFpga->data & AdcTestWave1OutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave1OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave1OutMask);
	break;

    case AdcTestWave2OutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_AdcTestWave2OutR,
				(pFromFpga->data & AdcTestWave2OutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave2OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave2OutMask);
	break;

    case AdcTestWave3OutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_AdcTestWave3OutR,
				(pFromFpga->data & AdcTestWave3OutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave3OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave3OutMask);
	break;

    case AdcTestWave4OutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_AdcTestWave4OutR,
				(pFromFpga->data & AdcTestWave4OutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestWave4OutRString,
				(unsigned ) pFromFpga->data & AdcTestWave4OutMask);
	break;

    case CtraceRunningRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_CtraceRunningR,
				(pFromFpga->data & CtraceRunningMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CtraceRunningRString,
				(unsigned ) pFromFpga->data & CtraceRunningMask);
	break;

    case FrequencyGtxTxRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_FrequencyGtxTxR,
				(pFromFpga->data & FrequencyGtxTxMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyGtxTxRString,
				(unsigned ) pFromFpga->data & FrequencyGtxTxMask);
	break;

    case FrequencyGtxRxRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_FrequencyGtxRxR,
				(pFromFpga->data & FrequencyGtxRxMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				FrequencyGtxRxRString,
				(unsigned ) pFromFpga->data & FrequencyGtxRxMask);
	break;

    case HistStatusRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_HistStatusR,
				(pFromFpga->data & HistStatusMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				HistStatusRString,
				(unsigned ) pFromFpga->data & HistStatusMask);
	break;

    case PhasexStatusRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_PhasexStatusR,
				(pFromFpga->data & PhasexStatusMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				PhasexStatusRString,
				(unsigned ) pFromFpga->data & PhasexStatusMask);
	break;

    case ClkPhaseDiffOutU2RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_ClkPhaseDiffOutU2R,
				(pFromFpga->data & ClkPhaseDiffOutU2Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkPhaseDiffOutU2RString,
				(unsigned ) pFromFpga->data & ClkPhaseDiffOutU2Mask);
	break;

    case ClkPhaseDiffOutU3RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_ClkPhaseDiffOutU3R,
				(pFromFpga->data & ClkPhaseDiffOutU3Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				ClkPhaseDiffOutU3RString,
				(unsigned ) pFromFpga->data & ClkPhaseDiffOutU3Mask);
	break;

    case CrcErrorsRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_CrcErrorsR,
				(pFromFpga->data & CrcErrorsMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				CrcErrorsRString,
				(unsigned ) pFromFpga->data & CrcErrorsMask);
	break;

    case U15SpiRdbkRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U15SpiRdbkR,
				(pFromFpga->data & U15SpiRdbkMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiRdbkRString,
				(unsigned ) pFromFpga->data & U15SpiRdbkMask);
	// shared address with U15SdoAddrRAdr  56 == 56

		status = (asynStatus) setIntegerParam(p_U15SdoAddrR,
				(pFromFpga->data & U15SdoAddrMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SdoAddrRString,
				(unsigned ) pFromFpga->data & U15SdoAddrMask);
	break;

    case U15SpiReadyRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U15SpiReadyR,
				(pFromFpga->data & U15SpiReadyMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SpiReadyRString,
				(unsigned ) pFromFpga->data & U15SpiReadyMask);
	// shared address with U15SdioAsSdoRAdr  57 == 57

		status = (asynStatus) setIntegerParam(p_U15SdioAsSdoR,
				(pFromFpga->data & U15SdioAsSdoMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U15SdioAsSdoRString,
				(unsigned ) pFromFpga->data & U15SdioAsSdoMask);
	break;

    case U18SdoAddrRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U18SdoAddrR,
				(pFromFpga->data & U18SdoAddrMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SdoAddrRString,
				(unsigned ) pFromFpga->data & U18SdoAddrMask);
	// shared address with U18SpiRdbkRAdr  60 == 60

		status = (asynStatus) setIntegerParam(p_U18SpiRdbkR,
				(pFromFpga->data & U18SpiRdbkMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SpiRdbkRString,
				(unsigned ) pFromFpga->data & U18SpiRdbkMask);
	break;

    case U18SdioAsSdoRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_U18SdioAsSdoR,
				(pFromFpga->data & U18SdioAsSdoMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SdioAsSdoRString,
				(unsigned ) pFromFpga->data & U18SdioAsSdoMask);
	// shared address with U18SpiReadyRAdr  61 == 61

		status = (asynStatus) setIntegerParam(p_U18SpiReadyR,
				(pFromFpga->data & U18SpiReadyMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				U18SpiReadyRString,
				(unsigned ) pFromFpga->data & U18SpiReadyMask);
	break;

    case AdcTestTrigCntRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_AdcTestTrigCntR,
				(pFromFpga->data & AdcTestTrigCntMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcTestTrigCntRString,
				(unsigned ) pFromFpga->data & AdcTestTrigCntMask);
	break;

    case WaveformsAvailableRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_WaveformsAvailableR,
				(pFromFpga->data & WaveformsAvailableMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				WaveformsAvailableRString,
				(unsigned ) pFromFpga->data & WaveformsAvailableMask);
	break;

    case BanyanStatusRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_BanyanStatusR,
				(pFromFpga->data & BanyanStatusMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				BanyanStatusRString,
				(unsigned ) pFromFpga->data & BanyanStatusMask);
	break;

    case SlowChainOutRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_SlowChainOutR,
				(pFromFpga->data & SlowChainOutMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SlowChainOutRString,
				(unsigned ) pFromFpga->data & SlowChainOutMask);
	break;

    case TraceStatus1RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_TraceStatus1R,
				(pFromFpga->data & TraceStatus1Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus1RString,
				(unsigned ) pFromFpga->data & TraceStatus1Mask);
	break;

    case TraceStatus2RAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_TraceStatus2R,
				(pFromFpga->data & TraceStatus2Mask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus2RString,
				(unsigned ) pFromFpga->data & TraceStatus2Mask);
	break;

    case LlrfCircleReadyRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_LlrfCircleReadyR,
				(pFromFpga->data & LlrfCircleReadyMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlrfCircleReadyRString,
				(unsigned ) pFromFpga->data & LlrfCircleReadyMask);
	break;

    case AdcMmcmRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_AdcMmcmR,
				(pFromFpga->data & AdcMmcmMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmRString,
				(unsigned ) pFromFpga->data & AdcMmcmMask);
	break;

    case DigConfigU15SpiDataAddrRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU15SpiDataAddrRR,
				(pFromFpga->data & DigConfigU15SpiDataAddrRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU15SpiDataAddrRRString,
				(unsigned ) pFromFpga->data & DigConfigU15SpiDataAddrRMask);
	break;

    case DigConfigU15SpiReadAndStartRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU15SpiReadAndStartRR,
				(pFromFpga->data & DigConfigU15SpiReadAndStartRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU15SpiReadAndStartRRString,
				(unsigned ) pFromFpga->data & DigConfigU15SpiReadAndStartRMask);
	break;

    case DigConfigU18SpiDataAddrRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU18SpiDataAddrRR,
				(pFromFpga->data & DigConfigU18SpiDataAddrRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU18SpiDataAddrRRString,
				(unsigned ) pFromFpga->data & DigConfigU18SpiDataAddrRMask);
	break;

    case DigConfigU18SpiReadAndStartRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU18SpiReadAndStartRR,
				(pFromFpga->data & DigConfigU18SpiReadAndStartRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU18SpiReadAndStartRRString,
				(unsigned ) pFromFpga->data & DigConfigU18SpiReadAndStartRMask);
	break;

    case DigConfigU2ClkResetRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU2ClkResetRR,
				(pFromFpga->data & DigConfigU2ClkResetRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU2ClkResetRRString,
				(unsigned ) pFromFpga->data & DigConfigU2ClkResetRMask);
	break;

    case DigConfigU2IserdesResetRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU2IserdesResetRR,
				(pFromFpga->data & DigConfigU2IserdesResetRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU2IserdesResetRRString,
				(unsigned ) pFromFpga->data & DigConfigU2IserdesResetRMask);
	break;

    case DigConfigU3ClkResetRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU3ClkResetRR,
				(pFromFpga->data & DigConfigU3ClkResetRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU3ClkResetRRString,
				(unsigned ) pFromFpga->data & DigConfigU3ClkResetRMask);
	break;

    case DigConfigU3IserdesResetRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU3IserdesResetRR,
				(pFromFpga->data & DigConfigU3IserdesResetRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU3IserdesResetRRString,
				(unsigned ) pFromFpga->data & DigConfigU3IserdesResetRMask);
	break;

    case DigConfigU4ResetRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigU4ResetRR,
				(pFromFpga->data & DigConfigU4ResetRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU4ResetRRString,
				(unsigned ) pFromFpga->data & DigConfigU4ResetRMask);
	break;

    case DigConfigBanyanMaskRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigBanyanMaskR,
				(pFromFpga->data & DigConfigBanyanMaskMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigBanyanMaskRString,
				(unsigned ) pFromFpga->data & DigConfigBanyanMaskMask);
	break;

    case DigConfigBitslipRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigBitslipR,
				(pFromFpga->data & DigConfigBitslipMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigBitslipRString,
				(unsigned ) pFromFpga->data & DigConfigBitslipMask);
	break;

    case DigConfigClkStatusWeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigClkStatusWeR,
				(pFromFpga->data & DigConfigClkStatusWeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigClkStatusWeRString,
				(unsigned ) pFromFpga->data & DigConfigClkStatusWeMask);
	break;

    case DigConfigIdelayctrlResetRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigIdelayctrlResetRR,
				(pFromFpga->data & DigConfigIdelayctrlResetRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigIdelayctrlResetRRString,
				(unsigned ) pFromFpga->data & DigConfigIdelayctrlResetRMask);
	break;

    case DigConfigLlspiWeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigLlspiWeR,
				(pFromFpga->data & DigConfigLlspiWeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigLlspiWeRString,
				(unsigned ) pFromFpga->data & DigConfigLlspiWeMask);
	break;

    case DigConfigMmcmResetRRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigMmcmResetRR,
				(pFromFpga->data & DigConfigMmcmResetRMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigMmcmResetRRString,
				(unsigned ) pFromFpga->data & DigConfigMmcmResetRMask);
	break;

    case DigConfigPeriphConfigRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigPeriphConfigR,
				(pFromFpga->data & DigConfigPeriphConfigMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigPeriphConfigRString,
				(unsigned ) pFromFpga->data & DigConfigPeriphConfigMask);
	break;

    case DigConfigPhasexTrigRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigPhasexTrigR,
				(pFromFpga->data & DigConfigPhasexTrigMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigPhasexTrigRString,
				(unsigned ) pFromFpga->data & DigConfigPhasexTrigMask);
	break;

    case DigConfigRawadcTrigRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigRawadcTrigR,
				(pFromFpga->data & DigConfigRawadcTrigMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigRawadcTrigRString,
				(unsigned ) pFromFpga->data & DigConfigRawadcTrigMask);
	break;

    case DigConfigScanTriggerWeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigScanTriggerWeR,
				(pFromFpga->data & DigConfigScanTriggerWeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigScanTriggerWeRString,
				(unsigned ) pFromFpga->data & DigConfigScanTriggerWeMask);
	break;

    case DigConfigScannerDebugRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigScannerDebugR,
				(pFromFpga->data & DigConfigScannerDebugMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigScannerDebugRString,
				(unsigned ) pFromFpga->data & DigConfigScannerDebugMask);
	break;

    case DigConfigSyncAd7794CsetRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigSyncAd7794CsetR,
				(pFromFpga->data & DigConfigSyncAd7794CsetMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigSyncAd7794CsetRString,
				(unsigned ) pFromFpga->data & DigConfigSyncAd7794CsetMask);
	break;

    case DigConfigSyncTps62210CsetRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigConfigSyncTps62210CsetR,
				(pFromFpga->data & DigConfigSyncTps62210CsetMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigSyncTps62210CsetRString,
				(unsigned ) pFromFpga->data & DigConfigSyncTps62210CsetMask);
	break;

    case DigDspAdcTestModeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspAdcTestModeR,
				(pFromFpga->data & DigDspAdcTestModeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestModeRString,
				(unsigned ) pFromFpga->data & DigDspAdcTestModeMask);
	break;

    case DigDspAdcTestResetRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspAdcTestResetR,
				(pFromFpga->data & DigDspAdcTestResetMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestResetRString,
				(unsigned ) pFromFpga->data & DigDspAdcTestResetMask);
	break;

    case DigDspAmplitudeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspAmplitudeR,
				(pFromFpga->data & DigDspAmplitudeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAmplitudeRString,
				(unsigned ) pFromFpga->data & DigDspAmplitudeMask);
	break;

    case DigDspAverageLenRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspAverageLenR,
				(pFromFpga->data & DigDspAverageLenMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAverageLenRString,
				(unsigned ) pFromFpga->data & DigDspAverageLenMask);
	break;

    case DigDspBufTrigRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspBufTrigR,
				(pFromFpga->data & DigDspBufTrigMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspBufTrigRString,
				(unsigned ) pFromFpga->data & DigDspBufTrigMask);
	break;

    case DigDspCicPeriodRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspCicPeriodR,
				(pFromFpga->data & DigDspCicPeriodMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicPeriodRString,
				(unsigned ) pFromFpga->data & DigDspCicPeriodMask);
	break;

    case DigDspCicShiftRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspCicShiftR,
				(pFromFpga->data & DigDspCicShiftMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicShiftRString,
				(unsigned ) pFromFpga->data & DigDspCicShiftMask);
	break;

    case DigDspCircleBufFlipRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspCircleBufFlipR,
				(pFromFpga->data & DigDspCircleBufFlipMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipRString,
				(unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
	break;

    case DigDspDacDdsResetRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspDacDdsResetR,
				(pFromFpga->data & DigDspDacDdsResetMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacDdsResetRString,
				(unsigned ) pFromFpga->data & DigDspDacDdsResetMask);
	break;

    case DigDspDacModeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspDacModeR,
				(pFromFpga->data & DigDspDacModeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacModeRString,
				(unsigned ) pFromFpga->data & DigDspDacModeMask);
	break;

    case DigDspDdsaModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspDdsaModuloR,
				(pFromFpga->data & DigDspDdsaModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaModuloRString,
				(unsigned ) pFromFpga->data & DigDspDdsaModuloMask);
	break;

    case DigDspDdsaPhstepHRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspDdsaPhstepHR,
				(pFromFpga->data & DigDspDdsaPhstepHMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepHRString,
				(unsigned ) pFromFpga->data & DigDspDdsaPhstepHMask);
	break;

    case DigDspDdsaPhstepLRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspDdsaPhstepLR,
				(pFromFpga->data & DigDspDdsaPhstepLMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepLRString,
				(unsigned ) pFromFpga->data & DigDspDdsaPhstepLMask);
	break;

    case DigDspHistCountWStrobeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspHistCountWStrobeR,
				(pFromFpga->data & DigDspHistCountWStrobeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspHistCountWStrobeRString,
				(unsigned ) pFromFpga->data & DigDspHistCountWStrobeMask);
	break;

    case DigDspLlrfDspDacEnRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspLlrfDspDacEnR,
				(pFromFpga->data & DigDspLlrfDspDacEnMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLlrfDspDacEnRString,
				(unsigned ) pFromFpga->data & DigDspLlrfDspDacEnMask);
	break;

    case DigDspLoAmpRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspLoAmpR,
				(pFromFpga->data & DigDspLoAmpMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLoAmpRString,
				(unsigned ) pFromFpga->data & DigDspLoAmpMask);
	break;

    case DigDspModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspModuloR,
				(pFromFpga->data & DigDspModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspModuloRString,
				(unsigned ) pFromFpga->data & DigDspModuloMask);
	break;

    case DigDspPhaseStepHRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspPhaseStepHR,
				(pFromFpga->data & DigDspPhaseStepHMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhaseStepHRString,
				(unsigned ) pFromFpga->data & DigDspPhaseStepHMask);
	break;

    case DigDspPhaseStepLRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspPhaseStepLR,
				(pFromFpga->data & DigDspPhaseStepLMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhaseStepLRString,
				(unsigned ) pFromFpga->data & DigDspPhaseStepLMask);
	break;

    case DigDspPrcDspCavSelRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspPrcDspCavSelR,
				(pFromFpga->data & DigDspPrcDspCavSelMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspCavSelRString,
				(unsigned ) pFromFpga->data & DigDspPrcDspCavSelMask);
	break;

    case DigDspPrcDspPrlCfgRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspPrcDspPrlCfgR,
				(pFromFpga->data & DigDspPrcDspPrlCfgMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlCfgRString,
				(unsigned ) pFromFpga->data & DigDspPrcDspPrlCfgMask);
	break;

    case DigDspPrcDspPrlGainRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspPrcDspPrlGainMask + 1 ) >> 1))? ~DigDspPrcDspPrlGainMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspPrcDspPrlGainR,
				(pFromFpga->data & DigDspPrcDspPrlGainMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlGainRString,
				(unsigned ) pFromFpga->data & DigDspPrcDspPrlGainMask);
	break;

    case DigDspMuxBeam0ModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxBeam0ModuloR,
				(pFromFpga->data & DigDspMuxBeam0ModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0ModuloRString,
				(unsigned ) pFromFpga->data & DigDspMuxBeam0ModuloMask);
	break;

    case DigDspMuxBeam0PhaseInitRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxBeam0PhaseInitR,
				(pFromFpga->data & DigDspMuxBeam0PhaseInitMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0PhaseInitRString,
				(unsigned ) pFromFpga->data & DigDspMuxBeam0PhaseInitMask);
	break;

    case DigDspMuxBeam0PhaseStepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxBeam0PhaseStepR,
				(pFromFpga->data & DigDspMuxBeam0PhaseStepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0PhaseStepRString,
				(unsigned ) pFromFpga->data & DigDspMuxBeam0PhaseStepMask);
	break;

    case DigDspMuxBeam1ModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxBeam1ModuloR,
				(pFromFpga->data & DigDspMuxBeam1ModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1ModuloRString,
				(unsigned ) pFromFpga->data & DigDspMuxBeam1ModuloMask);
	break;

    case DigDspMuxBeam1PhaseInitRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxBeam1PhaseInitR,
				(pFromFpga->data & DigDspMuxBeam1PhaseInitMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1PhaseInitRString,
				(unsigned ) pFromFpga->data & DigDspMuxBeam1PhaseInitMask);
	break;

    case DigDspMuxBeam1PhaseStepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxBeam1PhaseStepR,
				(pFromFpga->data & DigDspMuxBeam1PhaseStepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1PhaseStepRString,
				(unsigned ) pFromFpga->data & DigDspMuxBeam1PhaseStepMask);
	break;

    case DigDspMuxCav4MechPrngIvaRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxCav4MechPrngIvaR,
				(pFromFpga->data & DigDspMuxCav4MechPrngIvaMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngIvaRString,
				(unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngIvaMask);
	break;

    case DigDspMuxCav4MechPrngIvbRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxCav4MechPrngIvbR,
				(pFromFpga->data & DigDspMuxCav4MechPrngIvbMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngIvbRString,
				(unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngIvbMask);
	break;

    case DigDspMuxCav4MechPrngRandomRunRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxCav4MechPrngRandomRunR,
				(pFromFpga->data & DigDspMuxCav4MechPrngRandomRunMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngRandomRunRString,
				(unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngRandomRunMask);
	break;

    case DigDspMuxC0ACavOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ACavOffsetMask + 1 ) >> 1))? ~DigDspMuxC0ACavOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ACavOffsetR,
				(pFromFpga->data & DigDspMuxC0ACavOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ACavOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ACavOffsetMask);
	break;

    case DigDspMuxC0AForOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0AForOffsetMask + 1 ) >> 1))? ~DigDspMuxC0AForOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0AForOffsetR,
				(pFromFpga->data & DigDspMuxC0AForOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0AForOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0AForOffsetMask);
	break;

    case DigDspMuxC0ARflOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ARflOffsetMask + 1 ) >> 1))? ~DigDspMuxC0ARflOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ARflOffsetR,
				(pFromFpga->data & DigDspMuxC0ARflOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ARflOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ARflOffsetMask);
	break;

    case DigDspMuxC0AmpLpBwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0AmpLpBwMask + 1 ) >> 1))? ~DigDspMuxC0AmpLpBwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0AmpLpBwR,
				(pFromFpga->data & DigDspMuxC0AmpLpBwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0AmpLpBwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0AmpLpBwMask);
	break;

    case DigDspMuxC0ElecFreq0CoarseFreqRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecFreq0CoarseFreqMask + 1 ) >> 1))? ~DigDspMuxC0ElecFreq0CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecFreq0CoarseFreqR,
				(pFromFpga->data & DigDspMuxC0ElecFreq0CoarseFreqMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq0CoarseFreqRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq0CoarseFreqMask);
	break;

    case DigDspMuxC0ElecFreq1CoarseFreqRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecFreq1CoarseFreqMask + 1 ) >> 1))? ~DigDspMuxC0ElecFreq1CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecFreq1CoarseFreqR,
				(pFromFpga->data & DigDspMuxC0ElecFreq1CoarseFreqMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq1CoarseFreqRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq1CoarseFreqMask);
	break;

    case DigDspMuxC0ElecFreq2CoarseFreqRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecFreq2CoarseFreqMask + 1 ) >> 1))? ~DigDspMuxC0ElecFreq2CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecFreq2CoarseFreqR,
				(pFromFpga->data & DigDspMuxC0ElecFreq2CoarseFreqMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq2CoarseFreqRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq2CoarseFreqMask);
	break;

    case DigDspMuxC0ElecM0BeamCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM0BeamCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM0BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM0BeamCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM0BeamCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0BeamCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM0BeamCouplingMask);
	break;

    case DigDspMuxC0ElecM0BwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM0BwMask + 1 ) >> 1))? ~DigDspMuxC0ElecM0BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM0BwR,
				(pFromFpga->data & DigDspMuxC0ElecM0BwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0BwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM0BwMask);
	break;

    case DigDspMuxC0ElecM0DriveCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM0DriveCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM0DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM0DriveCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM0DriveCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0DriveCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM0DriveCouplingMask);
	break;

    case DigDspMuxC0ElecM1BeamCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM1BeamCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM1BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM1BeamCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM1BeamCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1BeamCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM1BeamCouplingMask);
	break;

    case DigDspMuxC0ElecM1BwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM1BwMask + 1 ) >> 1))? ~DigDspMuxC0ElecM1BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM1BwR,
				(pFromFpga->data & DigDspMuxC0ElecM1BwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1BwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM1BwMask);
	break;

    case DigDspMuxC0ElecM1DriveCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM1DriveCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM1DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM1DriveCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM1DriveCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1DriveCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM1DriveCouplingMask);
	break;

    case DigDspMuxC0ElecM2BeamCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM2BeamCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM2BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM2BeamCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM2BeamCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2BeamCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM2BeamCouplingMask);
	break;

    case DigDspMuxC0ElecM2BwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM2BwMask + 1 ) >> 1))? ~DigDspMuxC0ElecM2BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM2BwR,
				(pFromFpga->data & DigDspMuxC0ElecM2BwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2BwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM2BwMask);
	break;

    case DigDspMuxC0ElecM2DriveCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM2DriveCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM2DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecM2DriveCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM2DriveCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2DriveCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM2DriveCouplingMask);
	break;

    case DigDspMuxC0ElecModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecModuloR,
				(pFromFpga->data & DigDspMuxC0ElecModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecModuloRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecModuloMask);
	break;

    case DigDspMuxC0ElecPhaseStepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ElecPhaseStepR,
				(pFromFpga->data & DigDspMuxC0ElecPhaseStepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecPhaseStepRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecPhaseStepMask);
	break;

    case DigDspMuxC0ComprSatCtlRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC0ComprSatCtlR,
				(pFromFpga->data & DigDspMuxC0ComprSatCtlMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ComprSatCtlRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ComprSatCtlMask);
	break;

    case DigDspMuxC0PrngIvaRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC0PrngIvaR,
				(pFromFpga->data & DigDspMuxC0PrngIvaMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngIvaRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0PrngIvaMask);
	break;

    case DigDspMuxC0PrngIvbRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC0PrngIvbR,
				(pFromFpga->data & DigDspMuxC0PrngIvbMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngIvbRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0PrngIvbMask);
	break;

    case DigDspMuxC0PrngRandomRunRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC0PrngRandomRunR,
				(pFromFpga->data & DigDspMuxC0PrngRandomRunMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngRandomRunRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0PrngRandomRunMask);
	break;

    case DigDspMuxC1ACavOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ACavOffsetMask + 1 ) >> 1))? ~DigDspMuxC1ACavOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ACavOffsetR,
				(pFromFpga->data & DigDspMuxC1ACavOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ACavOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ACavOffsetMask);
	break;

    case DigDspMuxC1AForOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1AForOffsetMask + 1 ) >> 1))? ~DigDspMuxC1AForOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1AForOffsetR,
				(pFromFpga->data & DigDspMuxC1AForOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1AForOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1AForOffsetMask);
	break;

    case DigDspMuxC1ARflOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ARflOffsetMask + 1 ) >> 1))? ~DigDspMuxC1ARflOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ARflOffsetR,
				(pFromFpga->data & DigDspMuxC1ARflOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ARflOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ARflOffsetMask);
	break;

    case DigDspMuxC1AmpLpBwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1AmpLpBwMask + 1 ) >> 1))? ~DigDspMuxC1AmpLpBwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1AmpLpBwR,
				(pFromFpga->data & DigDspMuxC1AmpLpBwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1AmpLpBwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1AmpLpBwMask);
	break;

    case DigDspMuxC1ElecFreq0CoarseFreqRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecFreq0CoarseFreqMask + 1 ) >> 1))? ~DigDspMuxC1ElecFreq0CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecFreq0CoarseFreqR,
				(pFromFpga->data & DigDspMuxC1ElecFreq0CoarseFreqMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq0CoarseFreqRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq0CoarseFreqMask);
	break;

    case DigDspMuxC1ElecFreq1CoarseFreqRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecFreq1CoarseFreqMask + 1 ) >> 1))? ~DigDspMuxC1ElecFreq1CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecFreq1CoarseFreqR,
				(pFromFpga->data & DigDspMuxC1ElecFreq1CoarseFreqMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq1CoarseFreqRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq1CoarseFreqMask);
	break;

    case DigDspMuxC1ElecFreq2CoarseFreqRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecFreq2CoarseFreqMask + 1 ) >> 1))? ~DigDspMuxC1ElecFreq2CoarseFreqMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecFreq2CoarseFreqR,
				(pFromFpga->data & DigDspMuxC1ElecFreq2CoarseFreqMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq2CoarseFreqRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq2CoarseFreqMask);
	break;

    case DigDspMuxC1ElecM0BeamCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM0BeamCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM0BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM0BeamCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM0BeamCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0BeamCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM0BeamCouplingMask);
	break;

    case DigDspMuxC1ElecM0BwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM0BwMask + 1 ) >> 1))? ~DigDspMuxC1ElecM0BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM0BwR,
				(pFromFpga->data & DigDspMuxC1ElecM0BwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0BwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM0BwMask);
	break;

    case DigDspMuxC1ElecM0DriveCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM0DriveCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM0DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM0DriveCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM0DriveCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0DriveCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM0DriveCouplingMask);
	break;

    case DigDspMuxC1ElecM1BeamCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM1BeamCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM1BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM1BeamCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM1BeamCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1BeamCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM1BeamCouplingMask);
	break;

    case DigDspMuxC1ElecM1BwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM1BwMask + 1 ) >> 1))? ~DigDspMuxC1ElecM1BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM1BwR,
				(pFromFpga->data & DigDspMuxC1ElecM1BwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1BwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM1BwMask);
	break;

    case DigDspMuxC1ElecM1DriveCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM1DriveCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM1DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM1DriveCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM1DriveCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1DriveCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM1DriveCouplingMask);
	break;

    case DigDspMuxC1ElecM2BeamCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM2BeamCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM2BeamCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM2BeamCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM2BeamCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2BeamCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM2BeamCouplingMask);
	break;

    case DigDspMuxC1ElecM2BwRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM2BwMask + 1 ) >> 1))? ~DigDspMuxC1ElecM2BwMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM2BwR,
				(pFromFpga->data & DigDspMuxC1ElecM2BwMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2BwRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM2BwMask);
	break;

    case DigDspMuxC1ElecM2DriveCouplingRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM2DriveCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM2DriveCouplingMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecM2DriveCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM2DriveCouplingMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2DriveCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM2DriveCouplingMask);
	break;

    case DigDspMuxC1ElecModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecModuloR,
				(pFromFpga->data & DigDspMuxC1ElecModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecModuloRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecModuloMask);
	break;

    case DigDspMuxC1ElecPhaseStepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ElecPhaseStepR,
				(pFromFpga->data & DigDspMuxC1ElecPhaseStepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecPhaseStepRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecPhaseStepMask);
	break;

    case DigDspMuxC1ComprSatCtlRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC1ComprSatCtlR,
				(pFromFpga->data & DigDspMuxC1ComprSatCtlMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ComprSatCtlRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ComprSatCtlMask);
	break;

    case DigDspMuxC1PrngIvaRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC1PrngIvaR,
				(pFromFpga->data & DigDspMuxC1PrngIvaMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngIvaRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1PrngIvaMask);
	break;

    case DigDspMuxC1PrngIvbRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC1PrngIvbR,
				(pFromFpga->data & DigDspMuxC1PrngIvbMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngIvbRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1PrngIvbMask);
	break;

    case DigDspMuxC1PrngRandomRunRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxC1PrngRandomRunR,
				(pFromFpga->data & DigDspMuxC1PrngRandomRunMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngRandomRunRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1PrngRandomRunMask);
	break;

    case DigDspMuxDacIqPhaseRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxDacIqPhaseR,
				(pFromFpga->data & DigDspMuxDacIqPhaseMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxDacIqPhaseRString,
				(unsigned ) pFromFpga->data & DigDspMuxDacIqPhaseMask);
	break;

    case DigDspMuxShell0DspChanKeepRAdr|flagReadMask:

		status = (asynStatus) setUIntDigitalParam(p_DigDspMuxShell0DspChanKeepR,
				(pFromFpga->data & DigDspMuxShell0DspChanKeepMask) , DigDspMuxShell0DspChanKeepMask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspChanKeepRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspChanKeepMask);
	break;

    case DigDspMuxShell0FdbkCoreCoarseScaleRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0FdbkCoreCoarseScaleR,
				(pFromFpga->data & DigDspMuxShell0FdbkCoreCoarseScaleMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreCoarseScaleRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreCoarseScaleMask);
	break;

    case DigDspMuxShell0FdbkCoreMpProcPhOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxShell0FdbkCoreMpProcPhOffsetMask + 1 ) >> 1))? ~DigDspMuxShell0FdbkCoreMpProcPhOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0FdbkCoreMpProcPhOffsetR,
				(pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcPhOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcPhOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcPhOffsetMask);
	break;

    case DigDspMuxShell0FdbkCoreMpProcSelEnRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0FdbkCoreMpProcSelEnR,
				(pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelEnMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcSelEnRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelEnMask);
	break;

    case DigDspMuxShell0FdbkCoreMpProcSelThreshRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxShell0FdbkCoreMpProcSelThreshMask + 1 ) >> 1))? ~DigDspMuxShell0FdbkCoreMpProcSelThreshMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0FdbkCoreMpProcSelThreshR,
				(pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelThreshMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcSelThreshRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelThreshMask);
	break;

    case DigDspMuxShell0DspModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0DspModuloR,
				(pFromFpga->data & DigDspMuxShell0DspModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspModuloRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspModuloMask);
	break;

    case DigDspMuxShell0DspPhaseStepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0DspPhaseStepR,
				(pFromFpga->data & DigDspMuxShell0DspPhaseStepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspPhaseStepRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspPhaseStepMask);
	break;

    case DigDspMuxShell0DspPiezoPiezoDcRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0DspPiezoPiezoDcR,
				(pFromFpga->data & DigDspMuxShell0DspPiezoPiezoDcMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspPiezoPiezoDcRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspPiezoPiezoDcMask);
	break;

    case DigDspMuxShell0DspTagRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0DspTagR,
				(pFromFpga->data & DigDspMuxShell0DspTagMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspTagRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspTagMask);
	break;

    case DigDspMuxShell0DspUseFiberIqRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0DspUseFiberIqR,
				(pFromFpga->data & DigDspMuxShell0DspUseFiberIqMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspUseFiberIqRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspUseFiberIqMask);
	break;

    case DigDspMuxShell0DspWaveSampPerRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0DspWaveSampPerR,
				(pFromFpga->data & DigDspMuxShell0DspWaveSampPerMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspWaveSampPerRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspWaveSampPerMask);
	break;

    case DigDspMuxShell0DspWaveShiftRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell0DspWaveShiftR,
				(pFromFpga->data & DigDspMuxShell0DspWaveShiftMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspWaveShiftRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspWaveShiftMask);
	break;

    case DigDspMuxShell1DspChanKeepRAdr|flagReadMask:

		status = (asynStatus) setUIntDigitalParam(p_DigDspMuxShell1DspChanKeepR,
				(pFromFpga->data & DigDspMuxShell1DspChanKeepMask) , DigDspMuxShell1DspChanKeepMask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspChanKeepRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspChanKeepMask);
	break;

    case DigDspMuxShell1FdbkCoreCoarseScaleRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1FdbkCoreCoarseScaleR,
				(pFromFpga->data & DigDspMuxShell1FdbkCoreCoarseScaleMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreCoarseScaleRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreCoarseScaleMask);
	break;

    case DigDspMuxShell1FdbkCoreMpProcPhOffsetRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxShell1FdbkCoreMpProcPhOffsetMask + 1 ) >> 1))? ~DigDspMuxShell1FdbkCoreMpProcPhOffsetMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1FdbkCoreMpProcPhOffsetR,
				(pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcPhOffsetMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcPhOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcPhOffsetMask);
	break;

    case DigDspMuxShell1FdbkCoreMpProcSelEnRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1FdbkCoreMpProcSelEnR,
				(pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelEnMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcSelEnRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelEnMask);
	break;

    case DigDspMuxShell1FdbkCoreMpProcSelThreshRAdr|flagReadMask:

		signExtBits = (pFromFpga->data & ((DigDspMuxShell1FdbkCoreMpProcSelThreshMask + 1 ) >> 1))? ~DigDspMuxShell1FdbkCoreMpProcSelThreshMask : 0;
		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1FdbkCoreMpProcSelThreshR,
				(pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelThreshMask) | signExtBits );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcSelThreshRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelThreshMask);
	break;

    case DigDspMuxShell1DspModuloRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1DspModuloR,
				(pFromFpga->data & DigDspMuxShell1DspModuloMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspModuloRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspModuloMask);
	break;

    case DigDspMuxShell1DspPhaseStepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1DspPhaseStepR,
				(pFromFpga->data & DigDspMuxShell1DspPhaseStepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspPhaseStepRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspPhaseStepMask);
	break;

    case DigDspMuxShell1DspPiezoPiezoDcRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1DspPiezoPiezoDcR,
				(pFromFpga->data & DigDspMuxShell1DspPiezoPiezoDcMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspPiezoPiezoDcRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspPiezoPiezoDcMask);
	break;

    case DigDspMuxShell1DspTagRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1DspTagR,
				(pFromFpga->data & DigDspMuxShell1DspTagMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspTagRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspTagMask);
	break;

    case DigDspMuxShell1DspUseFiberIqRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1DspUseFiberIqR,
				(pFromFpga->data & DigDspMuxShell1DspUseFiberIqMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspUseFiberIqRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspUseFiberIqMask);
	break;

    case DigDspMuxShell1DspWaveSampPerRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1DspWaveSampPerR,
				(pFromFpga->data & DigDspMuxShell1DspWaveSampPerMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspWaveSampPerRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspWaveSampPerMask);
	break;

    case DigDspMuxShell1DspWaveShiftRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspMuxShell1DspWaveShiftR,
				(pFromFpga->data & DigDspMuxShell1DspWaveShiftMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspWaveShiftRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspWaveShiftMask);
	break;

    case DigDspRewindRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspRewindR,
				(pFromFpga->data & DigDspRewindMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRewindRString,
				(unsigned ) pFromFpga->data & DigDspRewindMask);
	break;

    case DigDspSsaStimAmpstepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspSsaStimAmpstepR,
				(pFromFpga->data & DigDspSsaStimAmpstepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimAmpstepRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimAmpstepMask);
	break;

    case DigDspSsaStimEnRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspSsaStimEnR,
				(pFromFpga->data & DigDspSsaStimEnMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimEnRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimEnMask);
	break;

    case DigDspSsaStimGPeriodRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspSsaStimGPeriodR,
				(pFromFpga->data & DigDspSsaStimGPeriodMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimGPeriodRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimGPeriodMask);
	break;

    case DigDspSsaStimPertstepRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspSsaStimPertstepR,
				(pFromFpga->data & DigDspSsaStimPertstepMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimPertstepRString,
				(unsigned ) pFromFpga->data & DigDspSsaStimPertstepMask);
	break;

    case DigDspTraceKeepRAdr|flagReadMask:

		status = (asynStatus) setUIntDigitalParam(p_DigDspTraceKeepR,
				(pFromFpga->data & DigDspTraceKeepMask) , DigDspTraceKeepMask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepRString,
				(unsigned ) pFromFpga->data & DigDspTraceKeepMask);
	break;

    case DigDspTraceResetWeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspTraceResetWeR,
				(pFromFpga->data & DigDspTraceResetWeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceResetWeRString,
				(unsigned ) pFromFpga->data & DigDspTraceResetWeMask);
	break;

    case DigDspTrigInternalRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspTrigInternalR,
				(pFromFpga->data & DigDspTrigInternalMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigInternalRString,
				(unsigned ) pFromFpga->data & DigDspTrigInternalMask);
	break;

    case DigDspTrigModeRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspTrigModeR,
				(pFromFpga->data & DigDspTrigModeMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigModeRString,
				(unsigned ) pFromFpga->data & DigDspTrigModeMask);
	break;

    case DigDspWave0SrcRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspWave0SrcR,
				(pFromFpga->data & DigDspWave0SrcMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWave0SrcRString,
				(unsigned ) pFromFpga->data & DigDspWave0SrcMask);
	break;

    case DigDspWave1SrcRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DigDspWave1SrcR,
				(pFromFpga->data & DigDspWave1SrcMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWave1SrcRString,
				(unsigned ) pFromFpga->data & DigDspWave1SrcMask);
	break;

    case DomainJumpRealignRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_DomainJumpRealignR,
				(pFromFpga->data & DomainJumpRealignMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignRString,
				(unsigned ) pFromFpga->data & DomainJumpRealignMask);
	break;

    case IccCfgRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_IccCfgR,
				(pFromFpga->data & IccCfgMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgRString,
				(unsigned ) pFromFpga->data & IccCfgMask);
	break;

    case QsfpI2CRegRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_QsfpI2CRegR,
				(pFromFpga->data & QsfpI2CRegMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegRString,
				(unsigned ) pFromFpga->data & QsfpI2CRegMask);
	break;

    case SfpAddressSetRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_SfpAddressSetR,
				(pFromFpga->data & SfpAddressSetMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetRString,
				(unsigned ) pFromFpga->data & SfpAddressSetMask);
	break;

    case TagNowRAdr|flagReadMask:

		status = (asynStatus) setIntegerParam(p_TagNowR,
				(pFromFpga->data & TagNowMask) );
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowRString,
				(unsigned ) pFromFpga->data & TagNowMask);
		break;

	default:
		// Arrays larger than 16 elements should be handled in a subclass, generally more complicated
		if ((pFromFpga->addr >= (IdelayBaseRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((IdelayBaseRAdr|flagReadMask) + 16)))
		{
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (IdelayBaseRAdr|flagReadMask)),
				p_IdelayBaseR,
				(pFromFpga->data & IdelayBaseMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IdelayBaseRString,
				(unsigned ) pFromFpga->data & IdelayBaseMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0DspPiezoSfConstsRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0DspPiezoSfConstsRAdr|flagReadMask) + 8)))
		{
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0DspPiezoSfConstsRAdr|flagReadMask)),
				p_DigDspMuxShell0DspPiezoSfConstsR,
				(pFromFpga->data & DigDspMuxShell0DspPiezoSfConstsMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspPiezoSfConstsRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspPiezoSfConstsMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1DspPiezoSfConstsRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1DspPiezoSfConstsRAdr|flagReadMask) + 8)))
		{
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1DspPiezoSfConstsRAdr|flagReadMask)),
				p_DigDspMuxShell1DspPiezoSfConstsR,
				(pFromFpga->data & DigDspMuxShell1DspPiezoSfConstsMask));
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspPiezoSfConstsRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspPiezoSfConstsMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0FdbkCoreMpProcCoeffRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0FdbkCoreMpProcCoeffRAdr|flagReadMask) + 4)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell0FdbkCoreMpProcCoeffMask + 1 ) >> 1))? ~DigDspMuxShell0FdbkCoreMpProcCoeffMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0FdbkCoreMpProcCoeffRAdr|flagReadMask)),
				p_DigDspMuxShell0FdbkCoreMpProcCoeffR,
				(pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcCoeffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcCoeffRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcCoeffMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0FdbkCoreMpProcLimRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0FdbkCoreMpProcLimRAdr|flagReadMask) + 4)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell0FdbkCoreMpProcLimMask + 1 ) >> 1))? ~DigDspMuxShell0FdbkCoreMpProcLimMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0FdbkCoreMpProcLimRAdr|flagReadMask)),
				p_DigDspMuxShell0FdbkCoreMpProcLimR,
				(pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcLimMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcLimRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcLimMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0FdbkCoreMpProcSetmpRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0FdbkCoreMpProcSetmpRAdr|flagReadMask) + 4)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell0FdbkCoreMpProcSetmpMask + 1 ) >> 1))? ~DigDspMuxShell0FdbkCoreMpProcSetmpMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0FdbkCoreMpProcSetmpRAdr|flagReadMask)),
				p_DigDspMuxShell0FdbkCoreMpProcSetmpR,
				(pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcSetmpRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSetmpMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1FdbkCoreMpProcCoeffRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1FdbkCoreMpProcCoeffRAdr|flagReadMask) + 4)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell1FdbkCoreMpProcCoeffMask + 1 ) >> 1))? ~DigDspMuxShell1FdbkCoreMpProcCoeffMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1FdbkCoreMpProcCoeffRAdr|flagReadMask)),
				p_DigDspMuxShell1FdbkCoreMpProcCoeffR,
				(pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcCoeffMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcCoeffRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcCoeffMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1FdbkCoreMpProcLimRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1FdbkCoreMpProcLimRAdr|flagReadMask) + 4)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell1FdbkCoreMpProcLimMask + 1 ) >> 1))? ~DigDspMuxShell1FdbkCoreMpProcLimMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1FdbkCoreMpProcLimRAdr|flagReadMask)),
				p_DigDspMuxShell1FdbkCoreMpProcLimR,
				(pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcLimMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcLimRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcLimMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1FdbkCoreMpProcSetmpRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1FdbkCoreMpProcSetmpRAdr|flagReadMask) + 4)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell1FdbkCoreMpProcSetmpMask + 1 ) >> 1))? ~DigDspMuxShell1FdbkCoreMpProcSetmpMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1FdbkCoreMpProcSetmpRAdr|flagReadMask)),
				p_DigDspMuxShell1FdbkCoreMpProcSetmpR,
				(pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSetmpMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcSetmpRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSetmpMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecDriveCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecDriveCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecDriveCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecDriveCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecDriveCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC0ElecDriveCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecDriveCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecDriveCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecDriveCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecDriveCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecDriveCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecDriveCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC0ElecDriveCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecDriveCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC0ElecDriveCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC0ElecDriveCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecDriveCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecDriveCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecM0OutCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecM0OutCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM0OutCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM0OutCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecM0OutCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC0ElecM0OutCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM0OutCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0OutCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM0OutCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM0OutCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC0ElecM0OutCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC0ElecM0OutCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC0ElecM0OutCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0OutCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM0OutCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecM1OutCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecM1OutCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM1OutCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM1OutCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecM1OutCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC0ElecM1OutCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM1OutCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1OutCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM1OutCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM1OutCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC0ElecM1OutCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC0ElecM1OutCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC0ElecM1OutCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1OutCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM1OutCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecM2OutCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecM2OutCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM2OutCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC0ElecM2OutCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecM2OutCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC0ElecM2OutCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC0ElecM2OutCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2OutCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM2OutCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC0ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC0ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC0ElecM2OutCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC0ElecM2OutCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC0ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC0ElecM2OutCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC0ElecM2OutCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2OutCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC0ElecM2OutCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecDriveCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecDriveCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecDriveCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecDriveCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecDriveCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC1ElecDriveCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecDriveCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecDriveCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecDriveCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecDriveCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecDriveCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecDriveCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC1ElecDriveCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecDriveCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC1ElecDriveCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC1ElecDriveCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecDriveCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecDriveCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecM0OutCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecM0OutCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM0OutCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM0OutCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecM0OutCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC1ElecM0OutCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM0OutCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0OutCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM0OutCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM0OutCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC1ElecM0OutCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecM0OutCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC1ElecM0OutCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC1ElecM0OutCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0OutCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM0OutCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecM1OutCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecM1OutCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM1OutCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM1OutCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecM1OutCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC1ElecM1OutCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM1OutCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1OutCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM1OutCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM1OutCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC1ElecM1OutCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecM1OutCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC1ElecM1OutCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC1ElecM1OutCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1OutCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM1OutCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecM2OutCplOutCouplingRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecM2OutCplOutCouplingRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM2OutCplOutCouplingMask + 1 ) >> 1))? ~DigDspMuxC1ElecM2OutCplOutCouplingMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecM2OutCplOutCouplingRAdr|flagReadMask)),
				p_DigDspMuxC1ElecM2OutCplOutCouplingR,
				(pFromFpga->data & DigDspMuxC1ElecM2OutCplOutCouplingMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2OutCplOutCouplingRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM2OutCplOutCouplingMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxC1ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxC1ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxC1ElecM2OutCplOutPhaseOffsetMask + 1 ) >> 1))? ~DigDspMuxC1ElecM2OutCplOutPhaseOffsetMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxC1ElecM2OutCplOutPhaseOffsetRAdr|flagReadMask)),
				p_DigDspMuxC1ElecM2OutCplOutPhaseOffsetR,
				(pFromFpga->data & DigDspMuxC1ElecM2OutCplOutPhaseOffsetMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2OutCplOutPhaseOffsetRString,
				(unsigned ) pFromFpga->data & DigDspMuxC1ElecM2OutCplOutPhaseOffsetMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0DspLpNotchLp1AKxRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0DspLpNotchLp1AKxRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell0DspLpNotchLp1AKxMask + 1 ) >> 1))? ~DigDspMuxShell0DspLpNotchLp1AKxMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0DspLpNotchLp1AKxRAdr|flagReadMask)),
				p_DigDspMuxShell0DspLpNotchLp1AKxR,
				(pFromFpga->data & DigDspMuxShell0DspLpNotchLp1AKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspLpNotchLp1AKxRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspLpNotchLp1AKxMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0DspLpNotchLp1AKyRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0DspLpNotchLp1AKyRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell0DspLpNotchLp1AKyMask + 1 ) >> 1))? ~DigDspMuxShell0DspLpNotchLp1AKyMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0DspLpNotchLp1AKyRAdr|flagReadMask)),
				p_DigDspMuxShell0DspLpNotchLp1AKyR,
				(pFromFpga->data & DigDspMuxShell0DspLpNotchLp1AKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspLpNotchLp1AKyRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspLpNotchLp1AKyMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0DspLpNotchLp1BKxRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0DspLpNotchLp1BKxRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell0DspLpNotchLp1BKxMask + 1 ) >> 1))? ~DigDspMuxShell0DspLpNotchLp1BKxMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0DspLpNotchLp1BKxRAdr|flagReadMask)),
				p_DigDspMuxShell0DspLpNotchLp1BKxR,
				(pFromFpga->data & DigDspMuxShell0DspLpNotchLp1BKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspLpNotchLp1BKxRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspLpNotchLp1BKxMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell0DspLpNotchLp1BKyRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell0DspLpNotchLp1BKyRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell0DspLpNotchLp1BKyMask + 1 ) >> 1))? ~DigDspMuxShell0DspLpNotchLp1BKyMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell0DspLpNotchLp1BKyRAdr|flagReadMask)),
				p_DigDspMuxShell0DspLpNotchLp1BKyR,
				(pFromFpga->data & DigDspMuxShell0DspLpNotchLp1BKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspLpNotchLp1BKyRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspLpNotchLp1BKyMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1DspLpNotchLp1AKxRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1DspLpNotchLp1AKxRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell1DspLpNotchLp1AKxMask + 1 ) >> 1))? ~DigDspMuxShell1DspLpNotchLp1AKxMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1DspLpNotchLp1AKxRAdr|flagReadMask)),
				p_DigDspMuxShell1DspLpNotchLp1AKxR,
				(pFromFpga->data & DigDspMuxShell1DspLpNotchLp1AKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspLpNotchLp1AKxRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspLpNotchLp1AKxMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1DspLpNotchLp1AKyRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1DspLpNotchLp1AKyRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell1DspLpNotchLp1AKyMask + 1 ) >> 1))? ~DigDspMuxShell1DspLpNotchLp1AKyMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1DspLpNotchLp1AKyRAdr|flagReadMask)),
				p_DigDspMuxShell1DspLpNotchLp1AKyR,
				(pFromFpga->data & DigDspMuxShell1DspLpNotchLp1AKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspLpNotchLp1AKyRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspLpNotchLp1AKyMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1DspLpNotchLp1BKxRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1DspLpNotchLp1BKxRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell1DspLpNotchLp1BKxMask + 1 ) >> 1))? ~DigDspMuxShell1DspLpNotchLp1BKxMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1DspLpNotchLp1BKxRAdr|flagReadMask)),
				p_DigDspMuxShell1DspLpNotchLp1BKxR,
				(pFromFpga->data & DigDspMuxShell1DspLpNotchLp1BKxMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspLpNotchLp1BKxRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspLpNotchLp1BKxMask);
		}
		else
		if ((pFromFpga->addr >= (DigDspMuxShell1DspLpNotchLp1BKyRAdr|flagReadMask)) &&
				(pFromFpga->addr < ((DigDspMuxShell1DspLpNotchLp1BKyRAdr|flagReadMask) + 2)))
		{
		signExtBits = (pFromFpga->data & ((DigDspMuxShell1DspLpNotchLp1BKyMask + 1 ) >> 1))? ~DigDspMuxShell1DspLpNotchLp1BKyMask : 0;
		status = (asynStatus) setIntegerParam((pFromFpga->addr - (DigDspMuxShell1DspLpNotchLp1BKyRAdr|flagReadMask)),
				p_DigDspMuxShell1DspLpNotchLp1BKyR,
				(pFromFpga->data & DigDspMuxShell1DspLpNotchLp1BKyMask) | signExtBits);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspLpNotchLp1BKyRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspLpNotchLp1BKyMask);
		}
		else
		{
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		status = asynError;
		break;
    }

    return status;
}


/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCDriver::processRegWriteResponse(const FpgaReg *pFromFpga)
{
	asynStatus status = asynSuccess;
	epicsInt32 valueSet[maxMsgSize/sizeof(FpgaReg)]; // Put the value sent to the FPGA here for comparison
	epicsUInt32 uValueSet[maxMsgSize/sizeof(FpgaReg)];
	epicsInt32 errorCount;
//  variables that may be useful for checking array data
//	asynUser *pAsynArrayUser;
//	unsigned int i;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case AdcMmcmWAdr:
		status = (asynStatus) getIntegerParam(p_AdcMmcmW, valueSet );
		if( (valueSet[0] & AdcMmcmMask) == (pFromFpga->data & AdcMmcmMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmWString, (unsigned ) pFromFpga->data & AdcMmcmMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				AdcMmcmWString, valueSet[0] & AdcMmcmMask, (unsigned ) pFromFpga->data & AdcMmcmMask);
			status = asynError;
			setParamStatus(p_AdcMmcmW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU15SpiDataAddrRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU15SpiDataAddrRW, valueSet );
		if( (valueSet[0] & DigConfigU15SpiDataAddrRMask) == (pFromFpga->data & DigConfigU15SpiDataAddrRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU15SpiDataAddrRWString, (unsigned ) pFromFpga->data & DigConfigU15SpiDataAddrRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU15SpiDataAddrRWString, valueSet[0] & DigConfigU15SpiDataAddrRMask, (unsigned ) pFromFpga->data & DigConfigU15SpiDataAddrRMask);
			status = asynError;
			setParamStatus(p_DigConfigU15SpiDataAddrRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU15SpiReadAndStartRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU15SpiReadAndStartRW, valueSet );
		if( (valueSet[0] & DigConfigU15SpiReadAndStartRMask) == (pFromFpga->data & DigConfigU15SpiReadAndStartRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU15SpiReadAndStartRWString, (unsigned ) pFromFpga->data & DigConfigU15SpiReadAndStartRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU15SpiReadAndStartRWString, valueSet[0] & DigConfigU15SpiReadAndStartRMask, (unsigned ) pFromFpga->data & DigConfigU15SpiReadAndStartRMask);
			status = asynError;
			setParamStatus(p_DigConfigU15SpiReadAndStartRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU18SpiDataAddrRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU18SpiDataAddrRW, valueSet );
		if( (valueSet[0] & DigConfigU18SpiDataAddrRMask) == (pFromFpga->data & DigConfigU18SpiDataAddrRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU18SpiDataAddrRWString, (unsigned ) pFromFpga->data & DigConfigU18SpiDataAddrRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU18SpiDataAddrRWString, valueSet[0] & DigConfigU18SpiDataAddrRMask, (unsigned ) pFromFpga->data & DigConfigU18SpiDataAddrRMask);
			status = asynError;
			setParamStatus(p_DigConfigU18SpiDataAddrRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU18SpiReadAndStartRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU18SpiReadAndStartRW, valueSet );
		if( (valueSet[0] & DigConfigU18SpiReadAndStartRMask) == (pFromFpga->data & DigConfigU18SpiReadAndStartRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU18SpiReadAndStartRWString, (unsigned ) pFromFpga->data & DigConfigU18SpiReadAndStartRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU18SpiReadAndStartRWString, valueSet[0] & DigConfigU18SpiReadAndStartRMask, (unsigned ) pFromFpga->data & DigConfigU18SpiReadAndStartRMask);
			status = asynError;
			setParamStatus(p_DigConfigU18SpiReadAndStartRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU2ClkResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU2ClkResetRW, valueSet );
		if( (valueSet[0] & DigConfigU2ClkResetRMask) == (pFromFpga->data & DigConfigU2ClkResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU2ClkResetRWString, (unsigned ) pFromFpga->data & DigConfigU2ClkResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU2ClkResetRWString, valueSet[0] & DigConfigU2ClkResetRMask, (unsigned ) pFromFpga->data & DigConfigU2ClkResetRMask);
			status = asynError;
			setParamStatus(p_DigConfigU2ClkResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU2IserdesResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU2IserdesResetRW, valueSet );
		if( (valueSet[0] & DigConfigU2IserdesResetRMask) == (pFromFpga->data & DigConfigU2IserdesResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU2IserdesResetRWString, (unsigned ) pFromFpga->data & DigConfigU2IserdesResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU2IserdesResetRWString, valueSet[0] & DigConfigU2IserdesResetRMask, (unsigned ) pFromFpga->data & DigConfigU2IserdesResetRMask);
			status = asynError;
			setParamStatus(p_DigConfigU2IserdesResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU3ClkResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU3ClkResetRW, valueSet );
		if( (valueSet[0] & DigConfigU3ClkResetRMask) == (pFromFpga->data & DigConfigU3ClkResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU3ClkResetRWString, (unsigned ) pFromFpga->data & DigConfigU3ClkResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU3ClkResetRWString, valueSet[0] & DigConfigU3ClkResetRMask, (unsigned ) pFromFpga->data & DigConfigU3ClkResetRMask);
			status = asynError;
			setParamStatus(p_DigConfigU3ClkResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU3IserdesResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU3IserdesResetRW, valueSet );
		if( (valueSet[0] & DigConfigU3IserdesResetRMask) == (pFromFpga->data & DigConfigU3IserdesResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU3IserdesResetRWString, (unsigned ) pFromFpga->data & DigConfigU3IserdesResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU3IserdesResetRWString, valueSet[0] & DigConfigU3IserdesResetRMask, (unsigned ) pFromFpga->data & DigConfigU3IserdesResetRMask);
			status = asynError;
			setParamStatus(p_DigConfigU3IserdesResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigU4ResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigU4ResetRW, valueSet );
		if( (valueSet[0] & DigConfigU4ResetRMask) == (pFromFpga->data & DigConfigU4ResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU4ResetRWString, (unsigned ) pFromFpga->data & DigConfigU4ResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigU4ResetRWString, valueSet[0] & DigConfigU4ResetRMask, (unsigned ) pFromFpga->data & DigConfigU4ResetRMask);
			status = asynError;
			setParamStatus(p_DigConfigU4ResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigBanyanMaskWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigBanyanMaskW, valueSet );
		if( (valueSet[0] & DigConfigBanyanMaskMask) == (pFromFpga->data & DigConfigBanyanMaskMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigBanyanMaskWString, (unsigned ) pFromFpga->data & DigConfigBanyanMaskMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigBanyanMaskWString, valueSet[0] & DigConfigBanyanMaskMask, (unsigned ) pFromFpga->data & DigConfigBanyanMaskMask);
			status = asynError;
			setParamStatus(p_DigConfigBanyanMaskW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigBitslipWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigBitslipW, valueSet );
		if( (valueSet[0] & DigConfigBitslipMask) == (pFromFpga->data & DigConfigBitslipMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigBitslipWString, (unsigned ) pFromFpga->data & DigConfigBitslipMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigBitslipWString, valueSet[0] & DigConfigBitslipMask, (unsigned ) pFromFpga->data & DigConfigBitslipMask);
			status = asynError;
			setParamStatus(p_DigConfigBitslipW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigClkStatusWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigClkStatusWeW, valueSet );
		if( (valueSet[0] & DigConfigClkStatusWeMask) == (pFromFpga->data & DigConfigClkStatusWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigClkStatusWeWString, (unsigned ) pFromFpga->data & DigConfigClkStatusWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigClkStatusWeWString, valueSet[0] & DigConfigClkStatusWeMask, (unsigned ) pFromFpga->data & DigConfigClkStatusWeMask);
			status = asynError;
			setParamStatus(p_DigConfigClkStatusWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigIdelayctrlResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigIdelayctrlResetRW, valueSet );
		if( (valueSet[0] & DigConfigIdelayctrlResetRMask) == (pFromFpga->data & DigConfigIdelayctrlResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigIdelayctrlResetRWString, (unsigned ) pFromFpga->data & DigConfigIdelayctrlResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigIdelayctrlResetRWString, valueSet[0] & DigConfigIdelayctrlResetRMask, (unsigned ) pFromFpga->data & DigConfigIdelayctrlResetRMask);
			status = asynError;
			setParamStatus(p_DigConfigIdelayctrlResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigLlspiWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigLlspiWeW, valueSet );
		if( (valueSet[0] & DigConfigLlspiWeMask) == (pFromFpga->data & DigConfigLlspiWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigLlspiWeWString, (unsigned ) pFromFpga->data & DigConfigLlspiWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigLlspiWeWString, valueSet[0] & DigConfigLlspiWeMask, (unsigned ) pFromFpga->data & DigConfigLlspiWeMask);
			status = asynError;
			setParamStatus(p_DigConfigLlspiWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigMmcmResetRWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigMmcmResetRW, valueSet );
		if( (valueSet[0] & DigConfigMmcmResetRMask) == (pFromFpga->data & DigConfigMmcmResetRMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigMmcmResetRWString, (unsigned ) pFromFpga->data & DigConfigMmcmResetRMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigMmcmResetRWString, valueSet[0] & DigConfigMmcmResetRMask, (unsigned ) pFromFpga->data & DigConfigMmcmResetRMask);
			status = asynError;
			setParamStatus(p_DigConfigMmcmResetRW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigPeriphConfigWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigPeriphConfigW, valueSet );
		if( (valueSet[0] & DigConfigPeriphConfigMask) == (pFromFpga->data & DigConfigPeriphConfigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigPeriphConfigWString, (unsigned ) pFromFpga->data & DigConfigPeriphConfigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigPeriphConfigWString, valueSet[0] & DigConfigPeriphConfigMask, (unsigned ) pFromFpga->data & DigConfigPeriphConfigMask);
			status = asynError;
			setParamStatus(p_DigConfigPeriphConfigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigPhasexTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigPhasexTrigW, valueSet );
		if( (valueSet[0] & DigConfigPhasexTrigMask) == (pFromFpga->data & DigConfigPhasexTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigPhasexTrigWString, (unsigned ) pFromFpga->data & DigConfigPhasexTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigPhasexTrigWString, valueSet[0] & DigConfigPhasexTrigMask, (unsigned ) pFromFpga->data & DigConfigPhasexTrigMask);
			status = asynError;
			setParamStatus(p_DigConfigPhasexTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigRawadcTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigRawadcTrigW, valueSet );
		if( (valueSet[0] & DigConfigRawadcTrigMask) == (pFromFpga->data & DigConfigRawadcTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigRawadcTrigWString, (unsigned ) pFromFpga->data & DigConfigRawadcTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigRawadcTrigWString, valueSet[0] & DigConfigRawadcTrigMask, (unsigned ) pFromFpga->data & DigConfigRawadcTrigMask);
			status = asynError;
			setParamStatus(p_DigConfigRawadcTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigScanTriggerWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigScanTriggerWeW, valueSet );
		if( (valueSet[0] & DigConfigScanTriggerWeMask) == (pFromFpga->data & DigConfigScanTriggerWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigScanTriggerWeWString, (unsigned ) pFromFpga->data & DigConfigScanTriggerWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigScanTriggerWeWString, valueSet[0] & DigConfigScanTriggerWeMask, (unsigned ) pFromFpga->data & DigConfigScanTriggerWeMask);
			status = asynError;
			setParamStatus(p_DigConfigScanTriggerWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigScannerDebugWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigScannerDebugW, valueSet );
		if( (valueSet[0] & DigConfigScannerDebugMask) == (pFromFpga->data & DigConfigScannerDebugMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigScannerDebugWString, (unsigned ) pFromFpga->data & DigConfigScannerDebugMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigScannerDebugWString, valueSet[0] & DigConfigScannerDebugMask, (unsigned ) pFromFpga->data & DigConfigScannerDebugMask);
			status = asynError;
			setParamStatus(p_DigConfigScannerDebugW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigSyncAd7794CsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigSyncAd7794CsetW, valueSet );
		if( (valueSet[0] & DigConfigSyncAd7794CsetMask) == (pFromFpga->data & DigConfigSyncAd7794CsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigSyncAd7794CsetWString, (unsigned ) pFromFpga->data & DigConfigSyncAd7794CsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigSyncAd7794CsetWString, valueSet[0] & DigConfigSyncAd7794CsetMask, (unsigned ) pFromFpga->data & DigConfigSyncAd7794CsetMask);
			status = asynError;
			setParamStatus(p_DigConfigSyncAd7794CsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigConfigSyncTps62210CsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigConfigSyncTps62210CsetW, valueSet );
		if( (valueSet[0] & DigConfigSyncTps62210CsetMask) == (pFromFpga->data & DigConfigSyncTps62210CsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigSyncTps62210CsetWString, (unsigned ) pFromFpga->data & DigConfigSyncTps62210CsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigConfigSyncTps62210CsetWString, valueSet[0] & DigConfigSyncTps62210CsetMask, (unsigned ) pFromFpga->data & DigConfigSyncTps62210CsetMask);
			status = asynError;
			setParamStatus(p_DigConfigSyncTps62210CsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAdcTestModeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAdcTestModeW, valueSet );
		if( (valueSet[0] & DigDspAdcTestModeMask) == (pFromFpga->data & DigDspAdcTestModeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestModeWString, (unsigned ) pFromFpga->data & DigDspAdcTestModeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestModeWString, valueSet[0] & DigDspAdcTestModeMask, (unsigned ) pFromFpga->data & DigDspAdcTestModeMask);
			status = asynError;
			setParamStatus(p_DigDspAdcTestModeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAdcTestResetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAdcTestResetW, valueSet );
		if( (valueSet[0] & DigDspAdcTestResetMask) == (pFromFpga->data & DigDspAdcTestResetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestResetWString, (unsigned ) pFromFpga->data & DigDspAdcTestResetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAdcTestResetWString, valueSet[0] & DigDspAdcTestResetMask, (unsigned ) pFromFpga->data & DigDspAdcTestResetMask);
			status = asynError;
			setParamStatus(p_DigDspAdcTestResetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAmplitudeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAmplitudeW, valueSet );
		if( (valueSet[0] & DigDspAmplitudeMask) == (pFromFpga->data & DigDspAmplitudeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAmplitudeWString, (unsigned ) pFromFpga->data & DigDspAmplitudeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAmplitudeWString, valueSet[0] & DigDspAmplitudeMask, (unsigned ) pFromFpga->data & DigDspAmplitudeMask);
			status = asynError;
			setParamStatus(p_DigDspAmplitudeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspAverageLenWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspAverageLenW, valueSet );
		if( (valueSet[0] & DigDspAverageLenMask) == (pFromFpga->data & DigDspAverageLenMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAverageLenWString, (unsigned ) pFromFpga->data & DigDspAverageLenMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspAverageLenWString, valueSet[0] & DigDspAverageLenMask, (unsigned ) pFromFpga->data & DigDspAverageLenMask);
			status = asynError;
			setParamStatus(p_DigDspAverageLenW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspBufTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspBufTrigW, valueSet );
		if( (valueSet[0] & DigDspBufTrigMask) == (pFromFpga->data & DigDspBufTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspBufTrigWString, (unsigned ) pFromFpga->data & DigDspBufTrigMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspBufTrigWString, valueSet[0] & DigDspBufTrigMask, (unsigned ) pFromFpga->data & DigDspBufTrigMask);
			status = asynError;
			setParamStatus(p_DigDspBufTrigW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspCicPeriodWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspCicPeriodW, valueSet );
		if( (valueSet[0] & DigDspCicPeriodMask) == (pFromFpga->data & DigDspCicPeriodMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicPeriodWString, (unsigned ) pFromFpga->data & DigDspCicPeriodMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicPeriodWString, valueSet[0] & DigDspCicPeriodMask, (unsigned ) pFromFpga->data & DigDspCicPeriodMask);
			status = asynError;
			setParamStatus(p_DigDspCicPeriodW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspCicShiftWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspCicShiftW, valueSet );
		if( (valueSet[0] & DigDspCicShiftMask) == (pFromFpga->data & DigDspCicShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicShiftWString, (unsigned ) pFromFpga->data & DigDspCicShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCicShiftWString, valueSet[0] & DigDspCicShiftMask, (unsigned ) pFromFpga->data & DigDspCicShiftMask);
			status = asynError;
			setParamStatus(p_DigDspCicShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspCircleBufFlipWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspCircleBufFlipW, valueSet );
		if( (valueSet[0] & DigDspCircleBufFlipMask) == (pFromFpga->data & DigDspCircleBufFlipMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipWString, (unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipWString, valueSet[0] & DigDspCircleBufFlipMask, (unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
			status = asynError;
			setParamStatus(p_DigDspCircleBufFlipW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDacDdsResetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDacDdsResetW, valueSet );
		if( (valueSet[0] & DigDspDacDdsResetMask) == (pFromFpga->data & DigDspDacDdsResetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacDdsResetWString, (unsigned ) pFromFpga->data & DigDspDacDdsResetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacDdsResetWString, valueSet[0] & DigDspDacDdsResetMask, (unsigned ) pFromFpga->data & DigDspDacDdsResetMask);
			status = asynError;
			setParamStatus(p_DigDspDacDdsResetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDacModeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDacModeW, valueSet );
		if( (valueSet[0] & DigDspDacModeMask) == (pFromFpga->data & DigDspDacModeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacModeWString, (unsigned ) pFromFpga->data & DigDspDacModeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDacModeWString, valueSet[0] & DigDspDacModeMask, (unsigned ) pFromFpga->data & DigDspDacModeMask);
			status = asynError;
			setParamStatus(p_DigDspDacModeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDdsaModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDdsaModuloW, valueSet );
		if( (valueSet[0] & DigDspDdsaModuloMask) == (pFromFpga->data & DigDspDdsaModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaModuloWString, (unsigned ) pFromFpga->data & DigDspDdsaModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaModuloWString, valueSet[0] & DigDspDdsaModuloMask, (unsigned ) pFromFpga->data & DigDspDdsaModuloMask);
			status = asynError;
			setParamStatus(p_DigDspDdsaModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDdsaPhstepHWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDdsaPhstepHW, valueSet );
		if( (valueSet[0] & DigDspDdsaPhstepHMask) == (pFromFpga->data & DigDspDdsaPhstepHMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepHWString, (unsigned ) pFromFpga->data & DigDspDdsaPhstepHMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepHWString, valueSet[0] & DigDspDdsaPhstepHMask, (unsigned ) pFromFpga->data & DigDspDdsaPhstepHMask);
			status = asynError;
			setParamStatus(p_DigDspDdsaPhstepHW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspDdsaPhstepLWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspDdsaPhstepLW, valueSet );
		if( (valueSet[0] & DigDspDdsaPhstepLMask) == (pFromFpga->data & DigDspDdsaPhstepLMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepLWString, (unsigned ) pFromFpga->data & DigDspDdsaPhstepLMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspDdsaPhstepLWString, valueSet[0] & DigDspDdsaPhstepLMask, (unsigned ) pFromFpga->data & DigDspDdsaPhstepLMask);
			status = asynError;
			setParamStatus(p_DigDspDdsaPhstepLW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspHistCountWStrobeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspHistCountWStrobeW, valueSet );
		if( (valueSet[0] & DigDspHistCountWStrobeMask) == (pFromFpga->data & DigDspHistCountWStrobeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspHistCountWStrobeWString, (unsigned ) pFromFpga->data & DigDspHistCountWStrobeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspHistCountWStrobeWString, valueSet[0] & DigDspHistCountWStrobeMask, (unsigned ) pFromFpga->data & DigDspHistCountWStrobeMask);
			status = asynError;
			setParamStatus(p_DigDspHistCountWStrobeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspLlrfDspDacEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspLlrfDspDacEnW, valueSet );
		if( (valueSet[0] & DigDspLlrfDspDacEnMask) == (pFromFpga->data & DigDspLlrfDspDacEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLlrfDspDacEnWString, (unsigned ) pFromFpga->data & DigDspLlrfDspDacEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLlrfDspDacEnWString, valueSet[0] & DigDspLlrfDspDacEnMask, (unsigned ) pFromFpga->data & DigDspLlrfDspDacEnMask);
			status = asynError;
			setParamStatus(p_DigDspLlrfDspDacEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspLoAmpWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspLoAmpW, valueSet );
		if( (valueSet[0] & DigDspLoAmpMask) == (pFromFpga->data & DigDspLoAmpMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLoAmpWString, (unsigned ) pFromFpga->data & DigDspLoAmpMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspLoAmpWString, valueSet[0] & DigDspLoAmpMask, (unsigned ) pFromFpga->data & DigDspLoAmpMask);
			status = asynError;
			setParamStatus(p_DigDspLoAmpW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspModuloW, valueSet );
		if( (valueSet[0] & DigDspModuloMask) == (pFromFpga->data & DigDspModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspModuloWString, (unsigned ) pFromFpga->data & DigDspModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspModuloWString, valueSet[0] & DigDspModuloMask, (unsigned ) pFromFpga->data & DigDspModuloMask);
			status = asynError;
			setParamStatus(p_DigDspModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPhaseStepHWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPhaseStepHW, valueSet );
		if( (valueSet[0] & DigDspPhaseStepHMask) == (pFromFpga->data & DigDspPhaseStepHMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhaseStepHWString, (unsigned ) pFromFpga->data & DigDspPhaseStepHMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhaseStepHWString, valueSet[0] & DigDspPhaseStepHMask, (unsigned ) pFromFpga->data & DigDspPhaseStepHMask);
			status = asynError;
			setParamStatus(p_DigDspPhaseStepHW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPhaseStepLWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPhaseStepLW, valueSet );
		if( (valueSet[0] & DigDspPhaseStepLMask) == (pFromFpga->data & DigDspPhaseStepLMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhaseStepLWString, (unsigned ) pFromFpga->data & DigDspPhaseStepLMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPhaseStepLWString, valueSet[0] & DigDspPhaseStepLMask, (unsigned ) pFromFpga->data & DigDspPhaseStepLMask);
			status = asynError;
			setParamStatus(p_DigDspPhaseStepLW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPrcDspCavSelWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPrcDspCavSelW, valueSet );
		if( (valueSet[0] & DigDspPrcDspCavSelMask) == (pFromFpga->data & DigDspPrcDspCavSelMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspCavSelWString, (unsigned ) pFromFpga->data & DigDspPrcDspCavSelMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspCavSelWString, valueSet[0] & DigDspPrcDspCavSelMask, (unsigned ) pFromFpga->data & DigDspPrcDspCavSelMask);
			status = asynError;
			setParamStatus(p_DigDspPrcDspCavSelW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPrcDspPrlCfgWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPrcDspPrlCfgW, valueSet );
		if( (valueSet[0] & DigDspPrcDspPrlCfgMask) == (pFromFpga->data & DigDspPrcDspPrlCfgMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlCfgWString, (unsigned ) pFromFpga->data & DigDspPrcDspPrlCfgMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlCfgWString, valueSet[0] & DigDspPrcDspPrlCfgMask, (unsigned ) pFromFpga->data & DigDspPrcDspPrlCfgMask);
			status = asynError;
			setParamStatus(p_DigDspPrcDspPrlCfgW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspPrcDspPrlGainWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspPrcDspPrlGainW, valueSet );
		if( (valueSet[0] & DigDspPrcDspPrlGainMask) == (pFromFpga->data & DigDspPrcDspPrlGainMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlGainWString, (unsigned ) pFromFpga->data & DigDspPrcDspPrlGainMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspPrcDspPrlGainWString, valueSet[0] & DigDspPrcDspPrlGainMask, (unsigned ) pFromFpga->data & DigDspPrcDspPrlGainMask);
			status = asynError;
			setParamStatus(p_DigDspPrcDspPrlGainW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxBeam0ModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxBeam0ModuloW, valueSet );
		if( (valueSet[0] & DigDspMuxBeam0ModuloMask) == (pFromFpga->data & DigDspMuxBeam0ModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0ModuloWString, (unsigned ) pFromFpga->data & DigDspMuxBeam0ModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0ModuloWString, valueSet[0] & DigDspMuxBeam0ModuloMask, (unsigned ) pFromFpga->data & DigDspMuxBeam0ModuloMask);
			status = asynError;
			setParamStatus(p_DigDspMuxBeam0ModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxBeam0PhaseInitWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxBeam0PhaseInitW, valueSet );
		if( (valueSet[0] & DigDspMuxBeam0PhaseInitMask) == (pFromFpga->data & DigDspMuxBeam0PhaseInitMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0PhaseInitWString, (unsigned ) pFromFpga->data & DigDspMuxBeam0PhaseInitMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0PhaseInitWString, valueSet[0] & DigDspMuxBeam0PhaseInitMask, (unsigned ) pFromFpga->data & DigDspMuxBeam0PhaseInitMask);
			status = asynError;
			setParamStatus(p_DigDspMuxBeam0PhaseInitW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxBeam0PhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxBeam0PhaseStepW, valueSet );
		if( (valueSet[0] & DigDspMuxBeam0PhaseStepMask) == (pFromFpga->data & DigDspMuxBeam0PhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0PhaseStepWString, (unsigned ) pFromFpga->data & DigDspMuxBeam0PhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam0PhaseStepWString, valueSet[0] & DigDspMuxBeam0PhaseStepMask, (unsigned ) pFromFpga->data & DigDspMuxBeam0PhaseStepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxBeam0PhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxBeam1ModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxBeam1ModuloW, valueSet );
		if( (valueSet[0] & DigDspMuxBeam1ModuloMask) == (pFromFpga->data & DigDspMuxBeam1ModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1ModuloWString, (unsigned ) pFromFpga->data & DigDspMuxBeam1ModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1ModuloWString, valueSet[0] & DigDspMuxBeam1ModuloMask, (unsigned ) pFromFpga->data & DigDspMuxBeam1ModuloMask);
			status = asynError;
			setParamStatus(p_DigDspMuxBeam1ModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxBeam1PhaseInitWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxBeam1PhaseInitW, valueSet );
		if( (valueSet[0] & DigDspMuxBeam1PhaseInitMask) == (pFromFpga->data & DigDspMuxBeam1PhaseInitMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1PhaseInitWString, (unsigned ) pFromFpga->data & DigDspMuxBeam1PhaseInitMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1PhaseInitWString, valueSet[0] & DigDspMuxBeam1PhaseInitMask, (unsigned ) pFromFpga->data & DigDspMuxBeam1PhaseInitMask);
			status = asynError;
			setParamStatus(p_DigDspMuxBeam1PhaseInitW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxBeam1PhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxBeam1PhaseStepW, valueSet );
		if( (valueSet[0] & DigDspMuxBeam1PhaseStepMask) == (pFromFpga->data & DigDspMuxBeam1PhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1PhaseStepWString, (unsigned ) pFromFpga->data & DigDspMuxBeam1PhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxBeam1PhaseStepWString, valueSet[0] & DigDspMuxBeam1PhaseStepMask, (unsigned ) pFromFpga->data & DigDspMuxBeam1PhaseStepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxBeam1PhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxCav4MechPrngIvaWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxCav4MechPrngIvaW, valueSet );
		if( (valueSet[0] & DigDspMuxCav4MechPrngIvaMask) == (pFromFpga->data & DigDspMuxCav4MechPrngIvaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngIvaWString, (unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngIvaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngIvaWString, valueSet[0] & DigDspMuxCav4MechPrngIvaMask, (unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngIvaMask);
			status = asynError;
			setParamStatus(p_DigDspMuxCav4MechPrngIvaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxCav4MechPrngIvbWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxCav4MechPrngIvbW, valueSet );
		if( (valueSet[0] & DigDspMuxCav4MechPrngIvbMask) == (pFromFpga->data & DigDspMuxCav4MechPrngIvbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngIvbWString, (unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngIvbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngIvbWString, valueSet[0] & DigDspMuxCav4MechPrngIvbMask, (unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngIvbMask);
			status = asynError;
			setParamStatus(p_DigDspMuxCav4MechPrngIvbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxCav4MechPrngRandomRunWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxCav4MechPrngRandomRunW, valueSet );
		if( (valueSet[0] & DigDspMuxCav4MechPrngRandomRunMask) == (pFromFpga->data & DigDspMuxCav4MechPrngRandomRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngRandomRunWString, (unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngRandomRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxCav4MechPrngRandomRunWString, valueSet[0] & DigDspMuxCav4MechPrngRandomRunMask, (unsigned ) pFromFpga->data & DigDspMuxCav4MechPrngRandomRunMask);
			status = asynError;
			setParamStatus(p_DigDspMuxCav4MechPrngRandomRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ACavOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ACavOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ACavOffsetMask) == (pFromFpga->data & DigDspMuxC0ACavOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ACavOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxC0ACavOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ACavOffsetWString, valueSet[0] & DigDspMuxC0ACavOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxC0ACavOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ACavOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0AForOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0AForOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxC0AForOffsetMask) == (pFromFpga->data & DigDspMuxC0AForOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0AForOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxC0AForOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0AForOffsetWString, valueSet[0] & DigDspMuxC0AForOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxC0AForOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0AForOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ARflOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ARflOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ARflOffsetMask) == (pFromFpga->data & DigDspMuxC0ARflOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ARflOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxC0ARflOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ARflOffsetWString, valueSet[0] & DigDspMuxC0ARflOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxC0ARflOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ARflOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0AmpLpBwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0AmpLpBwW, valueSet );
		if( (valueSet[0] & DigDspMuxC0AmpLpBwMask) == (pFromFpga->data & DigDspMuxC0AmpLpBwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0AmpLpBwWString, (unsigned ) pFromFpga->data & DigDspMuxC0AmpLpBwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0AmpLpBwWString, valueSet[0] & DigDspMuxC0AmpLpBwMask, (unsigned ) pFromFpga->data & DigDspMuxC0AmpLpBwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0AmpLpBwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecFreq0CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecFreq0CoarseFreqW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecFreq0CoarseFreqMask) == (pFromFpga->data & DigDspMuxC0ElecFreq0CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq0CoarseFreqWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq0CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq0CoarseFreqWString, valueSet[0] & DigDspMuxC0ElecFreq0CoarseFreqMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq0CoarseFreqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecFreq0CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecFreq1CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecFreq1CoarseFreqW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecFreq1CoarseFreqMask) == (pFromFpga->data & DigDspMuxC0ElecFreq1CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq1CoarseFreqWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq1CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq1CoarseFreqWString, valueSet[0] & DigDspMuxC0ElecFreq1CoarseFreqMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq1CoarseFreqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecFreq1CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecFreq2CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecFreq2CoarseFreqW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecFreq2CoarseFreqMask) == (pFromFpga->data & DigDspMuxC0ElecFreq2CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq2CoarseFreqWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq2CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecFreq2CoarseFreqWString, valueSet[0] & DigDspMuxC0ElecFreq2CoarseFreqMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecFreq2CoarseFreqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecFreq2CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM0BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM0BeamCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM0BeamCouplingMask) == (pFromFpga->data & DigDspMuxC0ElecM0BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0BeamCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM0BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0BeamCouplingWString, valueSet[0] & DigDspMuxC0ElecM0BeamCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM0BeamCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM0BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM0BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM0BwW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM0BwMask) == (pFromFpga->data & DigDspMuxC0ElecM0BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0BwWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM0BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0BwWString, valueSet[0] & DigDspMuxC0ElecM0BwMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM0BwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM0BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM0DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM0DriveCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM0DriveCouplingMask) == (pFromFpga->data & DigDspMuxC0ElecM0DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0DriveCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM0DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM0DriveCouplingWString, valueSet[0] & DigDspMuxC0ElecM0DriveCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM0DriveCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM0DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM1BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM1BeamCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM1BeamCouplingMask) == (pFromFpga->data & DigDspMuxC0ElecM1BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1BeamCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM1BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1BeamCouplingWString, valueSet[0] & DigDspMuxC0ElecM1BeamCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM1BeamCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM1BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM1BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM1BwW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM1BwMask) == (pFromFpga->data & DigDspMuxC0ElecM1BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1BwWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM1BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1BwWString, valueSet[0] & DigDspMuxC0ElecM1BwMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM1BwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM1BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM1DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM1DriveCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM1DriveCouplingMask) == (pFromFpga->data & DigDspMuxC0ElecM1DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1DriveCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM1DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM1DriveCouplingWString, valueSet[0] & DigDspMuxC0ElecM1DriveCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM1DriveCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM1DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM2BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM2BeamCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM2BeamCouplingMask) == (pFromFpga->data & DigDspMuxC0ElecM2BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2BeamCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM2BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2BeamCouplingWString, valueSet[0] & DigDspMuxC0ElecM2BeamCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM2BeamCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM2BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM2BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM2BwW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM2BwMask) == (pFromFpga->data & DigDspMuxC0ElecM2BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2BwWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM2BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2BwWString, valueSet[0] & DigDspMuxC0ElecM2BwMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM2BwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM2BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecM2DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecM2DriveCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecM2DriveCouplingMask) == (pFromFpga->data & DigDspMuxC0ElecM2DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2DriveCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM2DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecM2DriveCouplingWString, valueSet[0] & DigDspMuxC0ElecM2DriveCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecM2DriveCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecM2DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecModuloW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecModuloMask) == (pFromFpga->data & DigDspMuxC0ElecModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecModuloWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecModuloWString, valueSet[0] & DigDspMuxC0ElecModuloMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecModuloMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ElecPhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ElecPhaseStepW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ElecPhaseStepMask) == (pFromFpga->data & DigDspMuxC0ElecPhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecPhaseStepWString, (unsigned ) pFromFpga->data & DigDspMuxC0ElecPhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ElecPhaseStepWString, valueSet[0] & DigDspMuxC0ElecPhaseStepMask, (unsigned ) pFromFpga->data & DigDspMuxC0ElecPhaseStepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ElecPhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0ComprSatCtlWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0ComprSatCtlW, valueSet );
		if( (valueSet[0] & DigDspMuxC0ComprSatCtlMask) == (pFromFpga->data & DigDspMuxC0ComprSatCtlMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ComprSatCtlWString, (unsigned ) pFromFpga->data & DigDspMuxC0ComprSatCtlMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0ComprSatCtlWString, valueSet[0] & DigDspMuxC0ComprSatCtlMask, (unsigned ) pFromFpga->data & DigDspMuxC0ComprSatCtlMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0ComprSatCtlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0PrngIvaWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0PrngIvaW, valueSet );
		if( (valueSet[0] & DigDspMuxC0PrngIvaMask) == (pFromFpga->data & DigDspMuxC0PrngIvaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngIvaWString, (unsigned ) pFromFpga->data & DigDspMuxC0PrngIvaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngIvaWString, valueSet[0] & DigDspMuxC0PrngIvaMask, (unsigned ) pFromFpga->data & DigDspMuxC0PrngIvaMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0PrngIvaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0PrngIvbWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0PrngIvbW, valueSet );
		if( (valueSet[0] & DigDspMuxC0PrngIvbMask) == (pFromFpga->data & DigDspMuxC0PrngIvbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngIvbWString, (unsigned ) pFromFpga->data & DigDspMuxC0PrngIvbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngIvbWString, valueSet[0] & DigDspMuxC0PrngIvbMask, (unsigned ) pFromFpga->data & DigDspMuxC0PrngIvbMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0PrngIvbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC0PrngRandomRunWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC0PrngRandomRunW, valueSet );
		if( (valueSet[0] & DigDspMuxC0PrngRandomRunMask) == (pFromFpga->data & DigDspMuxC0PrngRandomRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngRandomRunWString, (unsigned ) pFromFpga->data & DigDspMuxC0PrngRandomRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC0PrngRandomRunWString, valueSet[0] & DigDspMuxC0PrngRandomRunMask, (unsigned ) pFromFpga->data & DigDspMuxC0PrngRandomRunMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC0PrngRandomRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ACavOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ACavOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ACavOffsetMask) == (pFromFpga->data & DigDspMuxC1ACavOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ACavOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxC1ACavOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ACavOffsetWString, valueSet[0] & DigDspMuxC1ACavOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxC1ACavOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ACavOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1AForOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1AForOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxC1AForOffsetMask) == (pFromFpga->data & DigDspMuxC1AForOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1AForOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxC1AForOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1AForOffsetWString, valueSet[0] & DigDspMuxC1AForOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxC1AForOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1AForOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ARflOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ARflOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ARflOffsetMask) == (pFromFpga->data & DigDspMuxC1ARflOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ARflOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxC1ARflOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ARflOffsetWString, valueSet[0] & DigDspMuxC1ARflOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxC1ARflOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ARflOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1AmpLpBwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1AmpLpBwW, valueSet );
		if( (valueSet[0] & DigDspMuxC1AmpLpBwMask) == (pFromFpga->data & DigDspMuxC1AmpLpBwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1AmpLpBwWString, (unsigned ) pFromFpga->data & DigDspMuxC1AmpLpBwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1AmpLpBwWString, valueSet[0] & DigDspMuxC1AmpLpBwMask, (unsigned ) pFromFpga->data & DigDspMuxC1AmpLpBwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1AmpLpBwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecFreq0CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecFreq0CoarseFreqW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecFreq0CoarseFreqMask) == (pFromFpga->data & DigDspMuxC1ElecFreq0CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq0CoarseFreqWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq0CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq0CoarseFreqWString, valueSet[0] & DigDspMuxC1ElecFreq0CoarseFreqMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq0CoarseFreqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecFreq0CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecFreq1CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecFreq1CoarseFreqW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecFreq1CoarseFreqMask) == (pFromFpga->data & DigDspMuxC1ElecFreq1CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq1CoarseFreqWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq1CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq1CoarseFreqWString, valueSet[0] & DigDspMuxC1ElecFreq1CoarseFreqMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq1CoarseFreqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecFreq1CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecFreq2CoarseFreqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecFreq2CoarseFreqW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecFreq2CoarseFreqMask) == (pFromFpga->data & DigDspMuxC1ElecFreq2CoarseFreqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq2CoarseFreqWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq2CoarseFreqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecFreq2CoarseFreqWString, valueSet[0] & DigDspMuxC1ElecFreq2CoarseFreqMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecFreq2CoarseFreqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecFreq2CoarseFreqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM0BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM0BeamCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM0BeamCouplingMask) == (pFromFpga->data & DigDspMuxC1ElecM0BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0BeamCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM0BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0BeamCouplingWString, valueSet[0] & DigDspMuxC1ElecM0BeamCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM0BeamCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM0BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM0BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM0BwW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM0BwMask) == (pFromFpga->data & DigDspMuxC1ElecM0BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0BwWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM0BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0BwWString, valueSet[0] & DigDspMuxC1ElecM0BwMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM0BwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM0BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM0DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM0DriveCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM0DriveCouplingMask) == (pFromFpga->data & DigDspMuxC1ElecM0DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0DriveCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM0DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM0DriveCouplingWString, valueSet[0] & DigDspMuxC1ElecM0DriveCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM0DriveCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM0DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM1BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM1BeamCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM1BeamCouplingMask) == (pFromFpga->data & DigDspMuxC1ElecM1BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1BeamCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM1BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1BeamCouplingWString, valueSet[0] & DigDspMuxC1ElecM1BeamCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM1BeamCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM1BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM1BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM1BwW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM1BwMask) == (pFromFpga->data & DigDspMuxC1ElecM1BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1BwWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM1BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1BwWString, valueSet[0] & DigDspMuxC1ElecM1BwMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM1BwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM1BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM1DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM1DriveCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM1DriveCouplingMask) == (pFromFpga->data & DigDspMuxC1ElecM1DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1DriveCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM1DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM1DriveCouplingWString, valueSet[0] & DigDspMuxC1ElecM1DriveCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM1DriveCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM1DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM2BeamCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM2BeamCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM2BeamCouplingMask) == (pFromFpga->data & DigDspMuxC1ElecM2BeamCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2BeamCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM2BeamCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2BeamCouplingWString, valueSet[0] & DigDspMuxC1ElecM2BeamCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM2BeamCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM2BeamCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM2BwWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM2BwW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM2BwMask) == (pFromFpga->data & DigDspMuxC1ElecM2BwMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2BwWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM2BwMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2BwWString, valueSet[0] & DigDspMuxC1ElecM2BwMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM2BwMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM2BwW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecM2DriveCouplingWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecM2DriveCouplingW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecM2DriveCouplingMask) == (pFromFpga->data & DigDspMuxC1ElecM2DriveCouplingMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2DriveCouplingWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM2DriveCouplingMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecM2DriveCouplingWString, valueSet[0] & DigDspMuxC1ElecM2DriveCouplingMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecM2DriveCouplingMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecM2DriveCouplingW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecModuloW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecModuloMask) == (pFromFpga->data & DigDspMuxC1ElecModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecModuloWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecModuloWString, valueSet[0] & DigDspMuxC1ElecModuloMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecModuloMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ElecPhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ElecPhaseStepW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ElecPhaseStepMask) == (pFromFpga->data & DigDspMuxC1ElecPhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecPhaseStepWString, (unsigned ) pFromFpga->data & DigDspMuxC1ElecPhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ElecPhaseStepWString, valueSet[0] & DigDspMuxC1ElecPhaseStepMask, (unsigned ) pFromFpga->data & DigDspMuxC1ElecPhaseStepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ElecPhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1ComprSatCtlWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1ComprSatCtlW, valueSet );
		if( (valueSet[0] & DigDspMuxC1ComprSatCtlMask) == (pFromFpga->data & DigDspMuxC1ComprSatCtlMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ComprSatCtlWString, (unsigned ) pFromFpga->data & DigDspMuxC1ComprSatCtlMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1ComprSatCtlWString, valueSet[0] & DigDspMuxC1ComprSatCtlMask, (unsigned ) pFromFpga->data & DigDspMuxC1ComprSatCtlMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1ComprSatCtlW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1PrngIvaWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1PrngIvaW, valueSet );
		if( (valueSet[0] & DigDspMuxC1PrngIvaMask) == (pFromFpga->data & DigDspMuxC1PrngIvaMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngIvaWString, (unsigned ) pFromFpga->data & DigDspMuxC1PrngIvaMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngIvaWString, valueSet[0] & DigDspMuxC1PrngIvaMask, (unsigned ) pFromFpga->data & DigDspMuxC1PrngIvaMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1PrngIvaW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1PrngIvbWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1PrngIvbW, valueSet );
		if( (valueSet[0] & DigDspMuxC1PrngIvbMask) == (pFromFpga->data & DigDspMuxC1PrngIvbMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngIvbWString, (unsigned ) pFromFpga->data & DigDspMuxC1PrngIvbMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngIvbWString, valueSet[0] & DigDspMuxC1PrngIvbMask, (unsigned ) pFromFpga->data & DigDspMuxC1PrngIvbMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1PrngIvbW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxC1PrngRandomRunWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxC1PrngRandomRunW, valueSet );
		if( (valueSet[0] & DigDspMuxC1PrngRandomRunMask) == (pFromFpga->data & DigDspMuxC1PrngRandomRunMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngRandomRunWString, (unsigned ) pFromFpga->data & DigDspMuxC1PrngRandomRunMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxC1PrngRandomRunWString, valueSet[0] & DigDspMuxC1PrngRandomRunMask, (unsigned ) pFromFpga->data & DigDspMuxC1PrngRandomRunMask);
			status = asynError;
			setParamStatus(p_DigDspMuxC1PrngRandomRunW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxDacIqPhaseWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxDacIqPhaseW, valueSet );
		if( (valueSet[0] & DigDspMuxDacIqPhaseMask) == (pFromFpga->data & DigDspMuxDacIqPhaseMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxDacIqPhaseWString, (unsigned ) pFromFpga->data & DigDspMuxDacIqPhaseMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxDacIqPhaseWString, valueSet[0] & DigDspMuxDacIqPhaseMask, (unsigned ) pFromFpga->data & DigDspMuxDacIqPhaseMask);
			status = asynError;
			setParamStatus(p_DigDspMuxDacIqPhaseW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspChanKeepWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspMuxShell0DspChanKeepW, uValueSet , DigDspMuxShell0DspChanKeepMask);
		if( (valueSet[0] & DigDspMuxShell0DspChanKeepMask) == (pFromFpga->data & DigDspMuxShell0DspChanKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspChanKeepWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspChanKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspChanKeepWString, valueSet[0] & DigDspMuxShell0DspChanKeepMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspChanKeepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspChanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0FdbkCoreCoarseScaleWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0FdbkCoreCoarseScaleW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0FdbkCoreCoarseScaleMask) == (pFromFpga->data & DigDspMuxShell0FdbkCoreCoarseScaleMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreCoarseScaleWString, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreCoarseScaleMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreCoarseScaleWString, valueSet[0] & DigDspMuxShell0FdbkCoreCoarseScaleMask, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreCoarseScaleMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0FdbkCoreCoarseScaleW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0FdbkCoreMpProcPhOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0FdbkCoreMpProcPhOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0FdbkCoreMpProcPhOffsetMask) == (pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcPhOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcPhOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcPhOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcPhOffsetWString, valueSet[0] & DigDspMuxShell0FdbkCoreMpProcPhOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcPhOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0FdbkCoreMpProcPhOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0FdbkCoreMpProcSelEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0FdbkCoreMpProcSelEnW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0FdbkCoreMpProcSelEnMask) == (pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcSelEnWString, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcSelEnWString, valueSet[0] & DigDspMuxShell0FdbkCoreMpProcSelEnMask, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelEnMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0FdbkCoreMpProcSelEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0FdbkCoreMpProcSelThreshWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0FdbkCoreMpProcSelThreshW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0FdbkCoreMpProcSelThreshMask) == (pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelThreshMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcSelThreshWString, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelThreshMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0FdbkCoreMpProcSelThreshWString, valueSet[0] & DigDspMuxShell0FdbkCoreMpProcSelThreshMask, (unsigned ) pFromFpga->data & DigDspMuxShell0FdbkCoreMpProcSelThreshMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0FdbkCoreMpProcSelThreshW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0DspModuloW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0DspModuloMask) == (pFromFpga->data & DigDspMuxShell0DspModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspModuloWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspModuloWString, valueSet[0] & DigDspMuxShell0DspModuloMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspModuloMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspPhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0DspPhaseStepW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0DspPhaseStepMask) == (pFromFpga->data & DigDspMuxShell0DspPhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspPhaseStepWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspPhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspPhaseStepWString, valueSet[0] & DigDspMuxShell0DspPhaseStepMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspPhaseStepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspPhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspPiezoPiezoDcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0DspPiezoPiezoDcW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0DspPiezoPiezoDcMask) == (pFromFpga->data & DigDspMuxShell0DspPiezoPiezoDcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspPiezoPiezoDcWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspPiezoPiezoDcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspPiezoPiezoDcWString, valueSet[0] & DigDspMuxShell0DspPiezoPiezoDcMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspPiezoPiezoDcMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspPiezoPiezoDcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspTagWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0DspTagW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0DspTagMask) == (pFromFpga->data & DigDspMuxShell0DspTagMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspTagWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspTagMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspTagWString, valueSet[0] & DigDspMuxShell0DspTagMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspTagMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspTagW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspUseFiberIqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0DspUseFiberIqW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0DspUseFiberIqMask) == (pFromFpga->data & DigDspMuxShell0DspUseFiberIqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspUseFiberIqWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspUseFiberIqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspUseFiberIqWString, valueSet[0] & DigDspMuxShell0DspUseFiberIqMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspUseFiberIqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspUseFiberIqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspWaveSampPerWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0DspWaveSampPerW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0DspWaveSampPerMask) == (pFromFpga->data & DigDspMuxShell0DspWaveSampPerMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspWaveSampPerWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspWaveSampPerMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspWaveSampPerWString, valueSet[0] & DigDspMuxShell0DspWaveSampPerMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspWaveSampPerMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspWaveSampPerW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell0DspWaveShiftWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell0DspWaveShiftW, valueSet );
		if( (valueSet[0] & DigDspMuxShell0DspWaveShiftMask) == (pFromFpga->data & DigDspMuxShell0DspWaveShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspWaveShiftWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspWaveShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspWaveShiftWString, valueSet[0] & DigDspMuxShell0DspWaveShiftMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspWaveShiftMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspWaveShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspChanKeepWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspMuxShell1DspChanKeepW, uValueSet , DigDspMuxShell1DspChanKeepMask);
		if( (valueSet[0] & DigDspMuxShell1DspChanKeepMask) == (pFromFpga->data & DigDspMuxShell1DspChanKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspChanKeepWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspChanKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspChanKeepWString, valueSet[0] & DigDspMuxShell1DspChanKeepMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspChanKeepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspChanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1FdbkCoreCoarseScaleWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1FdbkCoreCoarseScaleW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1FdbkCoreCoarseScaleMask) == (pFromFpga->data & DigDspMuxShell1FdbkCoreCoarseScaleMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreCoarseScaleWString, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreCoarseScaleMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreCoarseScaleWString, valueSet[0] & DigDspMuxShell1FdbkCoreCoarseScaleMask, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreCoarseScaleMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1FdbkCoreCoarseScaleW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1FdbkCoreMpProcPhOffsetWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1FdbkCoreMpProcPhOffsetW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1FdbkCoreMpProcPhOffsetMask) == (pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcPhOffsetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcPhOffsetWString, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcPhOffsetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcPhOffsetWString, valueSet[0] & DigDspMuxShell1FdbkCoreMpProcPhOffsetMask, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcPhOffsetMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1FdbkCoreMpProcPhOffsetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1FdbkCoreMpProcSelEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1FdbkCoreMpProcSelEnW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1FdbkCoreMpProcSelEnMask) == (pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcSelEnWString, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcSelEnWString, valueSet[0] & DigDspMuxShell1FdbkCoreMpProcSelEnMask, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelEnMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1FdbkCoreMpProcSelEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1FdbkCoreMpProcSelThreshWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1FdbkCoreMpProcSelThreshW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1FdbkCoreMpProcSelThreshMask) == (pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelThreshMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcSelThreshWString, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelThreshMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1FdbkCoreMpProcSelThreshWString, valueSet[0] & DigDspMuxShell1FdbkCoreMpProcSelThreshMask, (unsigned ) pFromFpga->data & DigDspMuxShell1FdbkCoreMpProcSelThreshMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1FdbkCoreMpProcSelThreshW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspModuloWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1DspModuloW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1DspModuloMask) == (pFromFpga->data & DigDspMuxShell1DspModuloMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspModuloWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspModuloMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspModuloWString, valueSet[0] & DigDspMuxShell1DspModuloMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspModuloMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspModuloW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspPhaseStepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1DspPhaseStepW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1DspPhaseStepMask) == (pFromFpga->data & DigDspMuxShell1DspPhaseStepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspPhaseStepWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspPhaseStepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspPhaseStepWString, valueSet[0] & DigDspMuxShell1DspPhaseStepMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspPhaseStepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspPhaseStepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspPiezoPiezoDcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1DspPiezoPiezoDcW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1DspPiezoPiezoDcMask) == (pFromFpga->data & DigDspMuxShell1DspPiezoPiezoDcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspPiezoPiezoDcWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspPiezoPiezoDcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspPiezoPiezoDcWString, valueSet[0] & DigDspMuxShell1DspPiezoPiezoDcMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspPiezoPiezoDcMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspPiezoPiezoDcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspTagWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1DspTagW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1DspTagMask) == (pFromFpga->data & DigDspMuxShell1DspTagMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspTagWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspTagMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspTagWString, valueSet[0] & DigDspMuxShell1DspTagMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspTagMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspTagW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspUseFiberIqWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1DspUseFiberIqW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1DspUseFiberIqMask) == (pFromFpga->data & DigDspMuxShell1DspUseFiberIqMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspUseFiberIqWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspUseFiberIqMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspUseFiberIqWString, valueSet[0] & DigDspMuxShell1DspUseFiberIqMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspUseFiberIqMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspUseFiberIqW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspWaveSampPerWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1DspWaveSampPerW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1DspWaveSampPerMask) == (pFromFpga->data & DigDspMuxShell1DspWaveSampPerMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspWaveSampPerWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspWaveSampPerMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspWaveSampPerWString, valueSet[0] & DigDspMuxShell1DspWaveSampPerMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspWaveSampPerMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspWaveSampPerW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspMuxShell1DspWaveShiftWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspMuxShell1DspWaveShiftW, valueSet );
		if( (valueSet[0] & DigDspMuxShell1DspWaveShiftMask) == (pFromFpga->data & DigDspMuxShell1DspWaveShiftMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspWaveShiftWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspWaveShiftMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspWaveShiftWString, valueSet[0] & DigDspMuxShell1DspWaveShiftMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspWaveShiftMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspWaveShiftW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspRewindWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspRewindW, valueSet );
		if( (valueSet[0] & DigDspRewindMask) == (pFromFpga->data & DigDspRewindMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRewindWString, (unsigned ) pFromFpga->data & DigDspRewindMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspRewindWString, valueSet[0] & DigDspRewindMask, (unsigned ) pFromFpga->data & DigDspRewindMask);
			status = asynError;
			setParamStatus(p_DigDspRewindW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimAmpstepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimAmpstepW, valueSet );
		if( (valueSet[0] & DigDspSsaStimAmpstepMask) == (pFromFpga->data & DigDspSsaStimAmpstepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimAmpstepWString, (unsigned ) pFromFpga->data & DigDspSsaStimAmpstepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimAmpstepWString, valueSet[0] & DigDspSsaStimAmpstepMask, (unsigned ) pFromFpga->data & DigDspSsaStimAmpstepMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimAmpstepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimEnWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimEnW, valueSet );
		if( (valueSet[0] & DigDspSsaStimEnMask) == (pFromFpga->data & DigDspSsaStimEnMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimEnWString, (unsigned ) pFromFpga->data & DigDspSsaStimEnMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimEnWString, valueSet[0] & DigDspSsaStimEnMask, (unsigned ) pFromFpga->data & DigDspSsaStimEnMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimEnW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimGPeriodWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimGPeriodW, valueSet );
		if( (valueSet[0] & DigDspSsaStimGPeriodMask) == (pFromFpga->data & DigDspSsaStimGPeriodMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimGPeriodWString, (unsigned ) pFromFpga->data & DigDspSsaStimGPeriodMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimGPeriodWString, valueSet[0] & DigDspSsaStimGPeriodMask, (unsigned ) pFromFpga->data & DigDspSsaStimGPeriodMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimGPeriodW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspSsaStimPertstepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspSsaStimPertstepW, valueSet );
		if( (valueSet[0] & DigDspSsaStimPertstepMask) == (pFromFpga->data & DigDspSsaStimPertstepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimPertstepWString, (unsigned ) pFromFpga->data & DigDspSsaStimPertstepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspSsaStimPertstepWString, valueSet[0] & DigDspSsaStimPertstepMask, (unsigned ) pFromFpga->data & DigDspSsaStimPertstepMask);
			status = asynError;
			setParamStatus(p_DigDspSsaStimPertstepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTraceKeepWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspTraceKeepW, uValueSet , DigDspTraceKeepMask);
		if( (valueSet[0] & DigDspTraceKeepMask) == (pFromFpga->data & DigDspTraceKeepMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, valueSet[0] & DigDspTraceKeepMask, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
			status = asynError;
			setParamStatus(p_DigDspTraceKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTraceResetWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTraceResetWeW, valueSet );
		if( (valueSet[0] & DigDspTraceResetWeMask) == (pFromFpga->data & DigDspTraceResetWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceResetWeWString, (unsigned ) pFromFpga->data & DigDspTraceResetWeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceResetWeWString, valueSet[0] & DigDspTraceResetWeMask, (unsigned ) pFromFpga->data & DigDspTraceResetWeMask);
			status = asynError;
			setParamStatus(p_DigDspTraceResetWeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTrigInternalWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTrigInternalW, valueSet );
		if( (valueSet[0] & DigDspTrigInternalMask) == (pFromFpga->data & DigDspTrigInternalMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigInternalWString, (unsigned ) pFromFpga->data & DigDspTrigInternalMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigInternalWString, valueSet[0] & DigDspTrigInternalMask, (unsigned ) pFromFpga->data & DigDspTrigInternalMask);
			status = asynError;
			setParamStatus(p_DigDspTrigInternalW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTrigModeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTrigModeW, valueSet );
		if( (valueSet[0] & DigDspTrigModeMask) == (pFromFpga->data & DigDspTrigModeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigModeWString, (unsigned ) pFromFpga->data & DigDspTrigModeMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTrigModeWString, valueSet[0] & DigDspTrigModeMask, (unsigned ) pFromFpga->data & DigDspTrigModeMask);
			status = asynError;
			setParamStatus(p_DigDspTrigModeW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspWave0SrcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspWave0SrcW, valueSet );
		if( (valueSet[0] & DigDspWave0SrcMask) == (pFromFpga->data & DigDspWave0SrcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWave0SrcWString, (unsigned ) pFromFpga->data & DigDspWave0SrcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWave0SrcWString, valueSet[0] & DigDspWave0SrcMask, (unsigned ) pFromFpga->data & DigDspWave0SrcMask);
			status = asynError;
			setParamStatus(p_DigDspWave0SrcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspWave1SrcWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspWave1SrcW, valueSet );
		if( (valueSet[0] & DigDspWave1SrcMask) == (pFromFpga->data & DigDspWave1SrcMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWave1SrcWString, (unsigned ) pFromFpga->data & DigDspWave1SrcMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspWave1SrcWString, valueSet[0] & DigDspWave1SrcMask, (unsigned ) pFromFpga->data & DigDspWave1SrcMask);
			status = asynError;
			setParamStatus(p_DigDspWave1SrcW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DomainJumpRealignWAdr:
		status = (asynStatus) getIntegerParam(p_DomainJumpRealignW, valueSet );
		if( (valueSet[0] & DomainJumpRealignMask) == (pFromFpga->data & DomainJumpRealignMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignWString, (unsigned ) pFromFpga->data & DomainJumpRealignMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DomainJumpRealignWString, valueSet[0] & DomainJumpRealignMask, (unsigned ) pFromFpga->data & DomainJumpRealignMask);
			status = asynError;
			setParamStatus(p_DomainJumpRealignW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case IccCfgWAdr:
		status = (asynStatus) getIntegerParam(p_IccCfgW, valueSet );
		if( (valueSet[0] & IccCfgMask) == (pFromFpga->data & IccCfgMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgWString, (unsigned ) pFromFpga->data & IccCfgMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				IccCfgWString, valueSet[0] & IccCfgMask, (unsigned ) pFromFpga->data & IccCfgMask);
			status = asynError;
			setParamStatus(p_IccCfgW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case QsfpI2CRegWAdr:
		status = (asynStatus) getIntegerParam(p_QsfpI2CRegW, valueSet );
		if( (valueSet[0] & QsfpI2CRegMask) == (pFromFpga->data & QsfpI2CRegMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegWString, (unsigned ) pFromFpga->data & QsfpI2CRegMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				QsfpI2CRegWString, valueSet[0] & QsfpI2CRegMask, (unsigned ) pFromFpga->data & QsfpI2CRegMask);
			status = asynError;
			setParamStatus(p_QsfpI2CRegW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case SfpAddressSetWAdr:
		status = (asynStatus) getIntegerParam(p_SfpAddressSetW, valueSet );
		if( (valueSet[0] & SfpAddressSetMask) == (pFromFpga->data & SfpAddressSetMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetWString, (unsigned ) pFromFpga->data & SfpAddressSetMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				SfpAddressSetWString, valueSet[0] & SfpAddressSetMask, (unsigned ) pFromFpga->data & SfpAddressSetMask);
			status = asynError;
			setParamStatus(p_SfpAddressSetW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case TagNowWAdr:
		status = (asynStatus) getIntegerParam(p_TagNowW, valueSet );
		if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowWString, (unsigned ) pFromFpga->data & TagNowMask);
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				TagNowWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
			status = asynError;
			setParamStatus(p_TagNowW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
	default:
		// Arrays larger than 16 elements should be handled in a subclass, generally more complicated
		if ((pFromFpga->addr >= DigDspMuxShell0DspPiezoSfConstsWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0DspPiezoSfConstsWAdr + 8)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0DspPiezoSfConstsWAdr),
					p_DigDspMuxShell0DspPiezoSfConstsW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspPiezoSfConstsWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspPiezoSfConstsWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0DspPiezoSfConstsW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1DspPiezoSfConstsWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1DspPiezoSfConstsWAdr + 8)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1DspPiezoSfConstsWAdr),
					p_DigDspMuxShell1DspPiezoSfConstsW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspPiezoSfConstsWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspPiezoSfConstsWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1DspPiezoSfConstsW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell0FdbkCoreMpProcCoeffWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0FdbkCoreMpProcCoeffWAdr + 4)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0FdbkCoreMpProcCoeffWAdr),
					p_DigDspMuxShell0FdbkCoreMpProcCoeffW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0FdbkCoreMpProcCoeffWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0FdbkCoreMpProcCoeffWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0FdbkCoreMpProcCoeffW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell0FdbkCoreMpProcLimWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0FdbkCoreMpProcLimWAdr + 4)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0FdbkCoreMpProcLimWAdr),
					p_DigDspMuxShell0FdbkCoreMpProcLimW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0FdbkCoreMpProcLimWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0FdbkCoreMpProcLimWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0FdbkCoreMpProcLimW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell0FdbkCoreMpProcSetmpWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0FdbkCoreMpProcSetmpWAdr + 4)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0FdbkCoreMpProcSetmpWAdr),
					p_DigDspMuxShell0FdbkCoreMpProcSetmpW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0FdbkCoreMpProcSetmpWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0FdbkCoreMpProcSetmpWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0FdbkCoreMpProcSetmpW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1FdbkCoreMpProcCoeffWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1FdbkCoreMpProcCoeffWAdr + 4)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1FdbkCoreMpProcCoeffWAdr),
					p_DigDspMuxShell1FdbkCoreMpProcCoeffW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1FdbkCoreMpProcCoeffWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1FdbkCoreMpProcCoeffWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1FdbkCoreMpProcCoeffW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1FdbkCoreMpProcLimWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1FdbkCoreMpProcLimWAdr + 4)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1FdbkCoreMpProcLimWAdr),
					p_DigDspMuxShell1FdbkCoreMpProcLimW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1FdbkCoreMpProcLimWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1FdbkCoreMpProcLimWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1FdbkCoreMpProcLimW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1FdbkCoreMpProcSetmpWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1FdbkCoreMpProcSetmpWAdr + 4)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1FdbkCoreMpProcSetmpWAdr),
					p_DigDspMuxShell1FdbkCoreMpProcSetmpW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1FdbkCoreMpProcSetmpWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1FdbkCoreMpProcSetmpWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1FdbkCoreMpProcSetmpW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecDriveCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecDriveCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecDriveCplOutCouplingWAdr),
					p_DigDspMuxC0ElecDriveCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecDriveCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecDriveCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecDriveCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecDriveCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecDriveCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecDriveCplOutPhaseOffsetWAdr),
					p_DigDspMuxC0ElecDriveCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecDriveCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecDriveCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecDriveCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecM0OutCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecM0OutCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecM0OutCplOutCouplingWAdr),
					p_DigDspMuxC0ElecM0OutCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM0OutCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM0OutCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecM0OutCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecM0OutCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecM0OutCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecM0OutCplOutPhaseOffsetWAdr),
					p_DigDspMuxC0ElecM0OutCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM0OutCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM0OutCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecM0OutCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecM1OutCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecM1OutCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecM1OutCplOutCouplingWAdr),
					p_DigDspMuxC0ElecM1OutCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM1OutCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM1OutCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecM1OutCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecM1OutCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecM1OutCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecM1OutCplOutPhaseOffsetWAdr),
					p_DigDspMuxC0ElecM1OutCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM1OutCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM1OutCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecM1OutCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecM2OutCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecM2OutCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecM2OutCplOutCouplingWAdr),
					p_DigDspMuxC0ElecM2OutCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM2OutCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM2OutCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecM2OutCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC0ElecM2OutCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC0ElecM2OutCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC0ElecM2OutCplOutPhaseOffsetWAdr),
					p_DigDspMuxC0ElecM2OutCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM2OutCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC0ElecM2OutCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC0ElecM2OutCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecDriveCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecDriveCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecDriveCplOutCouplingWAdr),
					p_DigDspMuxC1ElecDriveCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecDriveCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecDriveCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecDriveCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecDriveCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecDriveCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecDriveCplOutPhaseOffsetWAdr),
					p_DigDspMuxC1ElecDriveCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecDriveCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecDriveCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecDriveCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecM0OutCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecM0OutCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecM0OutCplOutCouplingWAdr),
					p_DigDspMuxC1ElecM0OutCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM0OutCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM0OutCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecM0OutCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecM0OutCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecM0OutCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecM0OutCplOutPhaseOffsetWAdr),
					p_DigDspMuxC1ElecM0OutCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM0OutCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM0OutCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecM0OutCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecM1OutCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecM1OutCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecM1OutCplOutCouplingWAdr),
					p_DigDspMuxC1ElecM1OutCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM1OutCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM1OutCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecM1OutCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecM1OutCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecM1OutCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecM1OutCplOutPhaseOffsetWAdr),
					p_DigDspMuxC1ElecM1OutCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM1OutCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM1OutCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecM1OutCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecM2OutCplOutCouplingWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecM2OutCplOutCouplingWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecM2OutCplOutCouplingWAdr),
					p_DigDspMuxC1ElecM2OutCplOutCouplingW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM2OutCplOutCouplingWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM2OutCplOutCouplingWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecM2OutCplOutCouplingW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxC1ElecM2OutCplOutPhaseOffsetWAdr) &&
				(pFromFpga->addr < (DigDspMuxC1ElecM2OutCplOutPhaseOffsetWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxC1ElecM2OutCplOutPhaseOffsetWAdr),
					p_DigDspMuxC1ElecM2OutCplOutPhaseOffsetW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM2OutCplOutPhaseOffsetWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxC1ElecM2OutCplOutPhaseOffsetWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxC1ElecM2OutCplOutPhaseOffsetW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell0DspLpNotchLp1AKxWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0DspLpNotchLp1AKxWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0DspLpNotchLp1AKxWAdr),
					p_DigDspMuxShell0DspLpNotchLp1AKxW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1AKxWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1AKxWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0DspLpNotchLp1AKxW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell0DspLpNotchLp1AKyWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0DspLpNotchLp1AKyWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0DspLpNotchLp1AKyWAdr),
					p_DigDspMuxShell0DspLpNotchLp1AKyW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1AKyWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1AKyWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0DspLpNotchLp1AKyW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell0DspLpNotchLp1BKxWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0DspLpNotchLp1BKxWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0DspLpNotchLp1BKxWAdr),
					p_DigDspMuxShell0DspLpNotchLp1BKxW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1BKxWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1BKxWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0DspLpNotchLp1BKxW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell0DspLpNotchLp1BKyWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell0DspLpNotchLp1BKyWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell0DspLpNotchLp1BKyWAdr),
					p_DigDspMuxShell0DspLpNotchLp1BKyW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1BKyWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell0DspLpNotchLp1BKyWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell0DspLpNotchLp1BKyW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1DspLpNotchLp1AKxWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1DspLpNotchLp1AKxWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1DspLpNotchLp1AKxWAdr),
					p_DigDspMuxShell1DspLpNotchLp1AKxW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1AKxWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1AKxWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1DspLpNotchLp1AKxW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1DspLpNotchLp1AKyWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1DspLpNotchLp1AKyWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1DspLpNotchLp1AKyWAdr),
					p_DigDspMuxShell1DspLpNotchLp1AKyW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1AKyWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1AKyWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1DspLpNotchLp1AKyW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1DspLpNotchLp1BKxWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1DspLpNotchLp1BKxWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1DspLpNotchLp1BKxWAdr),
					p_DigDspMuxShell1DspLpNotchLp1BKxW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1BKxWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1BKxWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1DspLpNotchLp1BKxW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		if ((pFromFpga->addr >= DigDspMuxShell1DspLpNotchLp1BKyWAdr) &&
				(pFromFpga->addr < (DigDspMuxShell1DspLpNotchLp1BKyWAdr + 2)))
		{
			status = (asynStatus) getIntegerParam((pFromFpga->addr - DigDspMuxShell1DspLpNotchLp1BKyWAdr),
					p_DigDspMuxShell1DspLpNotchLp1BKyW, valueSet);
			if( (valueSet[0] & TagNowMask) == (pFromFpga->data & TagNowMask))
				asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1BKyWString, (unsigned ) pFromFpga->data & TagNowMask);
			else
			{
				asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
					"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
					DigDspMuxShell1DspLpNotchLp1BKyWString, valueSet[0] & TagNowMask, (unsigned ) pFromFpga->data & TagNowMask);
				status = asynError;
				setParamStatus(p_DigDspMuxShell1DspLpNotchLp1BKyW, status);
				getIntegerParam(p_CommErrorCount, &errorCount);
				setIntegerParam(p_CommErrorCount, ++errorCount);
			}


		}
		else
		{
		getIntegerParam(p_CommErrorCount, &errorCount);
		setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		status = asynError;
		break;
    }

	// TODO: handle arrays

    return status;
}



extern "C" {

/* Configuration routine.  Called directly, or from the iocsh function below */

/** EPICS iocsh callable function to call constructor for the scllrfPRC class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asynIPport this will use to communicate */
int scllrfPRCConfigure(const char *drvPortName, const char *netPortName)
{
	//new scllrfPRCDriver(drvPortName, netPortName);
	new scllrfPRCDriver(drvPortName, netPortName, 8, 0);
	return asynSuccess;
}


/* EPICS iocsh shell commands */

static const iocshArg initArg0 = { "drvPortName",iocshArgString};
static const iocshArg initArg1 = { "IP port name",iocshArgString};
static const iocshArg * const initArgs[] = {&initArg0,
		&initArg1};
static const iocshFuncDef initFuncDef = {"scllrfPRCConfigure",2,initArgs};
static void initCallFunc(const iocshArgBuf *args)
{
	scllrfPRCConfigure(args[0].sval, args[1].sval);
}

void scllrfPRCRegister(void)
{
	iocshRegister(&initFuncDef,initCallFunc);
}

epicsExportRegistrar(scllrfPRCRegister);

}



