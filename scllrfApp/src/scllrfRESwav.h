#ifndef SCLLRFRESWAV_DRIVER_H
#define SCLLRFRESWAV_DRIVER_H

/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : templateScllrfDriver.h
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Header defining register interface to scllrfRESwav, autogenerated from a python
 * dictionary.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/
#include "scllrfAsynPortDriver.h"

/* Registers */
// Piezo 1 chan 1 current n
static const char *Piezo1C1InRString = "PIEZO1_C1_IN_R";
// Piezo 1 chan 1 current p
static const char *Piezo1C1IpRString = "PIEZO1_C1_IP_R";
// Piezo 1 chan 1 amp drive voltage
static const char *Piezo1C1DriveVRString = "PIEZO1_C1_DRIVE_V_R";
// Piezo 1 chan 1 out voltage scaled
static const char *Piezo1C1OutVRString = "PIEZO1_C1_OUT_V_R";
// Piezo 1 chan 2 current n
static const char *Piezo1C2InRString = "PIEZO1_C2_IN_R";
// Piezo 1 chan 2 current p
static const char *Piezo1C2IpRString = "PIEZO1_C2_IP_R";
// Piezo 1 chan 2 amp drive voltage
static const char *Piezo1C2DriveVRString = "PIEZO1_C2_DRIVE_V_R";
// Piezo 1 chan 2 out voltage scaled
static const char *Piezo1C2OutVRString = "PIEZO1_C2_OUT_V_R";
// Piezo 2 chan 1 current n
static const char *Piezo2C1InRString = "PIEZO2_C1_IN_R";
// Piezo 2 chan 1 current p
static const char *Piezo2C1IpRString = "PIEZO2_C1_IP_R";
// Piezo 2 chan 1 amp drive voltage
static const char *Piezo2C1DriveVRString = "PIEZO2_C1_DRIVE_V_R";
// Piezo 2 chan 1 out voltage scaled
static const char *Piezo2C1OutVRString = "PIEZO2_C1_OUT_V_R";
// Piezo 2 chan 2 current n
static const char *Piezo2C2InRString = "PIEZO2_C2_IN_R";
// Piezo 2 chan 2 current p
static const char *Piezo2C2IpRString = "PIEZO2_C2_IP_R";
// Piezo 2 chan 2 amp drive voltage
static const char *Piezo2C2DriveVRString = "PIEZO2_C2_DRIVE_V_R";
// Piezo 2 chan 2 out voltage scaled
static const char *Piezo2C2OutVRString = "PIEZO2_C2_OUT_V_R";
// Piezo 3 chan 1 current n
static const char *Piezo3C1InRString = "PIEZO3_C1_IN_R";
// Piezo 3 chan 1 current p
static const char *Piezo3C1IpRString = "PIEZO3_C1_IP_R";
// Piezo 3 chan 1 amp drive voltage
static const char *Piezo3C1DriveVRString = "PIEZO3_C1_DRIVE_V_R";
// Piezo 3 chan 1 out voltage scaled
static const char *Piezo3C1OutVRString = "PIEZO3_C1_OUT_V_R";
// Piezo 3 chan 2 current n
static const char *Piezo3C2InRString = "PIEZO3_C2_IN_R";
// Piezo 3 chan 2 current p
static const char *Piezo3C2IpRString = "PIEZO3_C2_IP_R";
// Piezo 3 chan 2 amp drive voltage
static const char *Piezo3C2DriveVRString = "PIEZO3_C2_DRIVE_V_R";
// Piezo 3 chan 2 out voltage scaled
static const char *Piezo3C2OutVRString = "PIEZO3_C2_OUT_V_R";
// Piezo 4 chan 1 current n
static const char *Piezo4C1InRString = "PIEZO4_C1_IN_R";
// Piezo 4 chan 1 current p
static const char *Piezo4C1IpRString = "PIEZO4_C1_IP_R";
// Piezo 4 chan 1 amp drive voltage
static const char *Piezo4C1DriveVRString = "PIEZO4_C1_DRIVE_V_R";
// Piezo 4 chan 1 out voltage scaled
static const char *Piezo4C1OutVRString = "PIEZO4_C1_OUT_V_R";
// Piezo 4 chan 2 current n
static const char *Piezo4C2InRString = "PIEZO4_C2_IN_R";
// Piezo 4 chan 2 current p
static const char *Piezo4C2IpRString = "PIEZO4_C2_IP_R";
// Piezo 4 chan 2 amp drive voltage
static const char *Piezo4C2DriveVRString = "PIEZO4_C2_DRIVE_V_R";
// Piezo 4 chan 2 out voltage scaled
static const char *Piezo4C2OutVRString = "PIEZO4_C2_OUT_V_R";
// PZT waveform availability: 8 bits per piezo, MSB, pzt 4-1
static const char *PztWaveAvailRString = "PZT_WAVE_AVAIL_R";
static const char *PztWaveAvailBit1RString = "PZT_WAVE_AVAIL_BIT1_R";
static const char *PztWaveAvailBit2RString = "PZT_WAVE_AVAIL_BIT2_R";
static const char *ReservedRString = "RESERVED_R";
static const char *ReservedWString = "RESERVED_W";
static const char *ReservedRString = "RESERVED_R";
static const char *ReservedWString = "RESERVED_W";
static const char *ReservedRString = "RESERVED_R";
static const char *ReservedWString = "RESERVED_W";
static const char *ReservedRString = "RESERVED_R";
static const char *ReservedWString = "RESERVED_W";

const unsigned int readRegCount = 37;
const unsigned int writeRegCount = 4;



 /* This class implements the AxiVersion driver. */
class scllrfRESwavDriver : public scllrfAsynPortDriver {
public:
    scllrfRESwavDriver(const char *drvPortName, const char *netPortName);
    virtual ~scllrfRESwavDriver();



protected:
    virtual asynStatus functionToRegister(const int function, FpgaReg *pToFpga); /**< Translate asyn function number/reason to a register address */
	virtual asynStatus processRegReadback(const FpgaReg *pFromFpga,
			bool &waveIsReady); // parse register data, write to PVs
	virtual asynStatus processRegWriteResponse(const FpgaReg *pFromFpga);

/* Registers */
    int p_Piezo1C1InR;
    #define FIRST_SCLLRFRESWAV_PARAM p_Piezo1C1InR
    int p_Piezo1C1IpR;
    int p_Piezo1C1DriveVR;
    int p_Piezo1C1OutVR;
    int p_Piezo1C2InR;
    int p_Piezo1C2IpR;
    int p_Piezo1C2DriveVR;
    int p_Piezo1C2OutVR;
    int p_Piezo2C1InR;
    int p_Piezo2C1IpR;
    int p_Piezo2C1DriveVR;
    int p_Piezo2C1OutVR;
    int p_Piezo2C2InR;
    int p_Piezo2C2IpR;
    int p_Piezo2C2DriveVR;
    int p_Piezo2C2OutVR;
    int p_Piezo3C1InR;
    int p_Piezo3C1IpR;
    int p_Piezo3C1DriveVR;
    int p_Piezo3C1OutVR;
    int p_Piezo3C2InR;
    int p_Piezo3C2IpR;
    int p_Piezo3C2DriveVR;
    int p_Piezo3C2OutVR;
    int p_Piezo4C1InR;
    int p_Piezo4C1IpR;
    int p_Piezo4C1DriveVR;
    int p_Piezo4C1OutVR;
    int p_Piezo4C2InR;
    int p_Piezo4C2IpR;
    int p_Piezo4C2DriveVR;
    int p_Piezo4C2OutVR;
    int p_PztWaveAvailR;
    int p_PztWaveAvailBit1R;
    int p_PztWaveAvailBit2R;
    int p_ReservedR;
    int p_ReservedW;
    int p_ReservedR;
    int p_ReservedW;
    int p_ReservedR;
    int p_ReservedW;
    int p_ReservedR;
    int p_ReservedW;
    #define LAST_SCLLRFRESWAV_PARAM p_ReservedW

#define NUM_SCLLRFRESWAV_PARAMS (&LAST_SCLLRFRESWAV_PARAM - &FIRST_SCLLRFRESWAV_PARAM + NUM_SCLLRF_PARAMS + 1)

private:

    // mapping of register names to addresses
    enum ReadRegAddrs
    {
    	ReservedRAdr = 0x00000060,
    	ReservedRAdr = 0x00000061,
    	ReservedRAdr = 0x00000062,
    	ReservedRAdr = 0x00000063,
    	PztWaveAvailRAdr = 0x0000006F,
    	Piezo1C1InRAdr = 0x00000070,
    	Piezo1C1IpRAdr = 0x00000071,
    	Piezo1C1OutVRAdr = 0x00000072,
    	Piezo1C1DriveVRAdr = 0x00000073,
    	Piezo1C2InRAdr = 0x00000074,
    	Piezo1C2IpRAdr = 0x00000075,
    	Piezo1C2OutVRAdr = 0x00000076,
    	Piezo1C2DriveVRAdr = 0x00000077,
    	Piezo2C1InRAdr = 0x00000080,
    	Piezo2C1IpRAdr = 0x00000081,
    	Piezo2C1OutVRAdr = 0x00000082,
    	Piezo2C1DriveVRAdr = 0x00000083,
    	Piezo2C2InRAdr = 0x00000084,
    	Piezo2C2IpRAdr = 0x00000085,
    	Piezo2C2OutVRAdr = 0x00000086,
    	Piezo2C2DriveVRAdr = 0x00000087,
    	Piezo3C1InRAdr = 0x00000090,
    	Piezo3C1IpRAdr = 0x00000091,
    	Piezo3C1OutVRAdr = 0x00000092,
    	Piezo3C1DriveVRAdr = 0x00000093,
    	Piezo3C2InRAdr = 0x00000094,
    	Piezo3C2IpRAdr = 0x00000095,
    	Piezo3C2OutVRAdr = 0x00000096,
    	Piezo3C2DriveVRAdr = 0x00000097,
    	Piezo4C1InRAdr = 0x000000A0,
    	Piezo4C1IpRAdr = 0x000000A1,
    	Piezo4C1OutVRAdr = 0x000000A2,
    	Piezo4C1DriveVRAdr = 0x000000A3,
    	Piezo4C2InRAdr = 0x000000A4,
    	Piezo4C2IpRAdr = 0x000000A5,
    	Piezo4C2OutVRAdr = 0x000000A6,
    	Piezo4C2DriveVRAdr = 0x000000A7,
    };

    // mapping of register names to addresses
    enum RegWriteAddrs
    {
    	ReservedWAdr = 0x00000060,
    	ReservedWAdr = 0x00000061,
    	ReservedWAdr = 0x00000062,
    	ReservedWAdr = 0x00000063,
    };

    // masks applied to returned register data
    enum RegMasks
    {
		PztWaveAvailBit1Mask = 0x00000001,
		PztWaveAvailBit2Mask = 0x00000010,

    };
};

#endif

