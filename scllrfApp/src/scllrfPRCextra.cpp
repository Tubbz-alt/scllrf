/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : scllrfAsynPortDriver.cpp
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Prototype for FPGA register access to FPGAs using protocol defined in papers
 * given to SLAC by LBNL (Larry Doolittle). Uses asynPortDriver interface. Some of this
 * should eventually be autogenerated from json files or some such, and templates.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/

#include "scllrfPRCextra.h"

#include <asynOctetSyncIO.h>
#include <asynCommonSyncIO.h>
#include <limits>
#include <netinet/in.h>
#include <iostream>
using namespace std;
#include <math.h>

/** Constructor for the scllrfPRC class.
 * Calls constructor for the asynPortDriver base class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] path The path to the peripherial as built by the builder api
 * \param[in] nelms The number of elements of this device (max addr)
 * \paarm[in] nEntries The number of asyn params to be created for each device
 *
 * */
scllrfPRCextra::scllrfPRCextra(const char *drvPortName, const char *netPortName)
: scllrfPRCDriver(drvPortName, netPortName, maxWavesCount, NUM_SCLLRFPRCEXTRA_PARAMS)
{
	unsigned int i;

    createParam(WaveformI16BitString, asynParamInt16Array, &p_WaveformI16Bit);
    createParam(WaveformQ16BitString, asynParamInt16Array, &p_WaveformQ16Bit);
    createParam(WaveformI22BitString, asynParamInt32Array, &p_WaveformI22Bit);
    createParam(WaveformQ22BitString, asynParamInt32Array, &p_WaveformQ22Bit);
    createParam(IQNActiveString, asynParamInt32, &p_IQNActive);
    createParam(IQBitWidthString, asynParamInt32, &p_IQBitWidth);
    createParam(IQ16BitNELMString, asynParamInt32, &p_IQ16BitNELM);
    createParam(IQ22BitNELMString, asynParamInt32, &p_IQ22BitNELM);
    createParam(WvformsAvailableRString, asynParamInt32, &p_WvformsAvailableR);

// Is this next line wrong, or is the generated one wrong?
    PolledRegMsgSize_ = scllrfPRCReadRegCount + (scllrfPRCReadRegCount / 175) + 1;
    if (pPolledRegMsg_ != NULL)
    {
    	printf("%s rejects the base class's message and replaces it with its own.\n",__PRETTY_FUNCTION__);
    	delete pPolledRegMsg_;
    }
	// A canned request to read all registers
    // NOTE: To avoid side effects, any registers with U or spi in their name have been
    // manually replaced with H0D0A0D0ARAdr
    pPolledRegMsg_ = new FpgaReg[PolledRegMsgSize_]
	{
			{ 0, 0 },
			{ flagReadMask | HellRAdr, blankData },
			{ flagReadMask | OWoRAdr, blankData },
			{ flagReadMask | RldRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | FfffffffRAdr, blankData },
			{ flagReadMask | FquencyAdcRAdr, blankData },
			{ flagReadMask | Fquency4XoutRAdr, blankData },
			{ flagReadMask | FquencyClkout3RAdr, blankData },
			{ flagReadMask | FquencyDcoRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | Wv0OutRAdr, blankData },
			{ flagReadMask | Wv1OutRAdr, blankData },
			{ flagReadMask | AdcTestWv1OutRAdr, blankData },
			{ flagReadMask | AdcTestWv2OutRAdr, blankData },
			{ flagReadMask | AdcTestWv3OutRAdr, blankData },
			{ flagReadMask | AdcTestWv4OutRAdr, blankData },
			{ flagReadMask | CtraceRunningRAdr, blankData },
			{ flagReadMask | FquencyGtxTxRAdr, blankData },
			{ flagReadMask | FquencyGtxRxRAdr, blankData },
			{ flagReadMask | HistStatusRAdr, blankData },
			{ flagReadMask | PhxStatusRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | CrcErrorsRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | AdcTestTrigCntRAdr, blankData },
			{ flagReadMask | WvformsAvailableRAdr, blankData },
			{ flagReadMask | BanyanStatusRAdr, blankData },
			{ flagReadMask | SlowChainOutRAdr, blankData },
			{ flagReadMask | TraceStatus1RAdr, blankData },
			{ flagReadMask | TraceStatus2RAdr, blankData },
			{ flagReadMask | IdelayBaseRAdr, blankData },
			{ flagReadMask | HistDoutRAdr, blankData },
			{ flagReadMask | PhxDoutRAdr, blankData },
			{ flagReadMask | BanyanBufRAdr, blankData },
			{ flagReadMask | ScannerResultRAdr, blankData },
			{ flagReadMask | TraceIqBufRAdr, blankData },
			{ flagReadMask | TraceIBufRAdr, blankData },
			{ flagReadMask | TraceQBufRAdr, blankData },
			{ flagReadMask | QsfpBufRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechNoiseCplKOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechResnrPropConstRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecDot0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecDot1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecDot2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecOuterProd0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecOuterProd1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecOuterProd2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PiezoCplKOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecDot0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecDot1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecDot2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecOuterProd0KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecOuterProd1KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecOuterProd2KOutRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PiezoCplKOutRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcCoeffRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcLimRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcSetmpRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcCoeffRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcLimRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcSetmpRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4EdcoCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4EdcoPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4EdcoCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4EdcoPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1AKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1AKyRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1BKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspLpNotchLp1BKyRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1AKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1AKyRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1BKxRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspLpNotchLp1BKyRAdr, blankData },
			{ flagReadMask | AdcMmcmRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | DigCfgBanyanMaskRAdr, blankData },
			{ flagReadMask | DigCfgBitslipRAdr, blankData },
			{ flagReadMask | DigCfgIdelayctrlResetRRAdr, blankData },
			{ flagReadMask | H0D0A0D0ARAdr, blankData },
			{ flagReadMask | DigCfgMmcmResetRRAdr, blankData },
			{ flagReadMask | DigCfgPeriphConfigRAdr, blankData },
			{ flagReadMask | DigCfgPhxTrigRAdr, blankData },
			{ flagReadMask | DigCfgRawadcTrigRAdr, blankData },
			{ flagReadMask | DigCfgScanTriggerWeRAdr, blankData },
			{ flagReadMask | DigCfgScannerDebugRAdr, blankData },
			{ flagReadMask | DigCfgSyncAd7794CsetRAdr, blankData },
			{ flagReadMask | DigCfgSyncTps62210CsetRAdr, blankData },
			{ flagReadMask | DigDspAdcTestMdRAdr, blankData },
			{ flagReadMask | DigDspAdcTestResetRAdr, blankData },
			{ flagReadMask | DigDspAmplitudeRAdr, blankData },
			{ flagReadMask | DigDspAverageLenRAdr, blankData },
			{ flagReadMask | DigDspBufTrigRAdr, blankData },
			{ flagReadMask | DigDspCicPeriodRAdr, blankData },
			{ flagReadMask | DigDspCicShiftRAdr, blankData },
			{ flagReadMask | DigDspCircleBufFlipRAdr, blankData },
			{ flagReadMask | DigDspDacDdsResetRAdr, blankData },
			{ flagReadMask | DigDspDacMdRAdr, blankData },
			{ flagReadMask | DigDspDdsaModRAdr, blankData },
			{ flagReadMask | DigDspDdsaPhstepHRAdr, blankData },
			{ flagReadMask | DigDspDdsaPhstepLRAdr, blankData },
			{ flagReadMask | DigDspHistCountWStrobeRAdr, blankData },
			{ flagReadMask | DigDspLlrfDspDacEnRAdr, blankData },
			{ flagReadMask | DigDspLoAmpRAdr, blankData },
			{ flagReadMask | DigDspModRAdr, blankData },
			{ flagReadMask | DigDspPhStepHRAdr, blankData },
			{ flagReadMask | DigDspPhStepLRAdr, blankData },
			{ flagReadMask | DigDspPrcDspCselRAdr, blankData },
			{ flagReadMask | DigDspPrcDspPrlCfgRAdr, blankData },
			{ flagReadMask | DigDspPrcDspPrlGainRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam0ModRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam0PhInitRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam0PhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam1ModRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam1PhInitRAdr, blankData },
			{ flagReadMask | DigDspRsmBeam1PhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechPrngIvaRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechPrngIvbRAdr, blankData },
			{ flagReadMask | DigDspRsmC4MechPrngRndRunRAdr, blankData },
			{ flagReadMask | DigDspRsmC0ACoffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC0AForOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC0ARflOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC0AmpLpBwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Efrq0CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Efrq1CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Efrq2CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode0BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode0BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode0DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode1BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode1BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode1DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode2BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode2BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4Emode2DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecModRAdr, blankData },
			{ flagReadMask | DigDspRsmC0C4ElecPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmC0ComprSatCtlRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PrngIvaRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PrngIvbRAdr, blankData },
			{ flagReadMask | DigDspRsmC0PrngRndRunRAdr, blankData },
			{ flagReadMask | DigDspRsmC1ACoffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1AForOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1ARflOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmC1AmpLpBwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Efrq0CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Efrq1CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Efrq2CrsFqRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode0BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode0BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode0DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode1BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode1BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode1DrvCplRAdr, blankData },
		{ 0, 0 },
			{ flagReadMask | DigDspRsmC1C4Emode2BeamCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode2BwRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4Emode2DrvCplRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecModRAdr, blankData },
			{ flagReadMask | DigDspRsmC1C4ElecPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmC1ComprSatCtlRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PrngIvaRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PrngIvbRAdr, blankData },
			{ flagReadMask | DigDspRsmC1PrngRndRunRAdr, blankData },
			{ flagReadMask | DigDspRsmDacIqPhRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspChanKeepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkCrsScaleRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcSelEnRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspFdbkMpProcSelThreshRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspModRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspPiezoPiezoDcRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspTagRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspUseFiberIqRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspWvSampPerRAdr, blankData },
			{ flagReadMask | DigDspRsmSh0DspWvShiftRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspChanKeepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkCrsScaleRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcPhOffsetRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcSelEnRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspFdbkMpProcSelThreshRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspModRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspPhStepRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspPiezoPiezoDcRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspTagRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspUseFiberIqRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspWvSampPerRAdr, blankData },
			{ flagReadMask | DigDspRsmSh1DspWvShiftRAdr, blankData },
			{ flagReadMask | DigDspRewindRAdr, blankData },
			{ flagReadMask | DigDspSsaStimAmpstepRAdr, blankData },
			{ flagReadMask | DigDspSsaStimEnRAdr, blankData },
			{ flagReadMask | DigDspSsaStimGPeriodRAdr, blankData },
			{ flagReadMask | DigDspSsaStimPertstepRAdr, blankData },
			{ flagReadMask | DigDspTraceKeepRAdr, blankData },
			{ flagReadMask | DigDspTraceResetWeRAdr, blankData },
			{ flagReadMask | DigDspTrigInternalRAdr, blankData },
			{ flagReadMask | DigDspTrigMdRAdr, blankData },
			{ flagReadMask | DigDspWv0SrcRAdr, blankData },
			{ flagReadMask | DigDspWv1SrcRAdr, blankData },
			{ flagReadMask | DomainJumpRealignRAdr, blankData },
			{ flagReadMask | IccCfgRAdr, blankData },
			{ flagReadMask | QsfpI2CRegRAdr, blankData },
			{ flagReadMask | SfpAddressSetRAdr, blankData },
			{ flagReadMask | TagNowRAdr, blankData },
	};

    printf(" polled register msg size is %d.\n", (int) PolledRegMsgSize_);
	htonFpgaRegArray(pPolledRegMsg_, PolledRegMsgSize_);

    epicsThreadSleep(defaultPollPeriod);
    printf("%s created %d parameters.\n",__PRETTY_FUNCTION__, NUM_SCLLRFPRCEXTRA_PARAMS);

	reqWaveEventId_ = epicsEventMustCreate(epicsEventEmpty);
	startWaveformRequester();

    epicsThreadSleep(defaultPollPeriod);
    wakeupPoller();
    wakeupReader();

}

scllrfPRCextra::~scllrfPRCextra()
{
	isShuttingDown_ = true;
	epicsThreadSleep(0.1); // Allow threads to run and exit
	epicsEventSignal(reqWaveEventId_);
	wakeupPoller();
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller(); // call this twice in case the poller was never set to run
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupReader();
	pasynOctetSyncIO->disconnect(pOctetAsynUser_);
	pasynCommonSyncIO->disconnectDevice(pCommonAsynUser_);
	pasynCommonSyncIO->disconnect(pCommonAsynUser_);
}


/** Called when asyn clients call pasynInt32->read().
 * \param[in] pasynUser pasynUser structure that encodes the reason and address.
 * \param[in] value Pointer to the value to read. */
asynStatus scllrfPRCextra::writeInt32(asynUser *pasynUser, epicsInt32 value)
{
	int function = pasynUser->reason;
//	int addr = 0;
	asynStatus status = asynSuccess;
    const char *paramName;
//    FpgaReg regSendBuf[2];

	epicsTimeStamp timeStamp; getTimeStamp(&timeStamp);

    /* Set the parameter in the parameter library. */
    status = (asynStatus) setIntegerParam(function, value);

    /* Fetch the parameter string name for possible use in debugging */
    getParamName(function, &paramName);
    asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "--> %s: function=%d, %s, set to %d\n",
			__PRETTY_FUNCTION__, function, paramName, value);

    if (function == p_IQBitWidth)
    {
    	wavBitWidth_ = (scllrfPRCextra::WavBitWidth) value;
    }

    scllrfAsynPortDriver::writeInt32(pasynUser, value);

	/* Do callbacks so higher layers see any changes */
	status = (asynStatus) callParamCallbacks();

    if (status)
        epicsSnprintf(pasynUser->errorMessage, pasynUser->errorMessageSize,
                  "%s: status=%d, function=%d, name=%s, value=%d",
				  __PRETTY_FUNCTION__, status, function, paramName, value);
    else
        asynPrint(pasynUser, ASYN_TRACEIO_DRIVER,
              "<-- %s: function=%d, name=%s, value=%d\n",
			  __PRETTY_FUNCTION__, function, paramName, value);
    return status;
}

/** Called when asyn clients call pasynInt32Array->write().
  * The base class implementation simply prints an error message.
  * Derived classes may reimplement this function if required.
  * \param[in] pasynUser pasynUser structure that encodes the reason and address.
  * \param[in] value Pointer to the array to write.
  * \param[in] nElements Number of elements to write. */
asynStatus scllrfPRCextra::writeInt32Array(asynUser *pasynUser, epicsInt32 *value,
                                size_t nElements)
{
	int function = pasynUser->reason;
	asynStatus status = asynSuccess;
//	int nCopy;
	FpgaReg regSendBuf[maxMsgSize/sizeof(FpgaReg)];
	unsigned int i, uOutBuffIndex;
	uint32_t uRegAddr;
    const char *paramName;

	//getIntegerParam(P_ArrayLength, &nCopy);
	//if ((int) nElements < nCopy)
	//	nCopy = (int) nElements;

    /* Fetch the parameter string name for possible use in debugging */
    getParamName(function, &paramName);

	if(nElements < 2)
	{
		asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: array with %d elements, function=%d, %s\n",
				__PRETTY_FUNCTION__, (int) nElements, function, paramName);
		return status;
	}
	else
		asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: array with %d elements, function=%d, %s\n",
				__PRETTY_FUNCTION__, (int) nElements, function, paramName);

	status = functionToRegister(function, &regSendBuf[1]);
	if (status != asynSuccess)
		return status;

	uRegAddr = regSendBuf[1].addr;
	uOutBuffIndex = 1; // index of first register past the nonce

	for(i=0; i<nElements; ++i, ++uOutBuffIndex)
	{
		regSendBuf[uOutBuffIndex].data = (int32_t) value[i];
		regSendBuf[uOutBuffIndex].addr = (uint32_t) uRegAddr + i;

		// If there's more to send than will fit in the max message size, break
		// it up into chunks and send each chunk individually
		if(uOutBuffIndex == maxMsgSize/sizeof(FpgaReg)-1)
		{
			//printf("\n%s calling htonFpgaRegArray for %u registers\n", __PRETTY_FUNCTION__, uOutBuffIndex );
                        htonFpgaRegArray(regSendBuf, uOutBuffIndex);
			sendRegRequest(regSendBuf, uOutBuffIndex+1);

			if (status)
				epicsSnprintf(pasynUser->errorMessage, pasynUser->errorMessageSize,
						"%s: status=%d, function=%d, sending array segment %u of %s", __PRETTY_FUNCTION__,
						status, function, i/uOutBuffIndex +1, paramName);
			else
				asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: function=%d, sending array segment %u of %s\n",
						__PRETTY_FUNCTION__, function, i/uOutBuffIndex +1, paramName);
			uOutBuffIndex = 0; // loop will increment to index of first register past the nonce
		}
	}
        //printf("\n%s calling htonFpgaRegArray for %u registers\n", __PRETTY_FUNCTION__, uOutBuffIndex );

	htonFpgaRegArray(regSendBuf, uOutBuffIndex);
	sendRegRequest(regSendBuf, uOutBuffIndex+1);

	if (status)
		epicsSnprintf(pasynUser->errorMessage, pasynUser->errorMessageSize,
				"%s: status=%d, function=%d, sent %s", __PRETTY_FUNCTION__,
				status, function, paramName);
	else
		asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "%s: function=%d, sent %s\n",
				__PRETTY_FUNCTION__, function, paramName);

	return status; //(writeArray < epicsInt32 > (pasynUser, value, nElements));
}



static void waveformRequesterC(void *drvPvt)
{
	printf("%s: starting\n", __PRETTY_FUNCTION__);
	scllrfPRCextra *pscllrfDriver = (scllrfPRCextra*)drvPvt;
	pscllrfDriver->waveformRequester();
	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}

/** Starts the poller thread.
 ** Derived classes will typically call this at near the end of their constructor.
 ** Derived classes can typically use the base class implementation of the poller thread,
 ** but are free to re-implement it if necessary.
 ** \param[in] pollPeriod The time between polls. */
asynStatus scllrfPRCextra::startWaveformRequester()
{
	epicsThreadCreate("waveformRequester",
			epicsThreadPriorityMedium,
			epicsThreadGetStackSize(epicsThreadStackMedium),
			(EPICSTHREADFUNC)waveformRequesterC, (void *)this);
	return asynSuccess;
}

// When a new value for npt_ (number of points in each waveform) is calculated,
// run this to compose new waveform request messages with the new size.
void scllrfPRCextra::fillWavReqMsg()
{
	int i, segmentNum, segmentOffset;
	unsigned int addr=0, segStartAddr = wavesStart;
	FpgaReg reqWaveMsg[waveSegmentCount][waveSegmentSize];

	for(i = 0; i<4; i++)
	{
		segmentNum = 0;
		segmentOffset = 1; // Start data past the nonce
		reqWaveMsg[segmentNum][0] = {0,0};
//		printf("\n%s filling waveform request %d: [%u][%u]={0x%x,0x%x}", __PRETTY_FUNCTION__, i, segmentNum, 0,
//				addr, reqWaveMsg[segmentNum][0].data);
		for (addr = segStartAddr; addr < segStartAddr+npt_; addr++, segmentOffset++)
		{
			reqWaveMsg[segmentNum][segmentOffset].addr = (uint32_t) (addr | flagReadMask);
			reqWaveMsg[segmentNum][segmentOffset].data = blankData + addr;
//			printf(", [%u][%u]={0x%x,0x%x}", segmentNum, segmentOffset,
//					addr, reqWaveMsg[segmentNum][segmentOffset].data);

			// If there's more to send than will fit in the max message size, break
			// it up into chunks and send each chunk individually
			if(segmentOffset == maxMsgSize/sizeof(FpgaReg)-1)
			{
				segmentNum++;
				reqWaveMsg[segmentNum][0] = {0,0};
//				printf(" %lu bytes in this segment.\n", (segmentOffset +1) * sizeof (FpgaReg));
				segmentOffset = 0; // will be incremented to 1 at the top of the loop
//				printf("\nfilling waveform request %d: [%u][%u]={0x0,0x0}", i, segmentNum, segmentOffset);
			}
		}
//		printf(" %lu of %lu bytes filled in this segment.\n",
//				(segmentOffset +1) * sizeof (FpgaReg), waveSegmentSize * sizeof (FpgaReg));

		// Each segment has unused elements at the end. Safest to convert whole thing.
		//printf("\n%s calling htonFpgaRegArray for waveform %u, %u registers\n", __PRETTY_FUNCTION__, i, waveSegmentCount * waveSegmentSize );

		htonFpgaRegArray(reqWaveMsg[0], waveSegmentCount * waveSegmentSize);

		switch (i)
		{
		case 0:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqIQ16bAMsg_[0][0]); // Canned message to request 16 bit I/Q data, first npt_ points
			break;
		case 1:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqIQ16bBMsg_[0][0]); // Canned message to request 16 bit I/Q data, last npt_ points
			break;
		case 2:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqI22bMsg_[0][0]); // Canned message to request 22 bit I data
			break;
		case 3:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+waveSegmentCount * waveSegmentSize,
					&pReqQ22bMsg_[0][0]); // Canned message to request 22 bit Q data
			break;
		}
//		printf("Filled up %d of %d segments, last one with %d points\n",
//				segmentNum, waveSegmentCount, segmentOffset);
//		printf("Setting start address of next waveform segment to 0x%x\n", addr);
		segStartAddr = addr;
	}
}


void scllrfPRCextra::reqOneWaveform(FpgaReg (*readWaveformsMsg)[waveSegmentSize])
{
	int regsLeftToSend = npt_;
	uint i;

//	printf(" --> %s\n", __PRETTY_FUNCTION__);
//	printf("%s waveSegmentSize = %u, waveSegmentCount = %u, regsLeftToSend = %d\n",
//			__PRETTY_FUNCTION__, waveSegmentSize, waveSegmentCount, regsLeftToSend);
//	printf("%s waveBufferRegCount = %u, waveBuffSize = %u, waveSegmentCount = %d\n",
//			__PRETTY_FUNCTION__, waveBufferRegCount, waveBuffSize, waveSegmentCount);
	for (i=0; i<waveSegmentCount; ++i)
	{
		if(regsLeftToSend > (int) (maxMsgSize/sizeof(FpgaReg)))
		{
			sendRegRequest(&readWaveformsMsg[i][0], maxMsgSize/sizeof(FpgaReg));
			regsLeftToSend -= maxMsgSize/sizeof(FpgaReg) - 1;
//			printf("%s sent segment %u, regsLeftToSend = %d\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
		}
		else
		{
			sendRegRequest(&readWaveformsMsg[i][0], regsLeftToSend + 1);
//			printf("%s sent segment %u, last %d registers\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
			break;
		}
	}
//	printf(" <-- %s\n", __PRETTY_FUNCTION__);
}

void scllrfPRCextra::waveformRequester()
{
	epicsEventWaitStatus status;
	static FpgaReg traceAck[] =
	{
			{0,0},
//			{DigDspTraceResetWeWAdr,1},
			{DigDspBufTrigWAdr,0},
			{DigDspBufTrigWAdr,1},
			{DigDspBufTrigWAdr,0}
	};
	//printf("\n%s calling htonFpgaRegArray for %u registers of traceAck\n", __PRETTY_FUNCTION__, 5 );
    htonFpgaRegArray(traceAck, sizeof(traceAck)/sizeof(FpgaReg));

	// Main polling loop
	while (1)
	{
		status = epicsEventWait(reqWaveEventId_);

		if (isShuttingDown_)
		{
			break;
		}

		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: signaled by reqWaveEventId_\n", __PRETTY_FUNCTION__);

		if (status == epicsEventWaitOK)
		{
			/* We got an event, rather than a timeout.
			 **/
			switch (wavBitWidth_)
			{
			case read16bit:
				reqOneWaveform(pReqIQ16bAMsg_);
				reqOneWaveform(pReqIQ16bBMsg_);
				break;
			case read22bit:
				reqOneWaveform(pReqI22bMsg_);
				reqOneWaveform(pReqQ22bMsg_);
				break;
			default:
				printf("%s: impossible bit width\n", __PRETTY_FUNCTION__);
			}

			newWaveRead_ = newWaveAvailable_; // Indicate that we got the signal
			sendRegRequest(traceAck, sizeof(traceAck)/sizeof(FpgaReg));
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: done sending waveform request\n", __PRETTY_FUNCTION__);
		}
	}
//	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}


// parse register data, write to array PV
asynStatus scllrfPRCextra::processWaveReadback(const FpgaReg *pFromFpga)
{
	// avoid divide by 0 errors when waveforms are misconfigured
	if (nchan_ <=0)
	{
		printf("%s can't process waveform data with 0 active channels\n", __PRETTY_FUNCTION__);
		return asynError;
	}
	if (npt_ <=0)
	{
		printf("%s waveform length set to %u but array index is %u\n",
				__PRETTY_FUNCTION__, (unsigned int) npt_, pFromFpga->addr);
		return asynError;
	}

//	printf("--> %s\n", __PRETTY_FUNCTION__);
	unsigned int bufferOffset = (pFromFpga->addr & addrMask) - wavesStart;
	// additional base offsets
	//   0 * npt  16-bit I and Q
	//   1 * npt  16-bit I and Q
	//   2 * npt  22-bit I
	//   3 * npt  22-bit Q
	unsigned int bufferNumber = bufferOffset / npt_; // of the 4 buffers above, which range are we in?
	unsigned int bufferBase = npt_ * bufferNumber; // in bufferNumber, base address offset
	unsigned int waveOffset = (bufferOffset - bufferBase);
	unsigned int waveNumber = waveOffset % nchan_;
	unsigned int waveIndex = waveOffset / nchan_;
	unsigned int i;
//	printf("%s bufferOffset = %u, npt_ = %u, waveNumber = %u waveIndex =%u\n", __PRETTY_FUNCTION__, bufferOffset, npt_, waveNumber, waveIndex);

	switch (bufferNumber)
	{
	case 0: //TODO: verify the packing of the bits for 16 bit data
		pWave16bitI_[waveNumber][waveIndex] = (epicsInt16) pFromFpga->data;
		pWave16bitQ_[waveNumber][waveIndex] = (epicsInt16) (pFromFpga->data >> 16);
		break;

	case 1:
		waveIndex += npt_; // continued from addresses in "case 0"
		pWave16bitI_[waveNumber][waveIndex] = (epicsInt16) pFromFpga->data;
		pWave16bitQ_[waveNumber][waveIndex] = (epicsInt16) (pFromFpga->data >> 16);
		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ16BitNELM, npt_ * 2/nchan_);
			for (i=0; i<8; ++i)
			{
				if(i<nchan_)
				{
					doCallbacksInt16Array(pWave16bitI_[i], 2*npt_/nchan_, p_WaveformI16Bit, i);
					doCallbacksInt16Array(pWave16bitQ_[i], 2*npt_/nchan_, p_WaveformQ16Bit, i);
				} else { // clear inactive channels
					doCallbacksInt16Array(pWave16bitI_[i], 0, p_WaveformI16Bit, i);
					doCallbacksInt16Array(pWave16bitQ_[i], 0, p_WaveformQ16Bit, i);
				}
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	case 2:
		pWave22bitI_[waveNumber][waveIndex] = (epicsInt32) pFromFpga->data;

		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ22BitNELM, npt_/nchan_);
			for (i=0; i<8; ++i)
			{
				if(i<nchan_)
				{
					doCallbacksInt32Array(pWave22bitI_[i], npt_/nchan_, p_WaveformI22Bit, i);
				} else { // clear inactive channels
					doCallbacksInt32Array(pWave22bitI_[i], 0, p_WaveformI22Bit, i);
				}
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	case 3:
		pWave22bitQ_[waveNumber][waveIndex] = (epicsInt32) pFromFpga->data;
		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ22BitNELM, npt_/nchan_);
			for (i=0; i<8; ++i)
			{
				if(i<nchan_)
				{
					doCallbacksInt32Array(pWave22bitQ_[i], npt_/nchan_, p_WaveformQ22Bit, i);
				} else { // clear inactive channels
					doCallbacksInt32Array(pWave22bitQ_[i], 0, p_WaveformQ22Bit, i);
				}
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	}

//	printf("<-- %s\n", __PRETTY_FUNCTION__);
	return asynSuccess;
}

//asynStatus scllrfPRC::catGitSHA1()
//{
//	int oneByte;
//	int i;
//	asynStatus status;
//
//	strGitSHA1.str("");
//	strGitSHA1.clear();
//	strGitSHA1<<std::hex;
//
////	for (i=p_GitSHA1a; i<=p_GitSHA1t; i++)
////	{
////		status = (asynStatus) getIntegerParam(i, &oneByte);
////		strGitSHA1<< std::setw(2) << oneByte;
////	}
////	// used with stringin reccord, which unfortunately can only handle 19 of the 20 characters
////	status = setStringParam(p_GitSHA1, strGitSHA1.str().c_str());
//
//	return asynSuccess;
//}

/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCextra::processRegReadback(const FpgaReg *pFromFpga, bool &waveIsReady)
{
//	unsigned int i;
	asynStatus status = asynSuccess;
	assert(pFromFpga->addr&flagReadMask); // This function is only for read registers
	epicsInt32 errorCount;
	epicsInt32 tmpData;
	int32_t signExtBits = 0;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case TraceStatus1RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceStatus1R,
				(pFromFpga->data & TraceStatus1Mask));
		if (pFromFpga->data & waveIsReadyMask)
		{
			waveIsReady = true;
		}
		// Calculate number of points per waveform, and update request
		// waveform messages if it has changed.
		if(npt_ != (size_t) (1 << ((pFromFpga->data & nptMask)>> 24)))
		{
			npt_ = 1 << ((pFromFpga->data & nptMask)>> 24);
			if(npt_ > waveSegmentCount * (waveSegmentSize - 1)) // protect against register saying more points than buffer space
			{
				npt_ = waveSegmentCount * (waveSegmentSize - 1);
			}
			fillWavReqMsg();
		}
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus1RString,
				(unsigned ) pFromFpga->data & TraceStatus1Mask);
	break;

    case DigDspTraceKeepRAdr|flagReadMask:
	tmpData = pFromFpga->data & DigDspTraceKeepMask;
//    printf("%s got data 0x%x for DigDspTraceKeepRAdr\n",__PRETTY_FUNCTION__,tmpData);
		status = (asynStatus) setIntegerParam(p_DigDspTraceKeepR,
				(pFromFpga->data & DigDspTraceKeepMask));
		// Count the number of bits set
		for (nchan_ = 0; tmpData; nchan_++)
		{
		  tmpData &= tmpData - 1; // clear the least significant bit set
		}
		setIntegerParam(p_IQNActive, nchan_);
//	    printf("%s DigDspTraceKeepRAdr says %d active channels\n",__PRETTY_FUNCTION__,nchan_);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepRString,
				(unsigned ) pFromFpga->data & DigDspTraceKeepMask);
	break;

	default:
		if( wavesStart <= (pFromFpga->addr & addrMask) && (pFromFpga->addr & addrMask) <= wavesEnd )
		{
//			printf("%s waveform addres 0x%x, value %d\n", __PRETTY_FUNCTION__, (pFromFpga->addr & addrMask), pFromFpga->data);
			processWaveReadback(pFromFpga);
		}
		else
		{
			status = scllrfPRCDriver::processRegWriteResponse(pFromFpga);
		}
		break;
    }

    return status;
}


/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCextra::processRegWriteResponse(const FpgaReg *pFromFpga)
{
	asynStatus status = asynSuccess;
	epicsInt32 valueSet[maxMsgSize/sizeof(FpgaReg)]; // Put the value sent to the FPGA here for comparison
//	epicsUInt32 uValueSet;
	epicsInt32 tmpData;
	epicsInt32 errorCount;
//  variables that may be useful for checking array data
//	asynUser *pAsynArrayUser;
//	unsigned int i;
	assert(!(pFromFpga->addr&flagReadMask)); // This function is only for read registers

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case DigDspBufTrigWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspBufTrigW, valueSet);
		if( (valueSet[0] & DigDspBufTrigMask) == (pFromFpga->data & DigDspBufTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspBufTrigWString, (unsigned ) pFromFpga->data & DigDspBufTrigMask);
		else
		{
			// We don't care, since this is typically part of a canned sequence of writes
		}

		break;
    case DigDspTraceKeepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTraceKeepW, valueSet);
		if( (valueSet[0] & DigDspTraceKeepMask) == (pFromFpga->data & DigDspTraceKeepMask))
		{		// Count the number of bits set
			tmpData = (pFromFpga->data & DigDspTraceKeepMask);
			for (nchan_ = 0; tmpData; nchan_++)
			{
			  tmpData &= tmpData - 1; // clear the least significant bit set
			}
			setIntegerParam(p_IQNActive, nchan_);
		    printf("%s DigDspTraceKeepWAdr says %d active channels\n",__PRETTY_FUNCTION__,nchan_);

			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
		}
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, valueSet[0] & DigDspTraceKeepMask, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
			status = asynError;
			setParamStatus(p_DigDspTraceKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTraceResetWeWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTraceResetWeW, valueSet);
		if( (valueSet[0] & DigDspTraceResetWeMask) == (pFromFpga->data & DigDspTraceResetWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceResetWeWString, (unsigned ) pFromFpga->data & DigDspTraceResetWeMask);
		else
		{
			// We don't care, since there are typically several writes to this per message: 0, 1, 0
		}

		break;
	default:
// TODO: Add checking for arrays. Until then, we'll hit "default" for array values, so not really an error. GWB 8-23-2016
//		getIntegerParam(p_CommErrorCount, &errorCount);
//		setIntegerParam(p_CommErrorCount, errorCount + 1);
		status = scllrfPRCDriver::processRegWriteResponse(pFromFpga);
		
		break;
    }

	// TODO: handle arrays

    return status;
}



extern "C" {

/* Configuration routine.  Called directly, or from the iocsh function below */

/** EPICS iocsh callable function to call constructor for the scllrfPRC class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asynIPport this will use to communicate */
int scllrfPRCextraConfigure(const char *drvPortName, const char *netPortName)
{
	new scllrfPRCextra(drvPortName, netPortName);
	return asynSuccess;
}


/* EPICS iocsh shell commands */

static const iocshArg initArg0 = { "drvPortName",iocshArgString};
static const iocshArg initArg1 = { "IP port name",iocshArgString};
static const iocshArg * const initArgs[] = {&initArg0,
		&initArg1};

/* NOTE: The command name defined below, "scllrfPRCConfigure", conflicts
 * with the same command defined in the base class if both register functions
 * are left in the dbd file. If it's renamed here, it breaks the macro definition
 * scheme used in iocBoot/common/regInterface.cmd. Is there a better way to resolve
 * the conflict than this duplicate name and leaving scllrfPRCRegister out of the
 * dbd file?
 */
static const iocshFuncDef initFuncDef = {"scllrfPRCConfigure",2,initArgs};
static void initCallFunc(const iocshArgBuf *args)
{
	scllrfPRCextraConfigure(args[0].sval, args[1].sval);
}

void scllrfPRCextraRegister(void)
{
	iocshRegister(&initFuncDef,initCallFunc);
}

epicsExportRegistrar(scllrfPRCextraRegister);

}



