
/**
 *-----------------------------------------------------------------------------
 * Title      : superconducting low level RF EPICS interface
 * ----------------------------------------------------------------------------
 * File       : scllrfAsynPortDriver.cpp
 * Author     : Garth Brown, gwbrown@slac.stanford.edu
 * Created    : June 17, 2016
 * Last update: September 6, 2016
 * ----------------------------------------------------------------------------
 * Description:
 * Prototype for FPGA register access to FPGAs using protocol defined in papers
 * given to SLAC by LBNL (Larry Doolittle). Uses asynPortDriver interface. Some of this
 * should eventually be autogenerated from json files or some such, and templates.
 *
 * ----------------------------------------------------------------------------
 * This file is part of LCLS II. It is subject to
 * the license terms in the LICENSE.txt file found in the top-level directory
 * of this distribution and at:
    * https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
 * No part of LCLS II, including this file, may be
 * copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE.txt file.
 * ----------------------------------------------------------------------------
**/

#include "scllrfPRCextra.h"

#include <asynOctetSyncIO.h>
#include <asynCommonSyncIO.h>
#include <limits>
#include <netinet/in.h>
#include <iostream>
using namespace std;
#include <math.h>

/** Constructor for the scllrfPRC class.
 * Calls constructor for the asynPortDriver base class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] path The path to the peripherial as built by the builder api
 * \param[in] nelms The number of elements of this device (max addr)
 * \paarm[in] nEntries The number of asyn params to be created for each device
 *
 * */
scllrfPRCextra::scllrfPRCextra(const char *drvPortName, const char *netPortName)
: scllrfPRCDriver(drvPortName, netPortName, maxChannel, NUM_SCLLRFPRCEXTRA_PARAMS),
	newCircIQBufAvailable_(0), newCircIQBufRead_ (0)
{
    createParam(WaveformI16BitString, asynParamInt16Array, &p_WaveformI16Bit);
    createParam(WaveformQ16BitString, asynParamInt16Array, &p_WaveformQ16Bit);
    createParam(WaveformI22BitString, asynParamInt32Array, &p_WaveformI22Bit);
    createParam(WaveformQ22BitString, asynParamInt32Array, &p_WaveformQ22Bit);

    createParam(WaveformA16BitString, asynParamInt16Array, &p_WaveformA16Bit);
    createParam(WaveformP16BitString, asynParamInt16Array, &p_WaveformP16Bit);
    createParam(WaveformA22BitString, asynParamInt32Array, &p_WaveformA22Bit);
    createParam(WaveformP22BitString, asynParamInt32Array, &p_WaveformP22Bit);

    createParam(IQNActiveString, asynParamInt32, &p_IQNActive);
    createParam(IQBitWidthString, asynParamInt32, &p_IQBitWidth);
    createParam(IQ16BitNELMString, asynParamInt32, &p_IQ16BitNELM);
    createParam(IQ22BitNELMString, asynParamInt32, &p_IQ22BitNELM);

    // Circle Buffer waveforms

    createParam(Circ0NActiveString, asynParamInt32, &p_Circ0NActive);
    createParam(Circ1NActiveString, asynParamInt32, &p_Circ1NActive);
    createParam(CircIQBuf0IString, asynParamInt32Array, &p_CircIQBuf0I);
    createParam(CircIQBuf0QString, asynParamInt32Array, &p_CircIQBuf0Q);
    createParam(CircIQBuf0AString, asynParamInt32Array, &p_CircIQBuf0A);
    createParam(CircIQBuf0PString, asynParamInt32Array, &p_CircIQBuf0P);
    createParam(CircIQBuf1IString, asynParamInt32Array, &p_CircIQBuf1I);
    createParam(CircIQBuf1QString, asynParamInt32Array, &p_CircIQBuf1Q);
    createParam(CircIQBuf1AString, asynParamInt32Array, &p_CircIQBuf1A);
    createParam(CircIQBuf1PString, asynParamInt32Array, &p_CircIQBuf1P);

    // A canned request to read all registers
    static const FpgaReg pCustomPolledRegMsg[] =
	{
		{ 0, 0 },
		{ (flagReadMask | HellRAdr), blankData },
		{ (flagReadMask | OWoRAdr), blankData },
		{ (flagReadMask | RldRAdr), blankData },
		{ (flagReadMask | D0A0D0ARAdr), blankData },
		{ (flagReadMask | ClkStatusOutRAdr), blankData },
		{ (flagReadMask | FfffffffRAdr), blankData },
		{ (flagReadMask | FrequencyAdcRAdr), blankData },
		{ (flagReadMask | Frequency4XoutRAdr), blankData },
		{ (flagReadMask | FrequencyClkout3RAdr), blankData },
		{ (flagReadMask | FrequencyDcoRAdr), blankData },
		{ (flagReadMask | Wave0OutRAdr), blankData },
		{ (flagReadMask | Wave1OutRAdr), blankData },
		{ (flagReadMask | AdcTestWave1OutRAdr), blankData },
		{ (flagReadMask | AdcTestWave2OutRAdr), blankData },
		{ (flagReadMask | AdcTestWave3OutRAdr), blankData },
		{ (flagReadMask | AdcTestWave4OutRAdr), blankData },
		{ (flagReadMask | CtraceRunningRAdr), blankData },
		{ (flagReadMask | FrequencyGtxTxRAdr), blankData },
		{ (flagReadMask | FrequencyGtxRxRAdr), blankData },
		{ (flagReadMask | HistStatusRAdr), blankData },
		{ (flagReadMask | PhasexStatusRAdr), blankData },
		{ (flagReadMask | CrcErrorsRAdr), blankData },
		{ (flagReadMask | AdcTestTrigCntRAdr), blankData },
		{ (flagReadMask | WaveformsAvailableRAdr), blankData },
		{ (flagReadMask | BanyanStatusRAdr), blankData },
		{ (flagReadMask | SlowChainOutRAdr), blankData },
		{ (flagReadMask | TraceStatus1RAdr), blankData },
		{ (flagReadMask | TraceStatus2RAdr), blankData },
		{ (flagReadMask | LlrfCircleReadyRAdr), blankData },
		{ (flagReadMask | IdelayBaseRAdr), blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 1, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 2, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 3, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 4, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 5, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 6, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 7, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 8, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 9, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 10, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 11, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 12, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 13, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 14, blankData },
		{ (flagReadMask | IdelayBaseRAdr) + 15, blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr) + 4, blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr) + 5, blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr) + 6, blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoSfConstsRAdr) + 7, blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr) + 4, blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr) + 5, blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr) + 6, blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoSfConstsRAdr) + 7, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcCoeffRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcCoeffRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcCoeffRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcCoeffRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcLimRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcLimRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcLimRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcLimRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcSetmpRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcSetmpRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcSetmpRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcSetmpRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcCoeffRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcCoeffRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcCoeffRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcCoeffRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcLimRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcLimRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcLimRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcLimRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcSetmpRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcSetmpRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcSetmpRAdr) + 2, blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcSetmpRAdr) + 3, blankData },
		{ (flagReadMask | DigDspMuxC0ElecDriveCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecDriveCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC0ElecDriveCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecDriveCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC0ElecM0OutCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM0OutCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC0ElecM0OutCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM0OutCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC0ElecM1OutCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM1OutCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC0ElecM1OutCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM1OutCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC0ElecM2OutCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM2OutCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC0ElecM2OutCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM2OutCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecDriveCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecDriveCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecDriveCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecDriveCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecM0OutCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM0OutCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecM0OutCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM0OutCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecM1OutCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM1OutCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecM1OutCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM1OutCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecM2OutCplOutCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM2OutCplOutCouplingRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxC1ElecM2OutCplOutPhaseOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM2OutCplOutPhaseOffsetRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1AKxRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1AKxRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1AKyRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1AKyRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1BKxRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1BKxRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1BKyRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspLpNotchLp1BKyRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1AKxRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1AKxRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1AKyRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1AKyRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1BKxRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1BKxRAdr) + 1, blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1BKyRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspLpNotchLp1BKyRAdr) + 1, blankData },
		{ (flagReadMask | AdcMmcmRAdr), blankData },
		{ (flagReadMask | DigConfigBanyanMaskRAdr), blankData },
		{ (flagReadMask | DigConfigBitslipRAdr), blankData },
		{ (flagReadMask | DigConfigClkStatusWeRAdr), blankData },
		{ (flagReadMask | DigConfigIdelayctrlResetRRAdr), blankData },
		{ (flagReadMask | DigConfigMmcmResetRRAdr), blankData },
		{ (flagReadMask | DigConfigPeriphConfigRAdr), blankData },
		{ (flagReadMask | DigConfigPhasexTrigRAdr), blankData },
		{ (flagReadMask | DigConfigRawadcTrigRAdr), blankData },
		{ (flagReadMask | DigConfigScanTriggerWeRAdr), blankData },
		{ (flagReadMask | DigConfigScannerDebugRAdr), blankData },
		{ (flagReadMask | DigConfigSyncAd7794CsetRAdr), blankData },
		{ (flagReadMask | DigConfigSyncTps62210CsetRAdr), blankData },
		{ (flagReadMask | DigDspAdcTestModeRAdr), blankData },
		{ (flagReadMask | DigDspAdcTestResetRAdr), blankData },
		{ (flagReadMask | DigDspAmplitudeRAdr), blankData },
		{ (flagReadMask | DigDspAverageLenRAdr), blankData },
		{ (flagReadMask | DigDspBufTrigRAdr), blankData },
		{ (flagReadMask | DigDspCicPeriodRAdr), blankData },
		{ (flagReadMask | DigDspCicShiftRAdr), blankData },
		{ (flagReadMask | DigDspCircleBufFlipRAdr), blankData },
		{ (flagReadMask | DigDspDacDdsResetRAdr), blankData },
		{ (flagReadMask | DigDspDacModeRAdr), blankData },
		{ (flagReadMask | DigDspDdsaModuloRAdr), blankData },
		{ (flagReadMask | DigDspDdsaPhstepHRAdr), blankData },
		{ (flagReadMask | DigDspDdsaPhstepLRAdr), blankData },
		{ (flagReadMask | DigDspHistCountWStrobeRAdr), blankData },
		{ (flagReadMask | DigDspLlrfDspDacEnRAdr), blankData },
		{ (flagReadMask | DigDspLoAmpRAdr), blankData },
		{ (flagReadMask | DigDspModuloRAdr), blankData },
		{ (flagReadMask | DigDspPhaseStepHRAdr), blankData },
		{ (flagReadMask | DigDspPhaseStepLRAdr), blankData },
		{ (flagReadMask | DigDspPrcDspCavSelRAdr), blankData },
		{ (flagReadMask | DigDspPrcDspPrlCfgRAdr), blankData },
		{ (flagReadMask | DigDspPrcDspPrlGainRAdr), blankData },
		{ (flagReadMask | DigDspMuxBeam0ModuloRAdr), blankData },
		{ (flagReadMask | DigDspMuxBeam0PhaseInitRAdr), blankData },
		{ (flagReadMask | DigDspMuxBeam0PhaseStepRAdr), blankData },
		{ (flagReadMask | DigDspMuxBeam1ModuloRAdr), blankData },
		{ (flagReadMask | DigDspMuxBeam1PhaseInitRAdr), blankData },
		{ (flagReadMask | DigDspMuxBeam1PhaseStepRAdr), blankData },
		{ 0, 0 }, // This should stay on line 255, 175 registers from the start of this structure on line 80
		{ (flagReadMask | DigDspMuxCav4MechPrngIvaRAdr), blankData },
		{ (flagReadMask | DigDspMuxCav4MechPrngIvbRAdr), blankData },
		{ (flagReadMask | DigDspMuxCav4MechPrngRandomRunRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ACavOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0AForOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ARflOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0AmpLpBwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecFreq0CoarseFreqRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecFreq1CoarseFreqRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecFreq2CoarseFreqRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM0BeamCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM0BwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM0DriveCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM1BeamCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM1BwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM1DriveCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM2BeamCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM2BwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecM2DriveCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecModuloRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ElecPhaseStepRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0ComprSatCtlRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0PrngIvaRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0PrngIvbRAdr), blankData },
		{ (flagReadMask | DigDspMuxC0PrngRandomRunRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ACavOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1AForOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ARflOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1AmpLpBwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecFreq0CoarseFreqRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecFreq1CoarseFreqRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecFreq2CoarseFreqRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM0BeamCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM0BwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM0DriveCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM1BeamCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM1BwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM1DriveCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM2BeamCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM2BwRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecM2DriveCouplingRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecModuloRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ElecPhaseStepRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1ComprSatCtlRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1PrngIvaRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1PrngIvbRAdr), blankData },
		{ (flagReadMask | DigDspMuxC1PrngRandomRunRAdr), blankData },
		{ (flagReadMask | DigDspMuxDacIqPhaseRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspChanKeepRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreCoarseScaleRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcPhOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcSelEnRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0FdbkCoreMpProcSelThreshRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspModuloRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspPhaseStepRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspPiezoPiezoDcRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspTagRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspUseFiberIqRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspWaveSampPerRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell0DspWaveShiftRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspChanKeepRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreCoarseScaleRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcPhOffsetRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcSelEnRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1FdbkCoreMpProcSelThreshRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspModuloRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspPhaseStepRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspPiezoPiezoDcRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspTagRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspUseFiberIqRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspWaveSampPerRAdr), blankData },
		{ (flagReadMask | DigDspMuxShell1DspWaveShiftRAdr), blankData },
		{ (flagReadMask | DigDspRewindRAdr), blankData },
		{ (flagReadMask | DigDspSsaStimAmpstepRAdr), blankData },
		{ (flagReadMask | DigDspSsaStimEnRAdr), blankData },
		{ (flagReadMask | DigDspSsaStimGPeriodRAdr), blankData },
		{ (flagReadMask | DigDspSsaStimPertstepRAdr), blankData },
		{ (flagReadMask | DigDspTraceKeepRAdr), blankData },
		{ (flagReadMask | DigDspTraceResetWeRAdr), blankData },
		{ (flagReadMask | DigDspTrigInternalRAdr), blankData },
		{ (flagReadMask | DigDspTrigModeRAdr), blankData },
		{ (flagReadMask | DigDspWave0SrcRAdr), blankData },
		{ (flagReadMask | DigDspWave1SrcRAdr), blankData },
		{ (flagReadMask | DomainJumpRealignRAdr), blankData },
		{ (flagReadMask | IccCfgRAdr), blankData },
		{ (flagReadMask | QsfpI2CRegRAdr), blankData },
		{ (flagReadMask | SfpAddressSetRAdr), blankData },
		{ (flagReadMask | TagNowRAdr), blankData },
	};//pCustomPolledRegMsg

    PolledRegMsgSize_ = sizeof( pCustomPolledRegMsg )/sizeof( *pCustomPolledRegMsg);

    if (pPolledRegMsg_ != NULL)
    {
    	printf("%s rejects the base class's message and replaces it with its own.\n",__PRETTY_FUNCTION__);
    	delete[] pPolledRegMsg_;
    	pPolledRegMsg_ = new FpgaReg[sizeof( pCustomPolledRegMsg )/sizeof( *pCustomPolledRegMsg)];
//        std::copy( pCustomPolledRegMsg, pCustomPolledRegMsg + sizeof( pCustomPolledRegMsg )/sizeof( *pCustomPolledRegMsg), (FpgaReg) pPolledRegMsg_ );
        for(int i = 0; i<PolledRegMsgSize_; i++)
        	{
        	pPolledRegMsg_[i] = pCustomPolledRegMsg[i];
        	std::cout << std::hex << "{ 0x" << pCustomPolledRegMsg[i].addr << ", 0x"  << pCustomPolledRegMsg[i].data << "} --> ";
        	std::cout << std::hex << "{ 0x" << pPolledRegMsg_[i].addr << ", 0x"  << pPolledRegMsg_[i].data << "}, ";
        	}
        std::cout << std::endl;
    }

    std::cout << "polled register msg size is " << PolledRegMsgSize_ << std::endl;
	htonFpgaRegArray(pPolledRegMsg_, PolledRegMsgSize_);

    epicsThreadSleep(defaultPollPeriod);
    std::cout << __PRETTY_FUNCTION__ << " created " << NUM_SCLLRFPRCEXTRA_PARAMS << " parameters." << std::endl;

	reqWaveEventId_ = epicsEventMustCreate(epicsEventEmpty);
	startTraceIQWaveformRequester();

	reqCircIQBufEventId_ = epicsEventMustCreate(epicsEventEmpty);
	startCircIQBufRequester();

	singleMsgQueueEventId_ = epicsEventMustCreate(epicsEventEmpty);
	startSingleMessageQueuer();

    epicsThreadSleep(defaultPollPeriod);
    wakeupPoller();
    wakeupReader();
}

scllrfPRCextra::~scllrfPRCextra()
{
	isShuttingDown_ = true;
	epicsThreadSleep(0.1); // Allow threads to run and exit
	epicsEventSignal(reqWaveEventId_);
	wakeupPoller();
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupPoller(); // call this twice in case the poller was never set to run
	wakeupReader();
	epicsThreadSleep(0.1); // Allow threads to run and exit
	wakeupReader();
	pasynOctetSyncIO->disconnect(pOctetAsynUser_);
	pasynCommonSyncIO->disconnectDevice(pCommonAsynUser_);
	pasynCommonSyncIO->disconnect(pCommonAsynUser_);
}


/** Called when asyn clients call pasynInt32->read().
 * \param[in] pasynUser pasynUser structure that encodes the reason and address.
 * \param[in] value Pointer to the value to read. */
asynStatus scllrfPRCextra::writeInt32(asynUser *pasynUser, epicsInt32 value)
{
	int function = pasynUser->reason;
//	int addr = 0;
	asynStatus status = asynSuccess;
    const char *paramName;
//    FpgaReg regSendBuf[2];

	epicsTimeStamp timeStamp; getTimeStamp(&timeStamp);

    /* Fetch the parameter string name for possible use in debugging */
    getParamName(function, &paramName);
    asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, "--> %s: function=%d, %s, set to %d\n",
			__PRETTY_FUNCTION__, function, paramName, value);

    if (function == p_IQBitWidth)
    {
    	wavBitWidth_ = (scllrfPRCextra::traceIQWavBitWidth) value;
        /* Set the parameter in the parameter library. */
        status = (asynStatus) setIntegerParam(function, value);
    }

    scllrfAsynPortDriver::writeInt32(pasynUser, value);

	/* Do callbacks so higher layers see any changes */
	status = (asynStatus) callParamCallbacks();

    if (status)
        epicsSnprintf(pasynUser->errorMessage, pasynUser->errorMessageSize,
                  "%s: status=%d, function=%d, name=%s, value=%d",
				  __PRETTY_FUNCTION__, status, function, paramName, value);
    else
        asynPrint(pasynUser, ASYN_TRACEIO_DRIVER,
              "<-- %s: function=%d, name=%s, value=%d\n",
			  __PRETTY_FUNCTION__, function, paramName, value);
    return status;
}


static void waveformRequesterC(void *drvPvt)
{
	printf("%s: starting\n", __PRETTY_FUNCTION__);
	scllrfPRCextra *pscllrfDriver = (scllrfPRCextra*)drvPvt;
	pscllrfDriver->traceIQWaveformRequester();
	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}

/** Starts the poller thread.
 ** Derived classes will typically call this at near the end of their constructor.
 ** Derived classes can typically use the base class implementation of the poller thread,
 ** but are free to re-implement it if necessary.
 ** \param[in] pollPeriod The time between polls. */
asynStatus scllrfPRCextra::startTraceIQWaveformRequester()
{
	epicsThreadCreate("waveformRequester",
			epicsThreadPriorityMedium,
			epicsThreadGetStackSize(epicsThreadStackMedium),
			(EPICSTHREADFUNC)waveformRequesterC, (void *)this);
	return asynSuccess;
}

// When a new value for npt_ (number of points in each waveform) is calculated,
// run this to compose new waveform request messages with the new size.
void scllrfPRCextra::fillTraceIQWavReqMsg()
{
	int i, segmentNum, segmentOffset;
	unsigned int addr=0, segStartAddr = traceIQWavesStart;
	FpgaReg reqWaveMsg[traceIQWaveSegmentCount][traceIQWaveSegmentSize];

	for(i = 0; i<4; i++)
	{
		segmentNum = 0;
		segmentOffset = 1; // Start data past the nonce
		reqWaveMsg[segmentNum][0] = {0,0};
//		printf("\n%s filling waveform request %d: [%u][%u]={0x%x,0x%x}", __PRETTY_FUNCTION__, i, segmentNum, 0,
//				addr, reqWaveMsg[segmentNum][0].data);
		for (addr = segStartAddr; addr < segStartAddr+npt_; addr++, segmentOffset++)
		{
			reqWaveMsg[segmentNum][segmentOffset].addr = (uint32_t) (addr | flagReadMask);
			reqWaveMsg[segmentNum][segmentOffset].data = blankData + addr;
//			printf(", [%u][%u]={0x%x,0x%x}", segmentNum, segmentOffset,
//					addr, reqWaveMsg[segmentNum][segmentOffset].data);

			// If there's more to send than will fit in the max message size, break
			// it up into chunks and send each chunk individually
			if(segmentOffset == maxMsgSize/sizeof(FpgaReg)-1)
			{
				segmentNum++;
				reqWaveMsg[segmentNum][0] = {0,0};
//				printf(" %lu bytes in this segment.\n", (segmentOffset +1) * sizeof (FpgaReg));
				segmentOffset = 0; // will be incremented to 1 at the top of the loop
//				printf("\nfilling waveform request %d: [%u][%u]={0x0,0x0}", i, segmentNum, segmentOffset);
			}
		}
//		printf(" %lu of %lu bytes filled in this segment.\n",
//				(segmentOffset +1) * sizeof (FpgaReg), waveSegmentSize * sizeof (FpgaReg));

		// Each segment has unused elements at the end. Safest to convert whole thing.
		//printf("\n%s calling htonFpgaRegArray for waveform %u, %u registers\n", __PRETTY_FUNCTION__, i, waveSegmentCount * waveSegmentSize );

		htonFpgaRegArray(reqWaveMsg[0], traceIQWaveSegmentCount * traceIQWaveSegmentSize);

		switch (i)
		{
		case 0:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+traceIQWaveSegmentCount * traceIQWaveSegmentSize,
					&pReqIQ16bAMsg_[0][0]); // Canned message to request 16 bit I/Q data, first npt_ points
			break;
		case 1:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+traceIQWaveSegmentCount * traceIQWaveSegmentSize,
					&pReqIQ16bBMsg_[0][0]); // Canned message to request 16 bit I/Q data, last npt_ points
			break;
		case 2:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+traceIQWaveSegmentCount * traceIQWaveSegmentSize,
					&pReqI22bMsg_[0][0]); // Canned message to request 22 bit I data
			break;
		case 3:
			std::copy(&reqWaveMsg[0][0], &reqWaveMsg[0][0]+traceIQWaveSegmentCount * traceIQWaveSegmentSize,
					&pReqQ22bMsg_[0][0]); // Canned message to request 22 bit Q data
			break;
		}
//		printf("Filled up %d of %d segments, last one with %d points\n",
//				segmentNum, waveSegmentCount, segmentOffset);
//		printf("Setting start address of next waveform segment to 0x%x\n", addr);
		segStartAddr = addr;
	}
}


void scllrfPRCextra::reqTraceIQWWaveform(FpgaReg (*readWaveformsMsg)[traceIQWaveSegmentSize])
{
	int regsLeftToSend = npt_;
	uint i;

//	printf(" --> %s\n", __PRETTY_FUNCTION__);
//	printf("%s waveSegmentSize = %u, waveSegmentCount = %u, regsLeftToSend = %d\n",
//			__PRETTY_FUNCTION__, waveSegmentSize, waveSegmentCount, regsLeftToSend);
//	printf("%s waveBufferRegCount = %u, waveBuffSize = %u, waveSegmentCount = %d\n",
//			__PRETTY_FUNCTION__, waveBufferRegCount, waveBuffSize, waveSegmentCount);
	for (i=0; i<traceIQWaveSegmentCount; ++i)
	{
		if(regsLeftToSend > (int) (maxMsgSize/sizeof(FpgaReg)))
		{
			sendRegRequest(&readWaveformsMsg[i][0], maxMsgSize/sizeof(FpgaReg));
			regsLeftToSend -= maxMsgSize/sizeof(FpgaReg) - 1;
//			printf("%s sent segment %u, regsLeftToSend = %d\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
		}
		else
		{
			sendRegRequest(&readWaveformsMsg[i][0], regsLeftToSend + 1);
//			printf("%s sent segment %u, last %d registers\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
			break;
		}
	}
//	printf(" <-- %s\n", __PRETTY_FUNCTION__);
}

void scllrfPRCextra::traceIQWaveformRequester()
{
	epicsEventWaitStatus status;
	FpgaReg traceAck[5] =
	{
			{0,0},
			{DigDspTraceResetWeWAdr,1},
			{DigDspBufTrigWAdr,0},
			{DigDspBufTrigWAdr,1},
			{DigDspBufTrigWAdr,0}
	};

//	FpgaReg traceAck[5] =
//	{
//			{0,0},
//			{DigDspCircleBufFlipWAdr,1},
//			{DigDspCircleBufFlipWAdr,2},
//			{DigDspCircleBufFlipRAdr | flagReadMask,1},
//			{DigDspCircleBufFlipRAdr | flagReadMask,2},
//	};
	//printf("\n%s calling htonFpgaRegArray for %u registers of traceAck\n", __PRETTY_FUNCTION__, 5 );
    htonFpgaRegArray(traceAck, sizeof(traceAck)/sizeof(FpgaReg));
    //htonFpgaRegArray(traceAck, 5);
    sendRegRequest(traceAck, sizeof(traceAck)/sizeof(FpgaReg));

	// Main polling loop
	while (1)
	{
		status = epicsEventWait(reqWaveEventId_);

		if (isShuttingDown_)
		{
			break;
		}

		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: signaled by reqWaveEventId_\n", __PRETTY_FUNCTION__);

		// avoid divide by 0 errors when waveforms are inactive
		if (nchan_ <=0 || npt_ <=0)
		{
			epicsThreadSleep(pollPeriod_);
		}
		else {
			/* We got an event, rather than a timeout.
			 **/
			switch (wavBitWidth_)
			{
			case read16bit:
				reqTraceIQWWaveform(pReqIQ16bAMsg_);
				reqTraceIQWWaveform(pReqIQ16bBMsg_);
				break;
			case read22bit:
				reqTraceIQWWaveform(pReqI22bMsg_);
				reqTraceIQWWaveform(pReqQ22bMsg_);
				break;
			default:
				printf("%s: impossible bit width\n", __PRETTY_FUNCTION__);
				break;
			}

			newWaveRead_ = newWaveAvailable_; // Indicate that we got the signal
			sendRegRequest(traceAck, sizeof(traceAck)/sizeof(FpgaReg));
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: done sending waveform request\n", __PRETTY_FUNCTION__);
		}
	}
	//	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}

// parse register data, write to array PV
asynStatus scllrfPRCextra::processTraceIQWaveReadback(const FpgaReg *pFromFpga)
{
	// avoid divide by 0 errors when waveforms are inactive
	if (nchan_ <=0)
	{
//		printf("%s can't process waveform data with 0 active channels\n", __PRETTY_FUNCTION__);
		return asynError;
	}
	if (npt_ <=0)
	{
		printf("%s waveform length set to %u but array index is %u\n",
				__PRETTY_FUNCTION__, (unsigned int) npt_, pFromFpga->addr);
		return asynError;
	}

//	printf("--> %s\n", __PRETTY_FUNCTION__);
	unsigned int bufferOffset = (pFromFpga->addr & addrMask) - traceIQWavesStart;
	// additional base offsets
	//   0 * npt  16-bit I and Q
	//   1 * npt  16-bit I and Q
	//   2 * npt  22-bit I
	//   3 * npt  22-bit Q
	unsigned int bufferNumber = bufferOffset / npt_; // of the 4 buffers above, which range are we in?
	unsigned int bufferBase = npt_ * bufferNumber; // in bufferNumber, base address offset
	unsigned int waveOffset = (bufferOffset - bufferBase);
	unsigned int waveNumber = waveOffset % nchan_;
	unsigned int waveIndex = waveOffset / nchan_;
	unsigned int i;
//	printf("%s bufferOffset = %u, npt_ = %u, waveNumber = %u waveIndex =%u\n", __PRETTY_FUNCTION__, bufferOffset, npt_, waveNumber, waveIndex);

	switch (bufferNumber)
	{
	case 0: //TODO: verify the packing of the bits for 16 bit data
		pWave16bitI_[waveNumber][waveIndex] = (epicsInt16) pFromFpga->data;
		pWave16bitQ_[waveNumber][waveIndex] = (epicsInt16) (pFromFpga->data >> 16);
		// Amplitude = sqrt(I^2+Q^2)
		pWave16bitA_[waveNumber][waveIndex] = (epicsFloat32) sqrt((pWave16bitI_[waveNumber][waveIndex]^2)+(pWave16bitQ_[waveNumber][waveIndex]^2));
		// phase = arctan(Q/I)
		pWave16bitP_[waveNumber][waveIndex] = (epicsFloat32) atan(pWave16bitQ_[waveNumber][waveIndex] / pWave16bitI_[waveNumber][waveIndex]);
		break;

	case 1:
		waveIndex += npt_; // continued from addresses in "case 0"
		pWave16bitI_[waveNumber][waveIndex] = (epicsInt16) pFromFpga->data;
		pWave16bitQ_[waveNumber][waveIndex] = (epicsInt16) (pFromFpga->data >> 16);
		// Amplitude = sqrt(I^2+Q^2)
		pWave16bitA_[waveNumber][waveIndex] = (epicsFloat32) sqrt((pWave16bitI_[waveNumber][waveIndex]^2)+(pWave16bitQ_[waveNumber][waveIndex]^2));
		// phase = arctan(Q/I)
		pWave16bitP_[waveNumber][waveIndex] = (epicsFloat32) atan(pWave16bitQ_[waveNumber][waveIndex] / pWave16bitI_[waveNumber][waveIndex]);
		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ16BitNELM, npt_ * 2/nchan_);
			for (i=0; i<maxTraceIQWavesCount; ++i)
			{
				if(i<nchan_)
				{
					doCallbacksInt16Array(pWave16bitI_[i], 2*npt_/nchan_, p_WaveformI16Bit, i);
					doCallbacksInt16Array(pWave16bitQ_[i], 2*npt_/nchan_, p_WaveformQ16Bit, i);
					doCallbacksFloat32Array(pWave16bitA_[i], 2*npt_/nchan_, p_WaveformA16Bit, i);
					doCallbacksFloat32Array(pWave16bitP_[i], 2*npt_/nchan_, p_WaveformP16Bit, i);
				} else { // clear inactive channels
					doCallbacksInt16Array(pWave16bitI_[i], 0, p_WaveformI16Bit, i);
					doCallbacksInt16Array(pWave16bitQ_[i], 0, p_WaveformQ16Bit, i);
					doCallbacksFloat32Array(pWave16bitA_[i], 0, p_WaveformA16Bit, i);
					doCallbacksFloat32Array(pWave16bitP_[i], 0, p_WaveformP16Bit, i);
				}
				std::fill( pWave16bitI_[i], pWave16bitI_[i] + sizeof( pWave16bitI_[i] )/sizeof( *pWave16bitI_[i]), 0 );
				std::fill( pWave16bitQ_[i], pWave16bitQ_[i] + sizeof( pWave16bitQ_[i] )/sizeof( *pWave16bitQ_[i]), 0 );
				std::fill( pWave16bitA_[i], pWave16bitA_[i] + sizeof( pWave16bitA_[i] )/sizeof( *pWave16bitA_[i]), 0 );
				std::fill( pWave16bitP_[i], pWave16bitP_[i] + sizeof( pWave16bitP_[i] )/sizeof( *pWave16bitP_[i]), 0 );
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	case 2:
		pWave22bitI_[waveNumber][waveIndex] =
                     ((epicsInt32) pFromFpga->data) >> 10;

	case 3:
		pWave22bitQ_[waveNumber][waveIndex] =
                     ((epicsInt32) pFromFpga->data) >> 10;
		// Amplitude = sqrt(I^2+Q^2)
		pWave22bitA_[waveNumber][waveIndex] = (epicsFloat32) sqrt((pWave22bitI_[waveNumber][waveIndex]^2)+(pWave22bitQ_[waveNumber][waveIndex]^2));
		// phase = arctan(Q/I)
		pWave22bitP_[waveNumber][waveIndex] = (epicsFloat32) atan(pWave22bitQ_[waveNumber][waveIndex] / pWave22bitI_[waveNumber][waveIndex]);
		if (waveOffset +1 == npt_) // if this is the last point of the waveform
		{
			setIntegerParam(p_IQ22BitNELM, npt_/nchan_);
			for (i=0; i<maxTraceIQWavesCount; ++i)
			{
				if(i<nchan_) // update both I and Q here, so they stay in sync
				{
					doCallbacksInt32Array(pWave22bitI_[i], npt_/nchan_, p_WaveformI22Bit, i);
					doCallbacksInt32Array(pWave22bitQ_[i], npt_/nchan_, p_WaveformQ22Bit, i);
					doCallbacksFloat32Array(pWave22bitA_[i], npt_/nchan_, p_WaveformA22Bit, i);
					doCallbacksFloat32Array(pWave22bitP_[i], npt_/nchan_, p_WaveformP22Bit, i);
				} else { // clear inactive channels
					doCallbacksInt32Array(pWave22bitI_[i], 0, p_WaveformI22Bit, i);
					doCallbacksInt32Array(pWave22bitQ_[i], 0, p_WaveformQ22Bit, i);
					doCallbacksFloat32Array(pWave22bitA_[i], 0, p_WaveformA22Bit, i);
					doCallbacksFloat32Array(pWave22bitP_[i], 0, p_WaveformP22Bit, i);
				}
				std::fill( pWave22bitI_[i], pWave22bitI_[i] + sizeof( pWave22bitI_[i] )/sizeof( *pWave22bitI_[i]), 0 );
				std::fill( pWave22bitQ_[i], pWave22bitQ_[i] + sizeof( pWave22bitQ_[i] )/sizeof( *pWave22bitQ_[i]), 0 );
				std::fill( pWave22bitA_[i], pWave22bitA_[i] + sizeof( pWave22bitA_[i] )/sizeof( *pWave22bitA_[i]), 0 );
				std::fill( pWave22bitP_[i], pWave22bitP_[i] + sizeof( pWave22bitP_[i] )/sizeof( *pWave22bitP_[i]), 0 );
			}
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
		}
		break;

	}

//	printf("<-- %s\n", __PRETTY_FUNCTION__);
	return asynSuccess;
}
static void circIQBufRequesterC(void *drvPvt)
{
	printf("%s: starting\n", __PRETTY_FUNCTION__);
	scllrfPRCextra *pscllrfDriver = (scllrfPRCextra*)drvPvt;
	pscllrfDriver->circIQBufRequester();
	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}

/** Starts the poller thread.
 ** Derived classes will typically call this at near the end of their constructor.
 ** Derived classes can typically use the base class implementation of the poller thread,
 ** but are free to re-implement it if necessary.
 ** \param[in] pollPeriod The time between polls. */
asynStatus scllrfPRCextra::startCircIQBufRequester()
{
	epicsThreadCreate("waveformRequester",
			epicsThreadPriorityMedium,
			epicsThreadGetStackSize(epicsThreadStackMedium),
			(EPICSTHREADFUNC)circIQBufRequesterC, (void *)this);
	return asynSuccess;
}

// run this to compose new waveform request message for circle buffer.
void scllrfPRCextra::fillCircIQBufReqMsg()
{
	unsigned int regAddr, msgOffset;

	regAddr = circIQBufStart;

	for(msgOffset=0; msgOffset < circIQBufReqMsgSize; regAddr++, msgOffset++)
	{
		if ( msgOffset % (maxRegPerMsg + nonceSize) == 0)
		{
			printf("%s inserting a blank nonce at index %u\n", __PRETTY_FUNCTION__, msgOffset);
			pReqCircIQBufMsg_[msgOffset] = {0,blankData};
			msgOffset++;
		}

		pReqCircIQBufMsg_[msgOffset].addr = regAddr | flagReadMask;
		pReqCircIQBufMsg_[msgOffset].data = blankData;
		printf("%s put addr 0x%x at index %u\n", __PRETTY_FUNCTION__, regAddr | flagReadMask, msgOffset);
	}

		htonFpgaRegArray(pReqCircIQBufMsg_, circIQBufReqMsgSize);

}


void scllrfPRCextra::reqCircIQBuf()
{
	int regsLeftToSend = circIQBufWaveRegCount;
	uint i;

	printf(" --> %s\n", __PRETTY_FUNCTION__);

	for (i=0; i<circIQBufSegmentCount; ++i)
	{
		if(regsLeftToSend > (int) (maxRegPerMsg + nonceSize))
		{
			sendRegRequest(&pReqCircIQBufMsg_[i * (maxRegPerMsg + nonceSize)], maxRegPerMsg + nonceSize);
			regsLeftToSend -= maxRegPerMsg;
			printf("%s sent segment %u, regsLeftToSend = %d\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
		}
		else
		{
			sendRegRequest(&pReqCircIQBufMsg_[i * (maxRegPerMsg + nonceSize)], regsLeftToSend + nonceSize);
			printf("%s sent segment %u, last %d registers\n", __PRETTY_FUNCTION__, i, regsLeftToSend);
			break;
		}
	}
	printf(" <-- %s\n", __PRETTY_FUNCTION__);
}

void scllrfPRCextra::circIQBufRequester()
{
	epicsEventWaitStatus status;

	FpgaReg circAck[] =
	{
			{0,0},
			{DigDspCircleBufFlipWAdr,1},
			{DigDspCircleBufFlipWAdr,2},
			{DigDspCircleBufFlipWAdr,0},
			{DigDspCircleBufFlipRAdr | flagReadMask,blankData},
			{DigDspCircleBufFlipRAdr | flagReadMask,blankData},
			{LlrfCircleReadyRAdr | flagReadMask,blankData},
	};
	//printf("\n%s calling htonFpgaRegArray for %u registers of circAck\n", __PRETTY_FUNCTION__, 5 );
    htonFpgaRegArray(circAck, sizeof(circAck)/sizeof(FpgaReg));

    fillCircIQBufReqMsg();

	sendRegRequest(circAck, sizeof(circAck)/sizeof(FpgaReg));

	// Main polling loop
	while (1)
	{
		status = epicsEventWait(reqCircIQBufEventId_);
		printf("%s: got data ready flag\n", __PRETTY_FUNCTION__);

		if (isShuttingDown_)
		{
			break;
		}

		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: signaled by reqWaveEventId_\n", __PRETTY_FUNCTION__);

////XXXX
		printf("%s: signaled by reqWaveEventId_\n", __PRETTY_FUNCTION__);
		////XXXX

		// avoid divide by 0 errors when waveforms are inactive
//		if (nCirc0Chan_ <=0 || nCirc1Chan_ <=0)
//		{
//			epicsThreadSleep(pollPeriod_);
//		}
//		else
//		{
			/* We got an event, rather than a timeout.
			 **/
			reqCircIQBuf();

			newCircIQBufRead_ = newCircIQBufAvailable_; // Indicate that we got the signal
			sendRegRequest(circAck, sizeof(circAck)/sizeof(FpgaReg));
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: done sending waveform request\n", __PRETTY_FUNCTION__);

			////XXXXX
			printf("%s: done sending waveform request\n", __PRETTY_FUNCTION__);
			////XXXX
//		}
	}
		printf("%s: exiting\n", __PRETTY_FUNCTION__);
}


// parse register data, write to array PV
asynStatus scllrfPRCextra::processCircIQBufReadback(const FpgaReg *pFromFpga)
{
	// avoid divide by 0 errors when waveforms are inactive
	if ((nCirc0Chan_ <=0) && (nCirc1Chan_ <=0))
	{
		printf("%s can't process waveform data with 0 active channels, chan0=%d, chan1=%d\n", __PRETTY_FUNCTION__, nCirc0Chan_, nCirc1Chan_);
		return asynError;
	}

	printf("--> %s\n", __PRETTY_FUNCTION__);
	unsigned int regOffset = (pFromFpga->addr & addrMask) - circIQBufStart;
	unsigned int bufOffset = regOffset/2; // Data is packed with I at one address, Q at the next, so 2 addresses per I/Q pair
	unsigned int buf0Number = nCirc0Chan_>0? bufOffset % nCirc0Chan_ : 0;
	unsigned int buf0Index = nCirc0Chan_>0? bufOffset / nCirc0Chan_ : 0;
	unsigned int buf1Number = nCirc1Chan_>0? bufOffset % nCirc1Chan_ : 0;
	unsigned int buf1Index = nCirc1Chan_>0? bufOffset / nCirc1Chan_ : 0;
	unsigned int i;
	printf("%s bufferOffset = %u, buf0Number = %u buf0Index =%u\n", __PRETTY_FUNCTION__, bufOffset, buf0Number, buf0Index);

	// Even number addresses are I, odd are Q
	switch(regOffset & 1)
	{
	case 0: // even numbered address
		pCircIQBuf0I_[buf0Number][buf0Index] = (epicsInt16) pFromFpga->data;
		pCircIQBuf1I_[buf1Number][buf1Index] = (epicsInt16) (pFromFpga->data >> 16);
		break;

	case 1: // odd numbered address
		pCircIQBuf0Q_[buf0Number][buf0Index] = (epicsInt16) pFromFpga->data;
		// Amplitude = sqrt(I^2+Q^2)
		pCircIQBuf0A_[buf0Number][buf0Index] = (epicsFloat32) sqrt((pCircIQBuf0I_[buf0Number][buf0Index]^2)+(pCircIQBuf0Q_[buf0Number][buf0Index]^2));
		// phase = arctan(Q/I)
		pCircIQBuf0P_[buf0Number][buf0Index] = (epicsFloat32) pCircIQBuf0I_[buf0Number][buf0Index]==0? NAN: atan(pCircIQBuf0Q_[buf0Number][buf0Index] / pCircIQBuf0I_[buf0Number][buf0Index]);

		pCircIQBuf1Q_[buf1Number][buf1Index] = (epicsInt16) (pFromFpga->data >> 16);
		// Amplitude = sqrt(I^2+Q^2)
		pCircIQBuf1A_[buf1Number][buf1Index] = (epicsFloat32) sqrt((pCircIQBuf1I_[buf1Number][buf1Index]^2)+(pCircIQBuf1Q_[buf1Number][buf1Index]^2));
		// phase = arctan(Q/I)
		pCircIQBuf1P_[buf1Number][buf1Index] = (epicsFloat32) pCircIQBuf1I_[buf1Number][buf1Index]==0? NAN: atan(pCircIQBuf1Q_[buf1Number][buf1Index] / pCircIQBuf1I_[buf1Number][buf1Index]);

		if ((pFromFpga->addr & addrMask) == circIQBufEnd) // if this is the last point of the buffer
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
					"%s: got last waveform datapoint. Publishing.\n", __PRETTY_FUNCTION__);
			for (i=0; i<maxCircIQBufWavesCount; ++i)
			{
				if(i<nCirc0Chan_)
				{
					doCallbacksInt16Array(pCircIQBuf0I_[i], circIQBufWavePoints/nCirc0Chan_, p_CircIQBuf0I, i);
					doCallbacksInt16Array(pCircIQBuf0Q_[i], circIQBufWavePoints/nCirc0Chan_, p_CircIQBuf0Q, i);
					doCallbacksFloat32Array(pCircIQBuf0A_[i], circIQBufWavePoints/nCirc0Chan_, p_CircIQBuf0A, i);
					doCallbacksFloat32Array(pCircIQBuf0P_[i], circIQBufWavePoints/nCirc0Chan_, p_CircIQBuf0P, i);
				} else { // clear inactive channels
					doCallbacksInt16Array(pCircIQBuf0I_[i], 0, p_CircIQBuf0I, i);
					doCallbacksInt16Array(pCircIQBuf0Q_[i], 0, p_CircIQBuf0Q, i);
					doCallbacksFloat32Array(pCircIQBuf0A_[i], 0, p_CircIQBuf0A, i);
					doCallbacksFloat32Array(pCircIQBuf0P_[i], 0, p_CircIQBuf0P, i);
				}
				std::fill( pCircIQBuf0I_[i], pCircIQBuf0I_[i] + sizeof( pCircIQBuf0I_[i] )/sizeof( *pCircIQBuf0I_[i]), 0 );
				std::fill( pCircIQBuf0Q_[i], pCircIQBuf0Q_[i] + sizeof( pCircIQBuf0Q_[i] )/sizeof( *pCircIQBuf0Q_[i]), 0 );
				std::fill( pCircIQBuf0A_[i], pCircIQBuf0A_[i] + sizeof( pCircIQBuf0A_[i] )/sizeof( *pCircIQBuf0A_[i]), 0 );
				std::fill( pCircIQBuf0P_[i], pCircIQBuf0P_[i] + sizeof( pCircIQBuf0P_[i] )/sizeof( *pCircIQBuf0P_[i]), 0 );

				if(i<nCirc1Chan_)
				{
					doCallbacksInt16Array(pCircIQBuf1I_[i], circIQBufWavePoints/nCirc1Chan_, p_CircIQBuf1I, i);
					doCallbacksInt16Array(pCircIQBuf1Q_[i], circIQBufWavePoints/nCirc1Chan_, p_CircIQBuf1Q, i);
					doCallbacksFloat32Array(pCircIQBuf1A_[i], circIQBufWavePoints/nCirc1Chan_, p_CircIQBuf1A, i);
					doCallbacksFloat32Array(pCircIQBuf1P_[i], circIQBufWavePoints/nCirc1Chan_, p_CircIQBuf1P, i);
				} else { // clear inactive channels
					doCallbacksInt16Array(pCircIQBuf1I_[i], 0, p_CircIQBuf1I, i);
					doCallbacksInt16Array(pCircIQBuf1Q_[i], 0, p_CircIQBuf1Q, i);
					doCallbacksFloat32Array(pCircIQBuf1A_[i], 0, p_CircIQBuf1A, i);
					doCallbacksFloat32Array(pCircIQBuf1P_[i], 0, p_CircIQBuf1P, i);
				}
				std::fill( pCircIQBuf1I_[i], pCircIQBuf1I_[i] + sizeof( pCircIQBuf1I_[i] )/sizeof( *pCircIQBuf1I_[i]), 1 );
				std::fill( pCircIQBuf1Q_[i], pCircIQBuf1Q_[i] + sizeof( pCircIQBuf1Q_[i] )/sizeof( *pCircIQBuf1Q_[i]), 1 );
				std::fill( pCircIQBuf1A_[i], pCircIQBuf1A_[i] + sizeof( pCircIQBuf1A_[i] )/sizeof( *pCircIQBuf1A_[i]), 1 );
				std::fill( pCircIQBuf1P_[i], pCircIQBuf1P_[i] + sizeof( pCircIQBuf1P_[i] )/sizeof( *pCircIQBuf1P_[i]), 1 );
			}
		}
	}

	printf("<-- %s\n", __PRETTY_FUNCTION__);
	return asynSuccess;
}


//asynStatus scllrfPRC::catGitSHA1()
//{
//	int oneByte;
//	int i;
//	asynStatus status;
//
//	strGitSHA1.str("");
//	strGitSHA1.clear();
//	strGitSHA1<<std::hex;
//
////	for (i=p_GitSHA1a; i<=p_GitSHA1t; i++)
////	{
////		status = (asynStatus) getIntegerParam(i, &oneByte);
////		strGitSHA1<< std::setw(2) << oneByte;
////	}
////	// used with stringin reccord, which unfortunately can only handle 19 of the 20 characters
////	status = setStringParam(p_GitSHA1, strGitSHA1.str().c_str());
//
//	return asynSuccess;
//}


static void singleMessageQueuerC(void *drvPvt)
{
	printf("%s: starting\n", __PRETTY_FUNCTION__);
	scllrfPRCextra *pscllrfDriver = (scllrfPRCextra*)drvPvt;
	pscllrfDriver->traceIQWaveformRequester();
	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}

/** Starts the poller thread.
 ** Derived classes will typically call this at near the end of their constructor.
 ** Derived classes can typically use the base class implementation of the poller thread,
 ** but are free to re-implement it if necessary.
 ** \param[in] pollPeriod The time between polls. */
asynStatus scllrfPRCextra::startSingleMessageQueuer()
{
	epicsThreadCreate("singleMessageQueuer",
			epicsThreadPriorityMedium,
			epicsThreadGetStackSize(epicsThreadStackMedium),
			(EPICSTHREADFUNC)singleMessageQueuerC, (void *)this);
	return asynSuccess;
}


void scllrfPRCextra::singleMessageQueuer()
{
//	epicsEventWaitStatus status;
//	static FpgaReg traceAck[] =
//	{
//			{0,0},
////			{TraceResetWeWAdr,1},
//			{BufTrigWAdr,0},
//			{BufTrigWAdr,1},
//			{BufTrigWAdr,0}
//	};
//	//printf("\n%s calling htonFpgaRegArray for %u registers of traceAck\n", __PRETTY_FUNCTION__, 5 );
//    htonFpgaRegArray(traceAck, sizeof(traceAck)/sizeof(FpgaReg));
//
//	// Main polling loop
//	while (1)
//	{
//		status = epicsEventWait(reqWaveEventId_);
//
//		if (isShuttingDown_)
//		{
//			break;
//		}
//
//		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
//				"%s: signaled by reqWaveEventId_\n", __PRETTY_FUNCTION__);
//
//		// avoid divide by 0 errors when waveforms are inactive
//		if (nchan_ <=0 || npt_ <=0)
//		{
//			epicsThreadSleep(pollPeriod_);
//		}
//		else {
//			/* We got an event, rather than a timeout.
//			 **/
//			switch (wavBitWidth_)
//			{
//			case read16bit:
//				reqOneWaveform(pReqIQ16bAMsg_);
//				reqOneWaveform(pReqIQ16bBMsg_);
//				break;
//			case read22bit:
//				reqOneWaveform(pReqI22bMsg_);
//				reqOneWaveform(pReqQ22bMsg_);
//				break;
//			default:
//				printf("%s: impossible bit width\n", __PRETTY_FUNCTION__);
//				break;
//			}
//
//			newWaveRead_ = newWaveAvailable_; // Indicate that we got the signal
//			sendRegRequest(traceAck, sizeof(traceAck)/sizeof(FpgaReg));
//			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
//					"%s: done sending waveform request\n", __PRETTY_FUNCTION__);
//		}
//	}
	//	printf("%s: exiting\n", __PRETTY_FUNCTION__);
}

/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCextra::processRegReadback(const FpgaReg *pFromFpga, bool &waveIsReady)
{
//	unsigned int i;
	asynStatus status = asynSuccess;
	assert(pFromFpga->addr&flagReadMask); // This function is only for read registers
	epicsInt32 tmpData;
	int32_t signExtBits = 0;

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case TraceStatus1RAdr|flagReadMask:
		status = (asynStatus) setIntegerParam(p_TraceStatus1R,
				(pFromFpga->data & TraceStatus1Mask));
		if (pFromFpga->data & waveIsReadyMask)
		{
			waveIsReady = true;
		}
		// Calculate number of points per waveform, and update request
		// waveform messages if it has changed.
		if(npt_ != (size_t) (1 << ((pFromFpga->data & nptMask)>> 24)))
		{
			npt_ = 1 << ((pFromFpga->data & nptMask)>> 24);

			if(npt_ > traceIQWaveSegmentCount * (traceIQWaveSegmentSize - 1)) // protect against register saying more points than buffer space
			{
				npt_ = traceIQWaveSegmentCount * (traceIQWaveSegmentSize - 1);
			}
			fillTraceIQWavReqMsg();
		}
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				TraceStatus1RString,
				(unsigned ) pFromFpga->data & TraceStatus1Mask);
	break;

    case DigDspTraceKeepRAdr|flagReadMask:
		tmpData = pFromFpga->data & DigDspTraceKeepMask;
//    printf("%s got data 0x%x for DigDspTraceKeepRAdr\n",__PRETTY_FUNCTION__,tmpData);
		status = (asynStatus) setUIntDigitalParam(p_DigDspTraceKeepR,
				(pFromFpga->data & DigDspTraceKeepMask) , DigDspTraceKeepMask);
		// Count the number of bits set
		for (nchan_ = 0; tmpData; nchan_++)
		{
		  tmpData &= tmpData - 1; // clear the least significant bit set
		}
		setIntegerParam(p_IQNActive, nchan_);
//	    printf("%s DigDspTraceKeepRAdr says %d active channels\n",__PRETTY_FUNCTION__,nchan_);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepRString,
				(unsigned ) pFromFpga->data & DigDspTraceKeepMask);
	break;

    case DigDspCircleBufFlipRAdr|flagReadMask:
	status = (asynStatus) setUIntDigitalParam(p_DigDspCircleBufFlipR,
			(pFromFpga->data & DigDspCircleBufFlipMask) , DigDspCircleBufFlipMask);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipRString,
				(unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
	break;

    case LlrfCircleReadyRAdr|flagReadMask:
	status = (asynStatus) setUIntDigitalParam(p_LlrfCircleReadyR,
			(pFromFpga->data & LlrfCircleReadyMask) , LlrfCircleReadyMask);
		// if flags are set for any active channels,
		////XXXX
		printf("%s ((nCirc0Chan=%d_==0)||(pFromFpga->data=%d & 0x1)) && ((nCirc1Chan_=%d==0)||(pFromFpga->data=%d & 0x2)) && (newCircIQBufAvailable_=%d == newCircIQBufRead_=%d) && (nCirc0Chan_=%d+nCirc1Chan_=%d > 0)\n",
					__PRETTY_FUNCTION__, nCirc0Chan_, pFromFpga->data, nCirc1Chan_, pFromFpga->data,
					newCircIQBufAvailable_, newCircIQBufRead_, nCirc0Chan_, nCirc1Chan_);
		////XXXX
		if (((nCirc0Chan_==0)||(pFromFpga->data & 0x1)) && ((nCirc1Chan_==0)||(pFromFpga->data & 0x2)) &&
					// and there isn't a pending waveform read, and there is at least one active channel
					(newCircIQBufAvailable_ == newCircIQBufRead_) && (nCirc0Chan_+nCirc1Chan_ > 0))
		{
			// Set the message counter with a "new waveform" notification
			// to the message counter value for the message we just received
			newCircIQBufAvailable_ = lastResponseCount_;

			////XXXX
			printf("New circle buffer data ready, signaling waveform requester\n");
			////XXXX

			epicsEventSignal(reqCircIQBufEventId_);
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,"%s: new waveform data available, signaling the waveform requester\n",
					__PRETTY_FUNCTION__);
		}
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				LlrfCircleReadyRString,
				(unsigned ) pFromFpga->data & LlrfCircleReadyMask);
	break;

    case DigDspMuxShell0DspChanKeepRAdr|flagReadMask:
		tmpData = pFromFpga->data & DigDspMuxShell0DspChanKeepMask;
		status = (asynStatus) setUIntDigitalParam(p_DigDspMuxShell0DspChanKeepR,
				(pFromFpga->data & DigDspMuxShell0DspChanKeepMask) , DigDspMuxShell0DspChanKeepMask);
		////xxxx
		printf("%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspChanKeepRString,
				(unsigned ) pFromFpga->data);
		////xxxx
		// Count the number of bits set
		for (nCirc0Chan_ = 0; tmpData; nCirc0Chan_++)
		{
		  tmpData &= tmpData - 1; // clear the least significant bit set
		}
		setIntegerParam(p_Circ0NActive, nCirc0Chan_);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspChanKeepRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell0DspChanKeepMask);
	break;

    case DigDspMuxShell1DspChanKeepRAdr|flagReadMask:
		tmpData = pFromFpga->data & DigDspMuxShell1DspChanKeepMask;
		status = (asynStatus) setUIntDigitalParam(p_DigDspMuxShell1DspChanKeepR,
				(pFromFpga->data & DigDspMuxShell1DspChanKeepMask), DigDspMuxShell1DspChanKeepMask);
		// Count the number of bits set
		for (nCirc1Chan_ = 0; tmpData; nCirc1Chan_++)
		{
		  tmpData &= tmpData - 1; // clear the least significant bit set
		}
		setIntegerParam(p_Circ1NActive, nCirc1Chan_);
		asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspChanKeepRString,
				(unsigned ) pFromFpga->data & DigDspMuxShell1DspChanKeepMask);
	break;

	default:
		if( traceIQWavesStart <= (pFromFpga->addr & addrMask) && (pFromFpga->addr & addrMask) <= traceIQWavesEnd )
		{
			//printf("%s waveform address 0x%x, value %d\n", __PRETTY_FUNCTION__, (pFromFpga->addr & addrMask), pFromFpga->data);
			processTraceIQWaveReadback(pFromFpga);
		}
		else
		if( circIQBufStart <= (pFromFpga->addr & addrMask) && (pFromFpga->addr & addrMask) <= circIQBufEnd )
		{
			printf("%s waveform address 0x%x, value %d\n", __PRETTY_FUNCTION__, (pFromFpga->addr & addrMask), pFromFpga->data);
			processCircIQBufReadback(pFromFpga);
		}
		else
		{
                       // printf("%s passing processing of register 0c%x to parent class\n", __PRETTY_FUNCTION__, (pFromFpga->addr & addrMask));
			status = scllrfPRCDriver::processRegReadback(pFromFpga, waveIsReady);
		}
		break;
    }

    return status;
}


/**  Extract register address and data from the received message and set the appropriate
 * asyn parameter.
 * Some registers have a "new waveform data ready" flag. If they have this and it is set,
 * set weveIsReady to true.
 * Note: This function should not set waveIsReady to false. That is done by a loop in the
 * calling function.
* \param[in] pFromFpga Data returned from the FPGA for a single register
* \param[in] waveIsReady A flag that gets set to true if the appropriate bit was set by the FPGA
*/
asynStatus scllrfPRCextra::processRegWriteResponse(const FpgaReg *pFromFpga)
{
	asynStatus status = asynSuccess;
	epicsInt32 valueSet[maxMsgSize/sizeof(FpgaReg)]; // Put the value sent to the FPGA here for comparison
	epicsUInt32 uValueSet[maxMsgSize/sizeof(FpgaReg)];
//	epicsUInt32 uValueSet;
	epicsInt32 tmpData;
	epicsInt32 errorCount;
//  variables that may be useful for checking array data
//	asynUser *pAsynArrayUser;
//	unsigned int i;
	assert(!(pFromFpga->addr&flagReadMask)); // This function is only for read registers

	/* Map address to parameter, set the parameter in the parameter library. */
	switch (pFromFpga->addr)
    {
    case DigDspBufTrigWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspBufTrigW, uValueSet , DigDspBufTrigMask);
		if( (valueSet[0] & DigDspBufTrigMask) == (pFromFpga->data & DigDspBufTrigMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspBufTrigWString, (unsigned ) pFromFpga->data & DigDspBufTrigMask);
		else
		{
			// We don't care, since this is typically part of a canned sequence of writes
		}

		break;
    case DigDspTraceKeepWAdr:
		status = (asynStatus) getIntegerParam(p_DigDspTraceKeepW, valueSet);
		if( (valueSet[0] & DigDspTraceKeepMask) == (pFromFpga->data & DigDspTraceKeepMask))
		{		// Count the number of bits set
			tmpData = (pFromFpga->data & DigDspTraceKeepMask);
			for (nchan_ = 0; tmpData; nchan_++)
			{
			  tmpData &= tmpData - 1; // clear the least significant bit set
			}
			setIntegerParam(p_IQNActive, nchan_);
		    printf("%s DigDspTraceKeepWAdr says %d active channels\n",__PRETTY_FUNCTION__,nchan_);

			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
		}
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceKeepWString, valueSet[0] & DigDspTraceKeepMask, (unsigned ) pFromFpga->data & DigDspTraceKeepMask);
			status = asynError;
			setParamStatus(p_DigDspTraceKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;
    case DigDspTraceResetWeWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspTraceKeepW, uValueSet , DigDspTraceKeepMask);
		if( (valueSet[0] & DigDspTraceResetWeMask) == (pFromFpga->data & DigDspTraceResetWeMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspTraceResetWeWString, (unsigned ) pFromFpga->data & DigDspTraceResetWeMask);
		else
		{
			// We don't care, since there are typically several writes to this per message: 0, 1, 0
		}

		break;
    case DigDspCircleBufFlipWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspCircleBufFlipW, uValueSet , DigDspCircleBufFlipMask);
		if( (valueSet[0] & DigDspCircleBufFlipMask) == (pFromFpga->data & DigDspCircleBufFlipMask))
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspCircleBufFlipWString, (unsigned ) pFromFpga->data & DigDspCircleBufFlipMask);
		else
		{
			// That's normal for this register
		}

		break;

    case DigDspMuxShell0DspChanKeepWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspMuxShell0DspChanKeepW, uValueSet , DigDspMuxShell0DspChanKeepMask);
		////XXXXX Trigger a read whenever we change a bit, whether data is ready or not.
		newCircIQBufAvailable_ = lastResponseCount_;
		epicsEventSignal(reqCircIQBufEventId_);
		////XXXX

		if( (valueSet[0] & DigDspMuxShell0DspChanKeepMask) == (pFromFpga->data & DigDspMuxShell0DspChanKeepMask))
		{
			// Count the number of bits set
			tmpData = (pFromFpga->data & DigDspMuxShell0DspChanKeepMask);
			for (nchan_ = 0; tmpData; nchan_++)
			{
			  tmpData &= tmpData - 1; // clear the least significant bit set
			}
			setIntegerParam(p_Circ0NActive, nCirc0Chan_);
			printf("%s DigDspMuxShell0DspChanKeepWAdr says %d active channels\n",__PRETTY_FUNCTION__,nCirc0Chan_);
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspChanKeepWString, (unsigned ) pFromFpga->data & DigDspMuxShell0DspChanKeepMask);
		}
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell0DspChanKeepWString, valueSet[0] & DigDspMuxShell0DspChanKeepMask, (unsigned ) pFromFpga->data & DigDspMuxShell0DspChanKeepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell0DspChanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;

    case DigDspMuxShell1DspChanKeepWAdr:
		status = (asynStatus) getUIntDigitalParam(p_DigDspMuxShell1DspChanKeepW, uValueSet , DigDspMuxShell1DspChanKeepMask);
		if( (valueSet[0] & DigDspMuxShell1DspChanKeepMask) == (pFromFpga->data & DigDspMuxShell1DspChanKeepMask))
		{
			// Count the number of bits set
			tmpData = (pFromFpga->data & DigDspMuxShell1DspChanKeepMask);
			for (nchan_ = 0; tmpData; nchan_++)
			{
			  tmpData &= tmpData - 1; // clear the least significant bit set
			}
			setIntegerParam(p_Circ1NActive, nCirc1Chan_);
			printf("%s DigDspMuxShell1DspChanKeepWAdr says %d active channels\n",__PRETTY_FUNCTION__,nCirc1Chan_);
			asynPrint(pOctetAsynUser_, ASYN_TRACEIO_DRIVER,
				"%s: readback for address=%s, value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspChanKeepWString, (unsigned ) pFromFpga->data & DigDspMuxShell1DspChanKeepMask);
		}
		else
		{
			asynPrint(pOctetAsynUser_, ASYN_TRACE_ERROR,
				"%s: value sent to %s, value=0x%x, doesn't match echoed value=0x%x\n", __PRETTY_FUNCTION__,
				DigDspMuxShell1DspChanKeepWString, valueSet[0] & DigDspMuxShell1DspChanKeepMask, (unsigned ) pFromFpga->data & DigDspMuxShell1DspChanKeepMask);
			status = asynError;
			setParamStatus(p_DigDspMuxShell1DspChanKeepW, status);
			getIntegerParam(p_CommErrorCount, &errorCount);
			setIntegerParam(p_CommErrorCount, ++errorCount);
		}

		break;

	default:
// TODO: Add checking for arrays. Until then, we'll hit "default" for array values, so not really an error. GWB 8-23-2016
//		getIntegerParam(p_CommErrorCount, &errorCount);
//		setIntegerParam(p_CommErrorCount, errorCount + 1);
		status = scllrfPRCDriver::processRegWriteResponse(pFromFpga);

		break;
    }

	// TODO: handle arrays

    return status;
}



extern "C" {

/* Configuration routine.  Called directly, or from the iocsh function below */

/** EPICS iocsh callable function to call constructor for the scllrfPRC class.
 * \param[in] portName The name of the asyn port driver to be created.
 * \param[in] netPortName The name of the asynIPport this will use to communicate */
int scllrfPRCextraConfigure(const char *drvPortName, const char *netPortName)
{
	new scllrfPRCextra(drvPortName, netPortName);
	return asynSuccess;
}


/* EPICS iocsh shell commands */

static const iocshArg initArg0 = { "drvPortName",iocshArgString};
static const iocshArg initArg1 = { "IP port name",iocshArgString};
static const iocshArg * const initArgs[] = {&initArg0,
		&initArg1};

/* NOTE: The command name defined below, "scllrfPRCConfigure", conflicts
 * with the same command defined in the base class if both register functions
 * are left in the dbd file. If it's renamed here, it breaks the macro definition
 * scheme used in iocBoot/common/regInterface.cmd. Is there a better way to resolve
 * the conflict than this duplicate name and leaving scllrfPRCRegister out of the
 * dbd file?
 */
static const iocshFuncDef initFuncDef = {"scllrfPRCConfigure",2,initArgs};
static void initCallFunc(const iocshArgBuf *args)
{
	scllrfPRCextraConfigure(args[0].sval, args[1].sval);
}

void scllrfPRCextraRegister(void)
{
	iocshRegister(&initFuncDef,initCallFunc);
}

epicsExportRegistrar(scllrfPRCextraRegister);

}



