# Analog I/O
#for $p in sorted($registers, key=lambda k: k['address'])
## Check that: if access is specified it's 'read', and that this isn't a waveform.
#if (not($p.has_key('access')) or ('r' in $p.access )) and not($p.has_key('nelm') and $p.nelm>1)
	#if not $p.has_key('bits')
record(ai, "\$(P)${p.name.upper()}_R")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	field( DTYP, "asynInt32")
	field( INP,  "@asyn(\$(PORT),0) ${p.name.upper()}_R")
	field( SCAN, "I/O Intr")
	#if $p.has_key('range_top')
	field( HOPR, "${p.range_top}")
	#else if $p.has_key('signed') and ( $p.signed == 'unsigned')
		#if $p.has_key('bit_width')
	field( HOPR, "${2**$p.bit_width - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "${2**$p.data_width - 1}")
		#end if
	#else ## signed number, take sign bit into account
		#if $p.has_key('bit_width')
	field( HOPR, "${2**($p.bit_width - 1) - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "${2**($p.data_width - 1) - 1}")
		#end if
	#end if
	#if $p.has_key('range_bottom')
	field( LOPR, "${p.range_bottom}")
	#else if $p.has_key('bit_width')
		#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
		#else
	field( LOPR, "${-(2**($p.bit_width - 1) - 1)}")
		#end if
	#else if $p.has_key('data_width')
		#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
		#else
	field( LOPR, "${-(2**($p.data_width - 1) - 1)}")
		#end if
	#end if
	#if $p.has_key('ASLO')
	field( ASLO, "${p.ASLO}")
	#end if
	#if $p.has_key('AOFF')
	field( AOFF, "${p.AOFF}")
	#end if
	#if $p.has_key('PREC')
	field(PREC, "${p.PREC}")
	#else
	field(PREC, 5)
	#end if
	info( autosaveFields, "DESC HIHI HHSV HIGH HSV LOW LSV LOLO LLSV HYST ADEL MDEL")
}
record(bi, "\$(P)GET_${p.name.upper()}_R")
{
	field( DTYP, "asynInt32")
	field( INP,  "@asyn(\$(PORT),0) ${p.name.upper()}_R")
	field( SCAN, "Passive")
}

	#end if
#end if
#end for

#for $p in sorted($registers, key=lambda k: k['address'])
## Check that: this has write access, and isn't a waveofrm
	#if $p.has_key('access') and ( 'w' in $p.access ) and not($p.has_key('nelm') and $p.nelm>1)
		#if not $p.has_key('bits')
record(ao, "\$(P)${p.name.upper()}_W")
{
			#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
			#end if
			#if $p.has_key('egu')
	field( EGU, "${p.egu}")
			#end if
	field( PINI, "NO")
	field( DTYP, "asynInt32")
	field( OUT,  "@asyn(\$(PORT),0) ${p.name.upper()}_W")
	field( SCAN, "Passive")
			#if $p.has_key('range_top')
	field( HOPR, "${p.range_top}")
	field( DRVH, "${p.range_top}")
			#else if $p.has_key('signed') and ( $p.signed == 'unsigned')
				#if $p.has_key('bit_width')
	field( HOPR, "${2**$p.bit_width - 1}")
	field( DRVH, "${2**$p.bit_width - 1}")
				#else if $p.has_key('data_width')
	field( HOPR, "${2**$p.data_width - 1}")
	field( DRVH, "${2**$p.data_width - 1}")
				#end if
			#else 	## signed number, take sign bit into account
				#if $p.has_key('bit_width')
	field( HOPR, "${2**($p.bit_width - 1) - 1}")
	field( DRVH, "${2**($p.bit_width - 1) - 1}")
				#else if $p.has_key('data_width')
	field( HOPR, "${2**($p.data_width - 1) - 1}")
	field( DRVH, "${2**($p.data_width - 1) - 1}")
				#end if
			#end if
			#if $p.has_key('range_bottom')
	field( LOPR, "${p.range_bottom}")
	field( DRVL, "${p.range_bottom}")
			#else if $p.has_key('bit_width')
				#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	field( DRVL, 0)
				#else
	field( LOPR, "${-(2**($p.bit_width - 1) - 1)}")
	field( DRVL, "${-(2**($p.bit_width - 1) - 1)}")
				#end if
			#else if $p.has_key('data_width')
				#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	field( DRVL, 0)
				#else
	field( LOPR, "${-(2**($p.data_width - 1) - 1)}")
	field( DRVL, "${-(2**($p.data_width - 1) - 1)}")
				#end if
			#end if
			#if $p.has_key('ASLO')
	field( ASLO, "${p.ASLO}")
			#end if
			#if $p.has_key('AOFF')
	field( AOFF, "${p.AOFF}")
			#end if
			#if $p.has_key('PREC')
	field(PREC, "${p.PREC}")
			#else
	field(PREC, 5)
			#end if
	info( autosaveFields, "DESC HIHI HHSV HIGH HSV LOW LSV LOLO LLSV HYST ADEL MDEL")
}

		#end if
	#end if
#end for

# multi-element analog I/O, arrays of certain length or fewer
#for $p in sorted($registers, key=lambda k: k['address'])
## Check that: if access is specified it's 'read', and that this isn't a waveform.
#if (not($p.has_key('access')) or ('r' in $p.access )) and $p.has_key('nelm') and $p.nelm<=32 and $p.nelm > 1
	#for $i in range(0, $p.nelm)
record(ai, "\$(P)${p.name.upper()}_R${i}")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	field( DTYP, "asynInt32")
	field( INP,  "@asyn(\$(PORT),${i}) ${p.name.upper()}_R")
	field( SCAN, "I/O Intr")
	#if $p.has_key('range_top')
	field( HOPR, "${p.range_top}")
	#else if $p.has_key('signed') and ( $p.signed == 'unsigned')
		#if $p.has_key('bit_width')
	field( HOPR, "0x${2**$p.bit_width - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "0x${2**$p.data_width - 1}")
		#end if
	#else ## signed number, take sign bit into account
		#if $p.has_key('bit_width')
	field( HOPR, "${2**($p.bit_width - 1) - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "${2**($p.data_width - 1) - 1}")
		#end if
	#end if
	#if $p.has_key('range_bottom')
	field( LOPR, "${p.range_bottom}")
	#else if $p.has_key('bit_width')
		#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
		#else
	field( LOPR, "${-(2**($p.bit_width - 1) - 1)}")
		#end if
	#else if $p.has_key('data_width')
		#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
		#else
	field( LOPR, "${-(2**($p.data_width - 1) - 1)}")
		#end if
	#end if
	#if $p.has_key('ASLO')
	field( ASLO, "${p.ASLO}")
	#end if
	#if $p.has_key('AOFF')
	field( AOFF, "${p.AOFF}")
	#end if
	#if $p.has_key('PREC')
	field(PREC, "${p.PREC}")
	#else
	field(PREC, 5)
	#end if
info( autosaveFields, "DESC HIHI HHSV HIGH HSV LOW LSV LOLO LLSV HYST ADEL MDEL")
}
record(bi, "\$(P)GET_${p.name.upper()}_R${i}")
{
	field( DTYP, "asynInt32")
	field( INP,  "@asyn(\$(PORT),${i}) ${p.name.upper()}_R")
	field( SCAN, "Passive")
}

	#end for
#end if
#end for

#for $p in sorted($registers, key=lambda k: k['address'])
## Check that: this has write access, and isn't a waveofrm
#if $p.has_key('access') and ( 'w' in $p.access ) and $p.has_key('nelm') and $p.nelm > 1
	#for $i in range(0, $p.nelm)
record(ao, "\$(P)${p.name.upper()}_W${i}")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	field( DTYP, "asynInt32")
	field( OUT,  "@asyn(\$(PORT),${i}) ${p.name.upper()}_W")
	field( SCAN, "Passive")
	#if $p.has_key('range_top')
	field( HOPR, "${p.range_top}")
	field( DRVH, "${p.range_top}")
	#else if $p.has_key('signed') and ( $p.signed == 'unsigned')
		#if $p.has_key('bit_width')
	field( HOPR, "0x${2**$p.bit_width - 1}")
	field( DRVH, "0x${2**$p.bit_width - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "0x${2**$p.data_width - 1}")
	field( DRVH, "0x${2**$p.data_width - 1}")
		#end if
	#else ## signed number, take sign bit into account
		#if $p.has_key('bit_width')
	field( HOPR, "${2**($p.bit_width - 1) - 1}")
	field( DRVH, "${2**($p.bit_width - 1) - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "${2**($p.data_width - 1) - 1}")
	field( DRVH, "${2**($p.data_width - 1) - 1}")
		#end if
	#end if
	#if $p.has_key('range_bottom')
	field( LOPR, "${p.range_bottom}")
	field( DRVL, "${p.range_bottom}")
	#else if $p.has_key('bit_width')
		#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	field( DRVL, 0)
		#else
	field( LOPR, "${-(2**($p.bit_width - 1) - 1)}")
	field( DRVL, "${-(2**($p.bit_width - 1) - 1)}")
		#end if
	#else if $p.has_key('data_width')
		#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	field( DRVL, 0)
		#else
	field( LOPR, "${-(2**($p.data_width - 1) - 1)}")
	field( DRVL, "${-(2**($p.data_width - 1) - 1)}")
		#end if
	#end if
	#if $p.has_key('ASLO')
	field( ASLO, "${p.ASLO}")
	#end if
	#if $p.has_key('AOFF')
	field( AOFF, "${p.AOFF}")
	#end if
	#if $p.has_key('PREC')
	field(PREC, "${p.PREC}")
	#else
	field(PREC, 5)
	#end if
info( autosaveFields, "DESC HIHI HHSV HIGH HSV LOW LSV LOLO LLSV HYST ADEL MDEL")
}

	#end for
#end if
#end for


# MBBI/MBBO
#for $p in sorted($registers, key=lambda k: k['address'])
#if $p.has_key('bits')
	## Check that: if access is specified it's 'read', and that this isn't a waveform.
	#if (not($p.has_key('access')) or ('r' in $p.access )) and not(($p.has_key('nelm') and $p.nelm>1))
record(longin, "\$(P)${p.name.upper()}_R")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	field( DTYP, "asynUInt32Digital")
	#if $p.has_key('bit_width')
	field( INP,  "@asynMask(\$(PORT),0, 0x${format(2**$p.bit_width - 1, '08X')}, 0.1) ${p.name.upper()}_R")
	field( HOPR, "0x${2**$p.bit_width - 1}")
	#else if $p.has_key('data_width')
	field( INP,  "@asynMask(\$(PORT),0, 0x${format(2**$p.data_width - 1, '08X')}, 0.1) ${p.name.upper()}_R")
	field( HOPR, "0x${2**$p.data_width - 1}")
	#else
	field( INP,  "@asynMask(\$(PORT),0, 0xFFFFFFFF, 0.1) ${p.name.upper()}_R")
	#end if
	field( SCAN, "I/O Intr")
}
record(mbbiDirect, "\$(P)${p.name.upper()}_BITS_R")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	field( DTYP, "asynUInt32Digital")
	#if $p.has_key('bit_width')
	field( INP,  "@asynMask(\$(PORT),0, 0x${format(2**$p.bit_width - 1, '08X')}, 0.1) ${p.name.upper()}_R")
	field( NOBT, "$p.bit_width")
	#else if $p.has_key('data_width')
	field( INP,  "@asynMask(\$(PORT),0, 0x${format(2**$p.data_width - 1, '08X')}, 0.1) ${p.name.upper()}_R")
	field( NOBT, "$p.data_width")
	#else
	field( INP,  "@asynMask(\$(PORT),0, 0xFFFFFFFF, 0.1) ${p.name.upper()}_R")
	#end if
	field( SCAN, "I/O Intr")
}
record(bi, "\$(P)GET_${p.name.upper()}_R")
{
	field( DTYP, "asynUInt32Digital")
	field( INP,  "@asynMask(\$(PORT),0, 0xFFFFFFFF, 0.1) ${p.name.upper()}_R")
	field( SCAN, "Passive")
}

	#end if
#end if
#end for

#for $p in sorted($registers, key=lambda k: k['address'])
#if $p.has_key('bits')
	## Check that: this has write access, and isn't a waveofrm
	#if $p.has_key('access') and ( 'w' in $p.access ) and not($p.has_key('nelm') and $p.nelm>1)
record(longout, "\$(P)${p.name.upper()}_W")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	field( DTYP, "asynUInt32Digital")
	#if $p.has_key('bit_width')
	field( OUT,  "@asynMask(\$(PORT),0, 0x${format(2**$p.bit_width - 1, '08X')}, 0.1) ${p.name.upper()}_W")
	field( HOPR, "0x${2**$p.bit_width - 1}")
	field( DRVH, "0x${2**$p.bit_width - 1}")
	#else if $p.has_key('data_width')
	field( OUT,  "@asynMask(\$(PORT),0, 0x${format(2**$p.data_width - 1, '08X')}, 0.1) ${p.name.upper()}_W")
	field( HOPR, "0x${2**$p.data_width - 1}")
	field( DRVH, "0x${2**$p.data_width - 1}")
	#else
	field( OUT,  "@asynMask(\$(PORT),0, 0xFFFFFFFF, 0.1) ${p.name.upper()}_W")
	#end if
	field( SCAN, "Passive")
	info( autosaveFields, "DESC")
}
record(mbboDirect, "\$(P)${p.name.upper()}_BITS_W")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	field( DTYP, "asynUInt32Digital")
	#if $p.has_key('bit_width')
	field( OUT,  "@asynMask(\$(PORT),0, 0x${format(2**$p.bit_width - 1, '08X')}, 0.1) ${p.name.upper()}_W")
	field( NOBT, "$p.bit_width")
	#else if $p.has_key('data_width')
	field( OUT,  "@asynMask(\$(PORT),0, 0x${format(2**$p.data_width - 1, '08X')}, 0.1) ${p.name.upper()}_W")
	field( NOBT, "$p.data_width")
	#else
	field( OUT,  "@asynMask(\$(PORT),0, 0xFFFFFFFF, 0.1) ${p.name.upper()}_W")
	#end if
	field( SCAN, "Passive")
	info( autosaveFields, "DESC")
}

	#end if
#end if
#end for

# Waveforms
#for $p in sorted($registers, key=lambda k: k['address'])
## Check that: if access is specified it's 'read', and that this is a waveform.
#if (not($p.has_key('access')) or ('r' in $p.access )) and ($p.has_key('nelm') and $p.nelm>1)
record(waveform, "\$(P)${p.name.upper()}_R")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	#if $p.has_key('dtype') and ($p.dtype == "string")
	field( DTYP, "asynOctetRead")
	field( FTVL, "CHAR")
	#else
	#if ($p.has_key('bit_width') and ($p.bit_width <= 8)) or ($p.has_key('data_width') and ($p.data_width <= 8))
	field( DTYP, "asynInt8ArrayIn")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "UCHAR")
		#else
	field( FTVL, "CHAR")
		#end if
	#else if ($p.has_key('bit_width') and ($p.bit_width <= 16)) or ($p.has_key('data_width') and ($p.data_width <= 16))
	field( DTYP, "asynInt16ArrayIn")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "USHORT")
		#else
	field( FTVL, "SHORT")
		#end if
	#else
	field( DTYP, "asynInt32ArrayIn")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "ULONG")
		#else
	field( FTVL, "LONG")
		#end if
	#end if
	#end if
	field( NELM, "${p.nelm}")
	field( SCAN, "I/O Intr")
	field( INP,  "@asyn(\$(PORT),0) ${p.name.upper()}_WAV")
	#if $p.has_key('range_top')
	field( HOPR, "${p.range_top}")
	#else if $p.has_key('signed') and ( $p.signed == 'unsigned')
		#if $p.has_key('bit_width')
	field( HOPR, "0x${2**$p.bit_width - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "0x${2**$p.data_width - 1}")
		#end if
	#else ## signed number, take sign bit into account
		#if $p.has_key('bit_width')
	field( HOPR, "${2**($p.bit_width - 1) - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "${2**($p.data_width - 1) - 1}")
		#end if
	#end if
	#if $p.has_key('range_bottom')
	field( LOPR, "${p.range_bottom}")
	#else if $p.has_key('bit_width')
	#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	#else
	field( LOPR, "${-(2**($p.bit_width - 1) - 1)}")
	#end if
	#else if $p.has_key('data_width')
	#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	#else
	field( LOPR, "${-(2**($p.data_width - 1) - 1)}")
	#end if
	#end if
	info( autosaveFields, "DESC EGU PREC")
}
record(waveform, "\$(P)GET_${p.name.upper()}_R")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	#if $p.has_key('dtype') and ($p.dtype == "string")
	field( DTYP, "asynOctetRead")
	field( FTVL, "CHAR")
	#else
	#if ($p.has_key('bit_width') and ($p.bit_width <= 8)) or ($p.has_key('data_width') and ($p.data_width <= 8))
	field( DTYP, "asynInt8ArrayIn")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "UCHAR")
		#else
	field( FTVL, "CHAR")
		#end if
	#else if ($p.has_key('bit_width') and ($p.bit_width <= 16)) or ($p.has_key('data_width') and ($p.data_width <= 16))
	field( DTYP, "asynInt16ArrayIn")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "USHORT")
		#else
	field( FTVL, "SHORT")
		#end if
	#else
	field( DTYP, "asynInt32ArrayIn")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "ULONG")
		#else
	field( FTVL, "LONG")
		#end if
	#end if
	#end if
	field( NELM, "${p.nelm}")
	field( INP,  "@asyn(\$(PORT),0) ${p.name.upper()}_WAV")
	field( SCAN, "Passive")
}

#end if
#end for

#for $p in sorted($registers, key=lambda k: k['address'])
## Check that: this has write access, and is a waveofrm
#if $p.has_key('access') and ( 'w' in $p.access ) and ($p.has_key('nelm') and $p.nelm>1)
record(waveform, "\$(P)${p.name.upper()}_W")
{
	#if $p.has_key('desc')
	field( DESC, "${p.desc[:38]}")
	#end if
	#if $p.has_key('egu')
	field( EGU, "${p.egu}")
	#end if
	field( PINI, "NO")
	#if $p.has_key('dtype') and ($p.dtype == "string")
	field( DTYP, "asynOctetRead")
	field( FTVL, "CHAR")
	#else
	#if ($p.has_key('bit_width') and ($p.bit_width <= 8)) or ($p.has_key('data_width') and ($p.data_width <= 8))
	field( DTYP, "asynInt8ArrayOut")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "UCHAR")
		#else
	field( FTVL, "CHAR")
		#end if
	#else if ($p.has_key('bit_width') and ($p.bit_width <= 16)) or ($p.has_key('data_width') and ($p.data_width <= 16))
	field( DTYP, "asynInt16ArrayOut")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "USHORT")
		#else
	field( FTVL, "SHORT")
		#end if
	#else
	field( DTYP, "asynInt32ArrayOut")
		#if $p.has_key('signed') and ($p.signed == 'unsigned')
	field( FTVL, "ULONG")
		#else
	field( FTVL, "LONG")
		#end if
	#end if
	#end if
	field( NELM, "${p.nelm}")
	field( INP,  "@asyn(\$(PORT),0) ${p.name.upper()}_WAV")
	#if $p.has_key('range_top')
	field( HOPR, "${p.range_top}")
	#else if $p.has_key('signed') and ( $p.signed == 'unsigned')
		#if $p.has_key('bit_width')
	field( HOPR, "0x${2**$p.bit_width - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "0x${2**$p.data_width - 1}")
		#end if
	#else ## signed number, take sign bit into account
		#if $p.has_key('bit_width')
	field( HOPR, "${2**($p.bit_width - 1) - 1}")
		#else if $p.has_key('data_width')
	field( HOPR, "${2**($p.data_width - 1) - 1}")
		#end if
	#end if
	#if $p.has_key('range_bottom')
	field( LOPR, "${p.range_bottom}")
	#else if $p.has_key('bit_width')
	#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	#else
	field( LOPR, "${-(2**($p.bit_width - 1) - 1)}")
	#end if
	#else if $p.has_key('data_width')
	#if $p.has_key('signed') and ( $p.signed == 'unsigned')
	field( LOPR, 0)
	#else
	field( LOPR, "${-(2**($p.data_width - 1) - 1)}")
	#end if
	#end if
	info( autosaveFields, "DESC EGU PREC")
}

#end if
#end for

#if $varExists('commands')
#for $c in $commands
record(longout, "\$(P)C_${c.name.upper()}")
{
	field( DTYP, "asynInt32")
	field( OUT,  "@asyn(\$(PORT),0) C_${c.name.upper()}")
	field( SCAN, "I/O Intr")
	info( autosaveFields, "DESC")
}

#end for
#end if
